{"version":3,"sources":["../../../.nvm/versions/node/v8.11.1/lib/node_modules/parcel/node_modules/process/browser.js","../node_modules/waaclock/lib/WAAClock.js","../node_modules/waaclock/index.js","Pulse.ts","Song.ts","Band.ts","../node_modules/tonal-note/build/es6.js","../node_modules/tonal-array/build/es6.js","../node_modules/tonal-interval/build/es6.js","../node_modules/tonal-distance/build/es6.js","0","../node_modules/tonal-pcset/build/es6.js","../node_modules/tonal-dictionary/build/es6.js","../node_modules/tonal-scale/build/es6.js","../node_modules/tonal-chord/build/es6.js","../node_modules/tonal/index.js","instruments/Instrument.ts","instruments/Synthesizer.ts","symbols.ts","util.ts","musicians/Musician.ts","grooves/swing.ts","musicians/Pianist.ts","musicians/Drummer.ts","musicians/Bassist.ts","instruments/Sampler.ts","instruments/Kick.ts","instruments/Snare.ts","instruments/PlasticDrums.ts","Metronome.ts","improvisation/Improvisation.ts","improvisation/methods.ts","musicians/Improvisor.ts","Trio.ts","RealParser.ts","instruments/MidiOut.ts","musicians/Permutator.ts","index.ts"],"names":["cachedSetTimeout","cachedClearTimeout","process","module","exports","defaultSetTimout","Error","defaultClearTimeout","runTimeout","fun","setTimeout","e","call","runClearTimeout","marker","clearTimeout","currentQueue","queue","draining","queueIndex","cleanUpNextTick","length","concat","drainQueue","timeout","len","run","Item","array","noop","nextTick","args","Array","arguments","i","push","prototype","apply","title","browser","env","argv","version","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","name","binding","cwd","chdir","dir","umask","enharmonic","NAMES","split","names","accTypes","slice","filter","n","acc","indexOf","SHARPS","FLATS","REGEX","tokenize","str","m","exec","toUpperCase","replace","NO_NOTE","Object","freeze","SEMI","properties","tokens","letter","octStr","p","charCodeAt","chroma","step","alt","midi","oct","freq","midiToFreq","memo","fn","cache","props","pc","isMidiRange","note","value","tuning","Math","pow","L2","log","L440","freqToMidi","v","round","LETTERS","stepToLetter","fillStr","s","join","numToStr","num","op","altToAcc","from","fromProps","baseNote","_a","assign","build","fromMidi","sharps","floor","simplify","sameAcc","alteration","useSharps","range","rotate","sort","unique","ascR","b","a","descR","times","arr","compact","height","src","map","shuffle","rnd","t","random","permutations","reduce","perm","pos","newPerm","splice","fromSemitones","IVL_TNL","IVL_STR","RegExp","SIZES","TYPES","CLASSES","types","NO_IVL","abs","qToAlt","type","q","test","altToQ","numToStep","simple","semitones","ic","ivl","_b","_c","undefined","d","intervalProps","invert","IN","IQ","c","o","transpose","trFifths","fifths","transposeBy","addIntervals","add","subtract","interval","FIFTHS","fOcts","f","FIFTH_OCTS","encode","ref","STEPS","unaltered","decode","encoder","encodeNote","noteProps","encodeIvl","iprops","tr","to","isDescending","decodeIvl","ivl1","ivl2","i1","i2","chromatic","lydian","major","mixolydian","dorian","aeolian","phrygian","locrian","melodic minor","melodic minor second mode","lydian augmented","lydian dominant","melodic minor fifth mode","locrian #2","altered","harmonic minor","phrygian dominant","half-whole diminished","diminished","major pentatonic","lydian pentatonic","mixolydian pentatonic","locrian pentatonic","minor pentatonic","minor six pentatonic","minor hexatonic","flat three pentatonic","flat six pentatonic","major flat two pentatonic","whole tone pentatonic","ionian pentatonic","lydian #5P pentatonic","lydian dominant pentatonic","minor #7M pentatonic","super locrian pentatonic","in-sen","iwato","hirajoshi","kumoijoshi","pelog","vietnamese 1","vietnamese 2","prometheus","prometheus neopolitan","ritusen","scriabin","piongio","major blues","minor blues","composite blues","augmented","augmented heptatonic","dorian #4","lydian diminished","whole tone","leading whole tone","lydian minor","locrian major","neopolitan","neopolitan minor","neopolitan major","neopolitan major pentatonic","romanian minor","double harmonic lydian","harmonic major","double harmonic major","egyptian","hungarian minor","hungarian major","oriental","spanish heptatonic","flamenco","balinese","todi raga","malkos raga","kafi raga","purvi raga","persian","bebop","bebop dominant","bebop minor","bebop major","bebop locrian","minor bebop","mystery #1","enigmatic","minor six diminished","ionian augmented","lydian #9","ichikosucho","six tone symmetric","4","64","5","M","M#5","M#5add9","M13","M13#11","M6","M6#11","M69","M69#11","M7#11","M7#5","M7#5sus4","M7#9#11","M7add13","M7b5","M7b6","M7b9","M7sus4","M9","M9#11","M9#5","M9#5sus4","M9b5","M9sus4","Madd9","Maj7","Mb5","Mb6","Msus2","Msus4","Maddb9","7","9","11","13","11b9","13#11","13#9","13#9#11","13b5","13b9","13b9#11","13no5","13sus4","69#11","7#11","7#11b13","7#5","7#5#9","7#5b9","7#5b9#11","7#5sus4","7#9","7#9#11","7#9#11b13","7#9b13","7add6","7b13","7b5","7b6","7b9","7b9#11","7b9#9","7b9b13","7b9b13#11","7no5","7sus4","7sus4b9","7sus4b9b13","9#11","9#11b13","9#5","9#5#11","9b13","9b5","9no5","9sus4","m#5","m11","m11A 5","m11b5","m13","m6","m69","m7","m7#5","m7add11","m7b5","m9","m9#5","m9b5","mMaj7","mMaj7b6","mM9","mM9b6","mb6M7","mb6b9","o7","o7M7","oM7","sus24","+add#9","madd4","madd9","chromas","modes","isChroma","intervals","isEqual","isSubsetOf","isSupersetOf","includes","chr","pcsetNum","set","parseInt","clen","isArray","forEach","all","toString","normalize","binary","_","r","IVLS","s1","s2","notes","dictionary","raw","keys","data","index","ivls","key","alias","allKeys","dict","combine","scale","sdata","chord","cdata","pcset","exists","NO_SCALE","setnum","memoize","nameOrTonic","tonic","substring","modeNames","tonics","x","chords","inScale","toScale","supersets","isSuperset","subsets","isSubset","NO_CHORD","NUM_TYPES","Note","Interval","Distance","Dictionary","Scale","Chord","PcSet"],"mappings":"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","file":"index.map","sourceRoot":"../src","sourcesContent":["// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","var isBrowser = (typeof window !== 'undefined')\n\nvar CLOCK_DEFAULTS = {\n  toleranceLate: 0.10,\n  toleranceEarly: 0.001\n}\n\n// ==================== Event ==================== //\nvar Event = function(clock, deadline, func) {\n  this.clock = clock\n  this.func = func\n  this._cleared = false // Flag used to clear an event inside callback\n\n  this.toleranceLate = clock.toleranceLate\n  this.toleranceEarly = clock.toleranceEarly\n  this._latestTime = null\n  this._earliestTime = null\n  this.deadline = null\n  this.repeatTime = null\n\n  this.schedule(deadline)\n}\n\n// Unschedules the event\nEvent.prototype.clear = function() {\n  this.clock._removeEvent(this)\n  this._cleared = true\n  return this\n}\n\n// Sets the event to repeat every `time` seconds.\nEvent.prototype.repeat = function(time) {\n  if (time === 0)\n    throw new Error('delay cannot be 0')\n  this.repeatTime = time\n  if (!this.clock._hasEvent(this))\n    this.schedule(this.deadline + this.repeatTime)\n  return this\n}\n\n// Sets the time tolerance of the event.\n// The event will be executed in the interval `[deadline - early, deadline + late]`\n// If the clock fails to execute the event in time, the event will be dropped.\nEvent.prototype.tolerance = function(values) {\n  if (typeof values.late === 'number')\n    this.toleranceLate = values.late\n  if (typeof values.early === 'number')\n    this.toleranceEarly = values.early\n  this._refreshEarlyLateDates()\n  if (this.clock._hasEvent(this)) {\n    this.clock._removeEvent(this)\n    this.clock._insertEvent(this)\n  }\n  return this\n}\n\n// Returns true if the event is repeated, false otherwise\nEvent.prototype.isRepeated = function() { return this.repeatTime !== null }\n\n// Schedules the event to be ran before `deadline`.\n// If the time is within the event tolerance, we handle the event immediately.\n// If the event was already scheduled at a different time, it is rescheduled.\nEvent.prototype.schedule = function(deadline) {\n  this._cleared = false\n  this.deadline = deadline\n  this._refreshEarlyLateDates()\n\n  if (this.clock.context.currentTime >= this._earliestTime) {\n    this._execute()\n  \n  } else if (this.clock._hasEvent(this)) {\n    this.clock._removeEvent(this)\n    this.clock._insertEvent(this)\n  \n  } else this.clock._insertEvent(this)\n}\n\nEvent.prototype.timeStretch = function(tRef, ratio) {\n  if (this.isRepeated())\n    this.repeatTime = this.repeatTime * ratio\n\n  var deadline = tRef + ratio * (this.deadline - tRef)\n  // If the deadline is too close or past, and the event has a repeat,\n  // we calculate the next repeat possible in the stretched space.\n  if (this.isRepeated()) {\n    while (this.clock.context.currentTime >= deadline - this.toleranceEarly)\n      deadline += this.repeatTime\n  }\n  this.schedule(deadline)\n}\n\n// Executes the event\nEvent.prototype._execute = function() {\n  if (this.clock._started === false) return\n  this.clock._removeEvent(this)\n\n  if (this.clock.context.currentTime < this._latestTime)\n    this.func(this)\n  else {\n    if (this.onexpired) this.onexpired(this)\n    console.warn('event expired')\n  }\n  // In the case `schedule` is called inside `func`, we need to avoid\n  // overrwriting with yet another `schedule`.\n  if (!this.clock._hasEvent(this) && this.isRepeated() && !this._cleared)\n    this.schedule(this.deadline + this.repeatTime) \n}\n\n// Updates cached times\nEvent.prototype._refreshEarlyLateDates = function() {\n  this._latestTime = this.deadline + this.toleranceLate\n  this._earliestTime = this.deadline - this.toleranceEarly\n}\n\n// ==================== WAAClock ==================== //\nvar WAAClock = module.exports = function(context, opts) {\n  var self = this\n  opts = opts || {}\n  this.tickMethod = opts.tickMethod || 'ScriptProcessorNode'\n  this.toleranceEarly = opts.toleranceEarly || CLOCK_DEFAULTS.toleranceEarly\n  this.toleranceLate = opts.toleranceLate || CLOCK_DEFAULTS.toleranceLate\n  this.context = context\n  this._events = []\n  this._started = false\n}\n\n// ---------- Public API ---------- //\n// Schedules `func` to run after `delay` seconds.\nWAAClock.prototype.setTimeout = function(func, delay) {\n  return this._createEvent(func, this._absTime(delay))\n}\n\n// Schedules `func` to run before `deadline`.\nWAAClock.prototype.callbackAtTime = function(func, deadline) {\n  return this._createEvent(func, deadline)\n}\n\n// Stretches `deadline` and `repeat` of all scheduled `events` by `ratio`, keeping\n// their relative distance to `tRef`. In fact this is equivalent to changing the tempo.\nWAAClock.prototype.timeStretch = function(tRef, events, ratio) {\n  events.forEach(function(event) { event.timeStretch(tRef, ratio) })\n  return events\n}\n\n// Removes all scheduled events and starts the clock \nWAAClock.prototype.start = function() {\n  if (this._started === false) {\n    var self = this\n    this._started = true\n    this._events = []\n\n    if (this.tickMethod === 'ScriptProcessorNode') {\n      var bufferSize = 256\n      // We have to keep a reference to the node to avoid garbage collection\n      this._clockNode = this.context.createScriptProcessor(bufferSize, 1, 1)\n      this._clockNode.connect(this.context.destination)\n      this._clockNode.onaudioprocess = function () {\n        process.nextTick(function() { self._tick() })\n      }\n    } else if (this.tickMethod === 'manual') null // _tick is called manually\n\n    else throw new Error('invalid tickMethod ' + this.tickMethod)\n  }\n}\n\n// Stops the clock\nWAAClock.prototype.stop = function() {\n  if (this._started === true) {\n    this._started = false\n    this._clockNode.disconnect()\n  }  \n}\n\n// ---------- Private ---------- //\n\n// This function is ran periodically, and at each tick it executes\n// events for which `currentTime` is included in their tolerance interval.\nWAAClock.prototype._tick = function() {\n  var event = this._events.shift()\n\n  while(event && event._earliestTime <= this.context.currentTime) {\n    event._execute()\n    event = this._events.shift()\n  }\n\n  // Put back the last event\n  if(event) this._events.unshift(event)\n}\n\n// Creates an event and insert it to the list\nWAAClock.prototype._createEvent = function(func, deadline) {\n  return new Event(this, deadline, func)\n}\n\n// Inserts an event to the list\nWAAClock.prototype._insertEvent = function(event) {\n  this._events.splice(this._indexByTime(event._earliestTime), 0, event)\n}\n\n// Removes an event from the list\nWAAClock.prototype._removeEvent = function(event) {\n  var ind = this._events.indexOf(event)\n  if (ind !== -1) this._events.splice(ind, 1)\n}\n\n// Returns true if `event` is in queue, false otherwise\nWAAClock.prototype._hasEvent = function(event) {\n return this._events.indexOf(event) !== -1\n}\n\n// Returns the index of the first event whose deadline is >= to `deadline`\nWAAClock.prototype._indexByTime = function(deadline) {\n  // performs a binary search\n  var low = 0\n    , high = this._events.length\n    , mid\n  while (low < high) {\n    mid = Math.floor((low + high) / 2)\n    if (this._events[mid]._earliestTime < deadline)\n      low = mid + 1\n    else high = mid\n  }\n  return low\n}\n\n// Converts from relative time to absolute time\nWAAClock.prototype._absTime = function(relTime) {\n  return relTime + this.context.currentTime\n}\n\n// Converts from absolute time to relative time \nWAAClock.prototype._relTime = function(absTime) {\n  return absTime - this.context.currentTime\n}","var WAAClock = require('./lib/WAAClock')\n\nmodule.exports = WAAClock\nif (typeof window !== 'undefined') window.WAAClock = WAAClock\n","import WAAClock from 'waaclock';\n\nexport class Pulse {\n    defaults = {\n        bpm: 120,\n        cycle: 4,\n        delay: 0\n    }\n    props: any;\n    context: any;\n    clock: any;\n    events = [];\n    callbackAtTime = false;\n    constructor(\n        props = {}\n    ) {\n        this.props = Object.assign({}, this.defaults, props);\n        this.context = this.props.context || new AudioContext();\n        this.clock = this.props.clock || new WAAClock(this.context, { toleranceEarly: 0.1, toleranceLate: 0.1 });\n    }\n\n    getMeasureLength(bpm = this.props.bpm, beatsPerMeasure = this.props.cycle) {\n        return 60 / bpm * beatsPerMeasure;\n    }\n\n    arrayPulse(children, length = 1, path = [], start = 0, callback, deadline?) {\n        //TODO: return promise on next one (for chaining)\n        if (!Array.isArray(children)) {\n            if (children === 0) {\n                return 0;\n            }\n            const item = {\n                value: children,\n                length,\n                path,\n                start,\n                pulse: this,\n                cycle: this.props.cycle,\n                timeout: null\n            };\n\n            start += this.props.delay; // TODO: be able to add delay from arrayPulse fn directly\n            if (this.callbackAtTime) {\n                start += deadline ? deadline : this.context.currentTime;\n                item.timeout = this.clock.callbackAtTime((event) =>\n                    callback(Object.assign(item, { event, deadline: event.deadline })), start);\n            } else {\n                start += (deadline || this.context.currentTime) - this.context.currentTime;\n                item.timeout = this.clock.setTimeout((event) =>\n                    callback(Object.assign(item, { event, deadline: event.deadline })), start);\n            }\n            this.events.push(item.timeout);\n            return item;\n        }\n        const childLength = length / children.length;\n        return {\n            length,\n            children: children.map((el, i) =>\n                this.arrayPulse(\n                    el,\n                    childLength,\n                    path.concat([i]),\n                    start + i * childLength,\n                    callback,\n                    deadline\n                )\n            )\n        };\n    }\n\n    tickArray(array, callback, deadline?, length?) {\n        array.push(1);\n        const l = length || this.getMeasureLength() * array.length;\n        this.start();\n        return new Promise((resolve, reject) => {\n            this.arrayPulse(array, l, [], 0, (tick, start) => {\n                if (tick.path[0] === array.length - 1) {\n                    resolve(tick);\n                } else {\n                    callback(tick, start);\n                }\n            }, deadline);\n        });\n    }\n\n\n    start() {\n        // console.log('start with', this.events.length, 'events');\n        const criticalEvents = 6000;\n        if (this.events.length > criticalEvents) {\n            console.warn('more than ', criticalEvents, 'events received. Consider using less \"times\" to keep the timing precies');\n        }\n        this.clock.start();\n    }\n\n    stop() {\n        this.clock.stop();\n    }\n\n    changeTempo(newTempo, timeout = 0.2) {\n        const factor = this.props.bpm / newTempo;\n        this.props.bpm = newTempo;\n        const events = this.events.filter(e => {\n            return e.deadline - this.context.currentTime > timeout;\n        });\n        // TODO: stretch durations?!\n        this.clock.timeStretch(this.context.currentTime, events, factor)\n    }\n}","export type Measure = {\n    chords?: string[],\n    //voices?: string[][],\n    signs?: string[],\n    comments?: string[],\n    house?: number,\n    section?: string,\n    idle?: true // bar is repeated\n}// | string[];\n\nexport type Sheet = Array<Measure | string[] | string>;\n\nexport type Song = {\n    name: string,\n    composer?: string,\n    style?: string,\n    bpm?: number,\n    repeats?: number,\n    key?: string,\n    sheet: Sheet\n}\n\nexport function getMeasure(measure: Measure | string[] | string): Measure {\n    if (typeof measure === 'string') {\n        return {\n            chords: [measure]\n        }\n    }\n    if (Array.isArray(measure)) {\n        return {\n            chords: [].concat(measure)\n        }\n    }\n    return Object.assign({}, measure);\n    // return measure;\n}\n\nexport function getLatestMeasure(index, sheet) {\n    const m = getMeasure(sheet[index]);\n    if (m.chords[0] === 'x') {\n        return getLatestMeasure(index - 1, sheet);\n    }\n    return m;\n}\n\nexport function renderSheet(sheet: Sheet, current?) { //unify = false,\n    current = Object.assign({\n        index: 0, // index of current sheet measure\n        measures: [], // resulting measures\n        openRepeats: [], // opened repeat start indices\n        repeated: [], // already repeated end indices\n        end: sheet.length - 1, // last index that should be rendered\n        house: 0, // latest housenumber\n        houseStart: 0, // where did the latest N1 start?\n        houses: {} // house targets of repeatStart indices\n    }, current);\n\n    while (current.index <= current.end) {\n        // const measure = sheet[current.index];\n        let m = getMeasure(sheet[current.index]);\n        const signs = m.signs || [];\n        //console.log(`${current.index}/${current.end}`, measure['chords'], `${current.house}/${JSON.stringify(current.targets)}`);\n\n        const repeatStart = signs.includes('{');\n        if (repeatStart) {\n            current.openRepeats.unshift(current.index);\n        }\n\n        if (m.house) {\n            current.house = m.house;\n            if (m.house === 1) { // remember where it started..\n                current.houseStart = current.openRepeats[0] || 0;\n            }\n        }\n\n        const skip = current.house && current.houses[current.houseStart] && current.house !== current.houses[current.houseStart];\n        if (!skip) {\n            current.measures.push(m);\n            const repeatEnd = signs.includes('}') && !current.repeated.includes(current.index);// && !current.repeatedEnds[current.index]; // TODO: support repeat n times\n\n            if (repeatEnd) {\n                const jumpTo = current.openRepeats[0] || 0;\n                current.openRepeats.shift();\n                current.houses[jumpTo] = (current.houses[jumpTo] || 1) + 1;\n\n                current.measures = current.measures.concat(\n                    renderSheet(sheet, {\n                        index: jumpTo,\n                        repeated: [current.index],\n                        end: current.index,\n                        houses: {\n                            [jumpTo]: current.houses[jumpTo]\n                        }\n                    })\n                );\n            }\n        }\n        current.index += 1;\n    }\n    return current.measures;\n}\n","import { Pulse } from './Pulse';\nimport { Musician } from './musicians/Musician';\nimport { renderSheet } from './Song';\n\nexport default class Band {\n    props: any;\n    pulse: Pulse;\n    musicians: Musician[];\n    defaults = {\n        cycle: 4,\n        division: 3, // rhythm division (3=ternary,2=binary)\n        transpose: 0,\n        style: 'Medium Swing',\n    }\n    context: AudioContext;\n    onMeasure: (measure, tick?) => {};\n\n    constructor({ context, musicians, onMeasure }: any = {}) {\n        this.context = context || new AudioContext();\n        this.onMeasure = onMeasure;\n        this.musicians = musicians || [];\n    }\n\n    addMember(musician) {\n        this.musicians = this.musicians.concat(musician);\n    }\n\n    ready(): Promise<any[]> {\n        return Promise.all([this.resume()].concat(this.musicians.map(m => m.ready)));\n    }\n\n    resume() { // https://goo.gl/7K7WLu\n        return this.context.resume().then(() => this.context);\n    }\n\n    comp(sheet, settings) {\n        if (this.pulse) {\n            this.pulse.stop();\n        }\n        let measures = renderSheet(sheet);\n        measures = measures.concat(measures);\n        settings = Object.assign(this.defaults, settings, { context: this.context });\n        this.play(measures, settings);\n    }\n\n    play(measures, settings) {\n        this.ready().then(() => {\n            this.pulse = settings.pulse || new Pulse(settings);\n            if (this.onMeasure) {\n                // TODO: add onChord for setting tonics + circle chroma etc\n                this.pulse.tickArray(measures.map(measure => ({ measure })),\n                    (tick) => this.onMeasure(tick.value.measure, tick));\n            }\n            measures = measures.map(m => m.chords ? m.chords : m);\n            console.log('Band#play', settings);\n            const musicians = (settings.musicians || this.musicians);\n            musicians.forEach(musician => musician.play({ pulse: this.pulse, measures, settings }));\n            this.pulse.start();\n        });\n    }\n}\n","var NAMES = \"C C# Db D D# Eb E F F# Gb G G# Ab A A# Bb B\".split(\" \");\r\nvar names = function (accTypes) {\r\n    return typeof accTypes !== \"string\"\r\n        ? NAMES.slice()\r\n        : NAMES.filter(function (n) {\r\n            var acc = n[1] || \" \";\r\n            return accTypes.indexOf(acc) !== -1;\r\n        });\r\n};\r\nvar SHARPS = names(\" #\");\r\nvar FLATS = names(\" b\");\r\nvar REGEX = /^([a-gA-G]?)(#{1,}|b{1,}|x{1,}|)(-?\\d*)\\s*(.*)$/;\r\nfunction tokenize(str) {\r\n    if (typeof str !== \"string\")\r\n        str = \"\";\r\n    var m = REGEX.exec(str);\r\n    return [m[1].toUpperCase(), m[2].replace(/x/g, \"##\"), m[3], m[4]];\r\n}\r\nvar NO_NOTE = Object.freeze({\r\n    pc: null,\r\n    name: null,\r\n    step: null,\r\n    alt: null,\r\n    oct: null,\r\n    octStr: null,\r\n    chroma: null,\r\n    midi: null,\r\n    freq: null\r\n});\r\nvar SEMI = [0, 2, 4, 5, 7, 9, 11];\r\nvar properties = function (str) {\r\n    var tokens = tokenize(str);\r\n    if (tokens[0] === \"\" || tokens[3] !== \"\")\r\n        return NO_NOTE;\r\n    var letter = tokens[0], acc = tokens[1], octStr = tokens[2];\r\n    var p = {\r\n        letter: letter,\r\n        acc: acc,\r\n        octStr: octStr,\r\n        pc: letter + acc,\r\n        name: letter + acc + octStr,\r\n        step: (letter.charCodeAt(0) + 3) % 7,\r\n        alt: acc[0] === \"b\" ? -acc.length : acc.length,\r\n        oct: octStr.length ? +octStr : null,\r\n        chroma: 0,\r\n        midi: null,\r\n        freq: null\r\n    };\r\n    p.chroma = (SEMI[p.step] + p.alt + 120) % 12;\r\n    p.midi = p.oct !== null ? SEMI[p.step] + p.alt + 12 * (p.oct + 1) : null;\r\n    p.freq = midiToFreq(p.midi);\r\n    return Object.freeze(p);\r\n};\r\nvar memo = function (fn, cache) {\r\n    if (cache === void 0) { cache = {}; }\r\n    return function (str) { return cache[str] || (cache[str] = fn(str)); };\r\n};\r\nvar props = memo(properties);\r\nvar name = function (str) { return props(str).name; };\r\nvar pc = function (str) { return props(str).pc; };\r\nvar isMidiRange = function (m) { return m >= 0 && m <= 127; };\r\nvar midi = function (note) {\r\n    if (typeof note !== \"number\" && typeof note !== \"string\") {\r\n        return null;\r\n    }\r\n    var midi = props(note).midi;\r\n    var value = midi || midi === 0 ? midi : +note;\r\n    return isMidiRange(value) ? value : null;\r\n};\r\nvar midiToFreq = function (midi, tuning) {\r\n    if (tuning === void 0) { tuning = 440; }\r\n    return typeof midi === \"number\" ? Math.pow(2, (midi - 69) / 12) * tuning : null;\r\n};\r\nvar freq = function (note) { return props(note).freq || midiToFreq(note); };\r\nvar L2 = Math.log(2);\r\nvar L440 = Math.log(440);\r\nvar freqToMidi = function (freq) {\r\n    var v = (12 * (Math.log(freq) - L440)) / L2 + 69;\r\n    return Math.round(v * 100) / 100;\r\n};\r\nvar chroma = function (str) { return props(str).chroma; };\r\nvar oct = function (str) { return props(str).oct; };\r\nvar LETTERS = \"CDEFGAB\";\r\nvar stepToLetter = function (step) { return LETTERS[step]; };\r\nvar fillStr = function (s, n) { return Array(n + 1).join(s); };\r\nvar numToStr = function (num, op) {\r\n    return typeof num !== \"number\" ? \"\" : op(num);\r\n};\r\nvar altToAcc = function (alt) {\r\n    return numToStr(alt, function (alt) { return (alt < 0 ? fillStr(\"b\", -alt) : fillStr(\"#\", alt)); });\r\n};\r\nvar from = function (fromProps, baseNote) {\r\n    if (fromProps === void 0) { fromProps = {}; }\r\n    if (baseNote === void 0) { baseNote = null; }\r\n    var _a = baseNote\r\n        ? Object.assign({}, props(baseNote), fromProps)\r\n        : fromProps, step = _a.step, alt = _a.alt, oct = _a.oct;\r\n    if (typeof step !== \"number\")\r\n        return null;\r\n    var letter = stepToLetter(step);\r\n    if (!letter)\r\n        return null;\r\n    var pc = letter + altToAcc(alt);\r\n    return oct || oct === 0 ? pc + oct : pc;\r\n};\r\nvar build = from;\r\nfunction fromMidi(num, sharps) {\r\n    if (sharps === void 0) { sharps = false; }\r\n    num = Math.round(num);\r\n    var pcs = sharps === true ? SHARPS : FLATS;\r\n    var pc = pcs[num % 12];\r\n    var o = Math.floor(num / 12) - 1;\r\n    return pc + o;\r\n}\r\nvar simplify = function (note, sameAcc) {\r\n    if (sameAcc === void 0) { sameAcc = true; }\r\n    var _a = props(note), alt = _a.alt, chroma = _a.chroma, midi = _a.midi;\r\n    if (chroma === null)\r\n        return null;\r\n    var alteration = alt;\r\n    var useSharps = sameAcc === false ? alteration < 0 : alteration > 0;\r\n    return midi === null\r\n        ? pc(fromMidi(chroma, useSharps))\r\n        : fromMidi(midi, useSharps);\r\n};\r\nvar enharmonic = function (note) { return simplify(note, false); };\n\nexport { names, tokenize, props, name, pc, midi, midiToFreq, freq, freqToMidi, chroma, oct, stepToLetter, altToAcc, from, build, fromMidi, simplify, enharmonic };\n","/**\n * [![npm version](https://img.shields.io/npm/v/tonal-array.svg?style=flat-square)](https://www.npmjs.com/package/tonal-array)\n *\n * Tonal array utilities. Create ranges, sort notes, ...\n *\n * @example\n * import * as Array;\n * Array.sort([\"f\", \"a\", \"c\"]) // => [\"C\", \"F\", \"A\"]\n *\n * @example\n * const Array = require(\"tonal-array\")\n * Array.range(1, 4) // => [1, 2, 3, 4]\n *\n * @module Array\n */\nimport { props, name } from \"tonal-note\";\n\n// ascending range\nfunction ascR(b, n) {\n  for (var a = []; n--; a[n] = n + b){ ; }\n  return a;\n}\n// descending range\nfunction descR(b, n) {\n  for (var a = []; n--; a[n] = b - n){ ; }\n  return a;\n}\n\n/**\n * Create a numeric range\n *\n * @param {Number} from\n * @param {Number} to\n * @return {Array}\n *\n * @example\n * Array.range(-2, 2) // => [-2, -1, 0, 1, 2]\n * Array.range(2, -2) // => [2, 1, 0, -1, -2]\n */\nexport function range(a, b) {\n  return a === null || b === null\n    ? []\n    : a < b\n      ? ascR(a, b - a + 1)\n      : descR(a, a - b + 1);\n}\n/**\n *\n * Rotates a list a number of times. It\"s completly agnostic about the\n * contents of the list.\n *\n * @param {Integer} times - the number of rotations\n * @param {Array} array\n * @return {Array} the rotated array\n * @example\n * Array.rotate(1, [1, 2, 3]) // => [2, 3, 1]\n */\nexport function rotate(times, arr) {\n  var len = arr.length;\n  var n = ((times % len) + len) % len;\n  return arr.slice(n, len).concat(arr.slice(0, n));\n}\n\n/**\n * Return a copy of the array with the null values removed\n * @function\n * @param {Array} array\n * @return {Array}\n *\n * @example\n * Array.compact([\"a\", \"b\", null, \"c\"]) // => [\"a\", \"b\", \"c\"]\n */\nexport var compact = function (arr) { return arr.filter(function (n) { return n === 0 || n; }); };\n\n// a function that get note heights (with negative number for pitch classes)\nvar height = function (name) {\n  var m = props(name).midi;\n  return m !== null ? m : props(name + \"-100\").midi;\n};\n\n/**\n * Sort an array of notes in ascending order\n *\n * @param {String|Array} notes\n * @return {Array} sorted array of notes\n */\nexport function sort(src) {\n  return compact(src.map(name)).sort(function (a, b) { return height(a) > height(b); });\n}\n\n/**\n * Get sorted notes with duplicates removed\n *\n * @function\n * @param {Array} notes\n */\nexport function unique(arr) {\n  return sort(arr).filter(function (n, i, a) { return i === 0 || n !== a[i - 1]; });\n}\n\n/**\n * Randomizes the order of the specified array in-place, using the Fisher–Yates shuffle.\n *\n * @private\n * @function\n * @param {Array|String} arr - the array\n * @return {Array} the shuffled array\n *\n * @example\n * Array.shuffle([\"C\", \"D\", \"E\", \"F\"])\n */\nexport var shuffle = function (arr, rnd) {\n  if ( rnd === void 0 ) rnd = Math.random;\n\n  var i, t;\n  var m = arr.length;\n  while (m) {\n    i = (rnd() * m--) | 0;\n    t = arr[m];\n    arr[m] = arr[i];\n    arr[i] = t;\n  }\n  return arr;\n};\n\n/**\n * Get all permutations of an array\n * http://stackoverflow.com/questions/9960908/permutations-in-javascript\n *\n * @param {Array} array - the array\n * @return {Array<Array>} an array with all the permutations\n */\nexport var permutations = function (arr) {\n  if (arr.length === 0) { return [[]]; }\n  return permutations(arr.slice(1)).reduce(function(acc, perm) {\n    return acc.concat(\n      arr.map(function(e, pos) {\n        var newPerm = perm.slice();\n        newPerm.splice(pos, 0, arr[0]);\n        return newPerm;\n      })\n    );\n  }, []);\n};\n","var IVL_TNL = \"([-+]?\\\\d+)(d{1,4}|m|M|P|A{1,4})\";\r\nvar IVL_STR = \"(AA|A|P|M|m|d|dd)([-+]?\\\\d+)\";\r\nvar REGEX = new RegExp(\"^\" + IVL_TNL + \"|\" + IVL_STR + \"$\");\r\nvar SIZES = [0, 2, 4, 5, 7, 9, 11];\r\nvar TYPES = \"PMMPPMM\";\r\nvar CLASSES = [0, 1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1];\r\nvar NAMES = \"1P 2m 2M 3m 3M 4P 5P 6m 6M 7m 7M 8P\".split(\" \");\r\nvar names = function (types) {\r\n    return typeof types !== \"string\"\r\n        ? NAMES.slice()\r\n        : NAMES.filter(function (n) { return types.indexOf(n[1]) !== -1; });\r\n};\r\nvar tokenize = function (str) {\r\n    var m = REGEX.exec(\"\" + str);\r\n    if (m === null)\r\n        return null;\r\n    return (m[1] ? [m[1], m[2]] : [m[4], m[3]]);\r\n};\r\nvar NO_IVL = Object.freeze({\r\n    name: null,\r\n    num: null,\r\n    q: null,\r\n    step: null,\r\n    alt: null,\r\n    dir: null,\r\n    type: null,\r\n    simple: null,\r\n    semitones: null,\r\n    chroma: null,\r\n    oct: null\r\n});\r\nvar fillStr = function (s, n) { return Array(Math.abs(n) + 1).join(s); };\r\nvar qToAlt = function (type, q) {\r\n    if (q === \"M\" && type === \"M\")\r\n        return 0;\r\n    if (q === \"P\" && type === \"P\")\r\n        return 0;\r\n    if (q === \"m\" && type === \"M\")\r\n        return -1;\r\n    if (/^A+$/.test(q))\r\n        return q.length;\r\n    if (/^d+$/.test(q))\r\n        return type === \"P\" ? -q.length : -q.length - 1;\r\n    return null;\r\n};\r\nvar altToQ = function (type, alt) {\r\n    if (alt === 0)\r\n        return type === \"M\" ? \"M\" : \"P\";\r\n    else if (alt === -1 && type === \"M\")\r\n        return \"m\";\r\n    else if (alt > 0)\r\n        return fillStr(\"A\", alt);\r\n    else if (alt < 0)\r\n        return fillStr(\"d\", type === \"P\" ? alt : alt + 1);\r\n    else\r\n        return null;\r\n};\r\nvar numToStep = function (num) { return (Math.abs(num) - 1) % 7; };\r\nvar properties = function (str) {\r\n    var t = tokenize(str);\r\n    if (t === null)\r\n        return NO_IVL;\r\n    var p = {\r\n        num: 0,\r\n        q: \"d\",\r\n        name: \"\",\r\n        type: \"M\",\r\n        step: 0,\r\n        dir: -1,\r\n        simple: 1,\r\n        alt: 0,\r\n        oct: 0,\r\n        semitones: 0,\r\n        chroma: 0,\r\n        ic: 0\r\n    };\r\n    p.num = +t[0];\r\n    p.q = t[1];\r\n    p.step = numToStep(p.num);\r\n    p.type = TYPES[p.step];\r\n    if (p.type === \"M\" && p.q === \"P\")\r\n        return NO_IVL;\r\n    p.name = \"\" + p.num + p.q;\r\n    p.dir = p.num < 0 ? -1 : 1;\r\n    p.simple = (p.num === 8 || p.num === -8\r\n        ? p.num\r\n        : p.dir * (p.step + 1));\r\n    p.alt = qToAlt(p.type, p.q);\r\n    p.oct = Math.floor((Math.abs(p.num) - 1) / 7);\r\n    p.semitones = p.dir * (SIZES[p.step] + p.alt + 12 * p.oct);\r\n    p.chroma = ((((p.dir * (SIZES[p.step] + p.alt)) % 12) + 12) %\r\n        12);\r\n    return Object.freeze(p);\r\n};\r\nvar cache = {};\r\nfunction props(str) {\r\n    if (typeof str !== \"string\")\r\n        return NO_IVL;\r\n    return cache[str] || (cache[str] = properties(str));\r\n}\r\nvar num = function (str) { return props(str).num; };\r\nvar name = function (str) { return props(str).name; };\r\nvar semitones = function (str) { return props(str).semitones; };\r\nvar chroma = function (str) { return props(str).chroma; };\r\nvar ic = function (ivl) {\r\n    if (typeof ivl === \"string\")\r\n        ivl = props(ivl).chroma;\r\n    return typeof ivl === \"number\" ? CLASSES[ivl % 12] : null;\r\n};\r\nvar build = function (_a) {\r\n    var _b = _a === void 0 ? {} : _a, num = _b.num, step = _b.step, alt = _b.alt, _c = _b.oct, oct = _c === void 0 ? 1 : _c, dir = _b.dir;\r\n    if (step !== undefined)\r\n        num = step + 1 + 7 * oct;\r\n    if (num === undefined)\r\n        return null;\r\n    if (typeof alt !== \"number\")\r\n        return null;\r\n    var d = typeof dir !== \"number\" ? \"\" : dir < 0 ? \"-\" : \"\";\r\n    var type = TYPES[numToStep(num)];\r\n    return (d + num + altToQ(type, alt));\r\n};\r\nvar simplify = function (str) {\r\n    var p = props(str);\r\n    if (p === NO_IVL)\r\n        return null;\r\n    var intervalProps = p;\r\n    return intervalProps.simple + intervalProps.q;\r\n};\r\nvar invert = function (str) {\r\n    var p = props(str);\r\n    if (p === NO_IVL)\r\n        return null;\r\n    var intervalProps = p;\r\n    var step = (7 - intervalProps.step) % 7;\r\n    var alt = intervalProps.type === \"P\" ? -intervalProps.alt : -(intervalProps.alt + 1);\r\n    return build({ step: step, alt: alt, oct: intervalProps.oct, dir: intervalProps.dir });\r\n};\r\nvar IN = [1, 2, 2, 3, 3, 4, 5, 5, 6, 6, 7, 7];\r\nvar IQ = \"P m M m M P d P m M m M\".split(\" \");\r\nvar fromSemitones = function (num) {\r\n    var d = num < 0 ? -1 : 1;\r\n    var n = Math.abs(num);\r\n    var c = n % 12;\r\n    var o = Math.floor(n / 12);\r\n    return d * (IN[c] + 7 * o) + IQ[c];\r\n};\n\nexport { names, tokenize, qToAlt, altToQ, props, num, name, semitones, chroma, ic, build, simplify, invert, fromSemitones };\n","/**\n * [![npm version](https://img.shields.io/npm/v/tonal-distance.svg)](https://www.npmjs.com/package/tonal-distance)\n * [![tonal](https://img.shields.io/badge/tonal-distance-yellow.svg)](https://github.com/danigb/tonal/tree/master/packages/tonal/distance)\n *\n * Transpose notes by intervals and find distances between notes\n *\n * @example\n * // es6\n * import * as Distance from \"tonal-distance\"\n * Distance.interval(\"C3\", \"C4\") // => \"1P\"\n *\n * @example\n * // es6 import selected functions\n * import { interval, semitones, transpose } from \"tonal-distance\"\n *\n * semitones(\"C\" ,\"D\") // => 2\n * interval(\"C4\", \"G4\") // => \"5P\"\n * transpose(\"C4\", \"P5\") // => \"G4\"\n *\n * @example\n * // included in tonal facade\n * const Tonal = require(\"tonal\");\n * Tonal.Distance.transpose(\"C4\", \"P5\")\n * Tonal.Distance.transposeBy(\"P5\", \"C4\")\n *\n * @module Distance\n */\nimport { props as noteProps, build as fromNote } from \"tonal-note\";\nimport { props as iprops, build as ibuild } from \"tonal-interval\";\n\n// Map from letter step to number of fifths starting from \"C\":\n// { C: 0, D: 2, E: 4, F: -1, G: 1, A: 3, B: 5 }\nvar FIFTHS = [0, 2, 4, -1, 1, 3, 5];\n\n// Given a number of fifths, return the octaves they span\nvar fOcts = function (f) { return Math.floor((f * 7) / 12); };\n\n// Get the number of octaves it span each step\nvar FIFTH_OCTS = FIFTHS.map(fOcts);\n\nvar encode = function (ref) {\n  var step = ref.step;\n  var alt = ref.alt;\n  var oct = ref.oct;\n  var dir = ref.dir; if ( dir === void 0 ) dir = 1;\n\n  var f = FIFTHS[step] + 7 * alt;\n  if (oct === null) { return [dir * f]; }\n  var o = oct - FIFTH_OCTS[step] - 4 * alt;\n  return [dir * f, dir * o];\n};\n\n// We need to get the steps from fifths\n// Fifths for CDEFGAB are [ 0, 2, 4, -1, 1, 3, 5 ]\n// We add 1 to fifths to avoid negative numbers, so:\n// for [\"F\", \"C\", \"G\", \"D\", \"A\", \"E\", \"B\"] we have:\nvar STEPS = [3, 0, 4, 1, 5, 2, 6];\n\n// Return the number of fifths as if it were unaltered\nfunction unaltered(f) {\n  var i = (f + 1) % 7;\n  return i < 0 ? 7 + i : i;\n}\n\nvar decode = function (f, o, dir) {\n  var step = STEPS[unaltered(f)];\n  var alt = Math.floor((f + 1) / 7);\n  if (o === undefined) { return { step: step, alt: alt, dir: dir }; }\n  var oct = o + 4 * alt + FIFTH_OCTS[step];\n  return { step: step, alt: alt, oct: oct, dir: dir };\n};\n\nvar memo = function (fn, cache) {\n  if ( cache === void 0 ) cache = {};\n\n  return function (str) { return cache[str] || (cache[str] = fn(str)); };\n};\n\nvar encoder = function (props) { return memo(function (str) {\n    var p = props(str);\n    return p.name === null ? null : encode(p);\n  }); };\n\nvar encodeNote = encoder(noteProps);\nvar encodeIvl = encoder(iprops);\n\n/**\n * Transpose a note by an interval. The note can be a pitch class.\n *\n * This function can be partially applied.\n *\n * @param {String} note\n * @param {String} interval\n * @return {String} the transposed note\n * @example\n * import { tranpose } from \"tonal-distance\"\n * transpose(\"d3\", \"3M\") // => \"F#3\"\n * // it works with pitch classes\n * transpose(\"D\", \"3M\") // => \"F#\"\n * // can be partially applied\n * [\"C\", \"D\", \"E\", \"F\", \"G\"].map(transpose(\"M3)) // => [\"E\", \"F#\", \"G#\", \"A\", \"B\"]\n */\nexport function transpose(note, interval) {\n  if (arguments.length === 1) { return function (i) { return transpose(note, i); }; }\n  var n = encodeNote(note);\n  var i = encodeIvl(interval);\n  if (n === null || i === null) { return null; }\n  var tr = n.length === 1 ? [n[0] + i[0]] : [n[0] + i[0], n[1] + i[1]];\n  return fromNote(decode(tr[0], tr[1]));\n}\n\n/**\n * Transpose a pitch class by a number of perfect fifths.\n *\n * It can be partially applied.\n *\n * @function\n * @param {String} pitchClass - the pitch class\n * @param {Integer} fifhts - the number of fifths\n * @return {String} the transposed pitch class\n *\n * @example\n * import { trFifths } from \"tonal-transpose\"\n * [0, 1, 2, 3, 4].map(trFifths(\"C\")) // => [\"C\", \"G\", \"D\", \"A\", \"E\"]\n * // or using tonal\n * Distance.trFifths(\"G4\", 1) // => \"D\"\n */\n\nexport function trFifths(note, fifths) {\n  if (arguments.length === 1) { return function (f) { return trFifths(note, f); }; }\n  var n = encodeNote(note);\n  if (n === null) { return null; }\n  return fromNote(decode(n[0] + fifths));\n}\n\n/**\n * Get the distance in fifths between pitch classes\n *\n * Can be partially applied.\n *\n * @param {String} to - note or pitch class\n * @param {String} from - note or pitch class\n */\nexport function fifths(from, to) {\n  if (arguments.length === 1) { return function (to) { return fifths(from, to); }; }\n  var f = encodeNote(from);\n  var t = encodeNote(to);\n  if (t === null || f === null) { return null; }\n  return t[0] - f[0];\n}\n\n/**\n * The same as transpose with the arguments inverted.\n *\n * Can be partially applied.\n *\n * @param {String} note\n * @param {String} interval\n * @return {String} the transposed note\n * @example\n * import { tranposeBy } from \"tonal-distance\"\n * transposeBy(\"3m\", \"5P\") // => \"7m\"\n */\nexport function transposeBy(interval, note) {\n  if (arguments.length === 1) { return function (n) { return transpose(n, interval); }; }\n  return transpose(note, interval);\n}\n\nvar isDescending = function (e) { return e[0] * 7 + e[1] * 12 < 0; };\nvar decodeIvl = function (i) { return isDescending(i) ? decode(-i[0], -i[1], -1) : decode(i[0], i[1], 1); };\n\nexport function addIntervals(ivl1, ivl2, dir) {\n  var i1 = encodeIvl(ivl1);\n  var i2 = encodeIvl(ivl2);\n  if (i1 === null || i2 === null) { return null; }\n  var i = [i1[0] + dir * i2[0], i1[1] + dir * i2[1]];\n  return ibuild(decodeIvl(i));\n}\n\n/**\n * Add two intervals\n *\n * Can be partially applied.\n *\n * @param {String} interval1\n * @param {String} interval2\n * @return {String} the resulting interval\n * @example\n * import { add } from \"tonal-distance\"\n * add(\"3m\", \"5P\") // => \"7m\"\n */\nexport function add(ivl1, ivl2) {\n  if (arguments.length === 1) { return function (i2) { return add(ivl1, i2); }; }\n  return addIntervals(ivl1, ivl2, 1);\n}\n\n/**\n * Subtract two intervals\n *\n * Can be partially applied\n *\n * @param {String} minuend\n * @param {String} subtrahend\n * @return {String} interval diference\n */\nexport function subtract(ivl1, ivl2) {\n  if (arguments.length === 1) { return function (i2) { return add(ivl1, i2); }; }\n  return addIntervals(ivl1, ivl2, -1);\n}\n\n/**\n * Find the interval between two pitches. It works with pitch classes\n * (both must be pitch classes and the interval is always ascending)\n *\n * Can be partially applied\n *\n * @param {String} from - distance from\n * @param {String} to - distance to\n * @return {String} the interval distance\n *\n * @example\n * import { interval } from \"tonal-distance\"\n * interval(\"C2\", \"C3\") // => \"P8\"\n * interval(\"G\", \"B\") // => \"M3\"\n *\n * @example\n * import * as Distance from \"tonal-distance\"\n * Distance.interval(\"M2\", \"P5\") // => \"P4\"\n */\nexport function interval(from, to) {\n  if (arguments.length === 1) { return function (t) { return interval(from, t); }; }\n  var f = encodeNote(from);\n  var t = encodeNote(to);\n  if (f === null || t === null || f.length !== t.length) { return null; }\n  var d =\n    f.length === 1\n      ? [t[0] - f[0], -Math.floor(((t[0] - f[0]) * 7) / 12)]\n      : [t[0] - f[0], t[1] - f[1]];\n  return ibuild(decodeIvl(d));\n}\n\n/**\n * Get the distance between two notes in semitones\n *\n * @param {String|Pitch} from - first note\n * @param {String|Pitch} to - last note\n * @return {Integer} the distance in semitones or null if not valid notes\n * @example\n * import { semitones } from \"tonal-distance\"\n * semitones(\"C3\", \"A2\") // => -3\n * // or use tonal\n * Tonal.Distance.semitones(\"C3\", \"G3\") // => 7\n */\nexport function semitones(from, to) {\n  if (arguments.length === 1) { return function (t) { return semitones(from, t); }; }\n  var f = noteProps(from);\n  var t = noteProps(to);\n  return f.midi !== null && t.midi !== null\n    ? t.midi - f.midi\n    : f.chroma !== null && t.chroma !== null\n      ? (t.chroma - f.chroma + 12) % 12\n      : null;\n}\n",null,"/**\n * [![npm version](https://img.shields.io/npm/v/tonal-pcset.svg?style=flat-square)](https://www.npmjs.com/package/tonal-pcset)\n * [![tonal](https://img.shields.io/badge/tonal-pcset-yellow.svg?style=flat-square)](https://www.npmjs.com/browse/keyword/tonal)\n *\n * `tonal-pcset` is a collection of functions to work with pitch class sets, oriented\n * to make comparations (isEqual, isSubset, isSuperset)\n *\n * This is part of [tonal](https://www.npmjs.com/package/tonal) music theory library.\n *\n * You can install via npm: `npm i --save tonal-pcset`\n *\n * ```js\n * // es6\n * import PcSet from \"tonal-pcset\"\n * var PcSet = require(\"tonal-pcset\")\n *\n * PcSet.isEqual(\"c2 d5 e6\", \"c6 e3 d1\") // => true\n * ```\n *\n * ## API documentation\n *\n * @module PcSet\n */\nimport { chroma as notechr } from \"tonal-note\";\nimport { chroma as ivlchr } from \"tonal-interval\";\nimport { rotate, range, compact } from \"tonal-array\";\n\nvar chr = function (str) { return notechr(str) || ivlchr(str) || 0; };\nvar pcsetNum = function (set) { return parseInt(chroma(set), 2); };\nvar clen = function (chroma) { return chroma.replace(/0/g, \"\").length; };\n\n/**\n * Get chroma of a pitch class set. A chroma identifies each set uniquely.\n * It\"s a 12-digit binary each presenting one semitone of the octave.\n *\n * Note that this function accepts a chroma as parameter and return it\n * without modification.\n *\n * @param {Array|String} set - the pitch class set\n * @return {String} a binary representation of the pitch class set\n * @example\n * PcSet.chroma([\"C\", \"D\", \"E\"]) // => \"1010100000000\"\n */\nexport function chroma(set) {\n  if (isChroma(set)) { return set; }\n  if (!Array.isArray(set)) { return \"\"; }\n  var b = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n  set.map(chr).forEach(function (i) {\n    b[i] = 1;\n  });\n  return b.join(\"\");\n}\n\nvar all = null;\n/**\n * Get a list of all possible chromas (all possible scales)\n * More information: http://allthescales.org/\n * @return {Array} an array of possible chromas from '10000000000' to '11111111111'\n *\n */\nexport function chromas(n) {\n  all = all || range(2048, 4095).map(function (n) { return n.toString(2); });\n  return typeof n === \"number\"\n    ? all.filter(function (chroma) { return clen(chroma) === n; })\n    : all.slice();\n}\n\n/**\n * Given a a list of notes or a pcset chroma, produce the rotations\n * of the chroma discarding the ones that starts with \"0\"\n *\n * This is used, for example, to get all the modes of a scale.\n *\n * @param {Array|String} set - the list of notes or pitchChr of the set\n * @param {Boolean} normalize - (Optional, true by default) remove all\n * the rotations that starts with \"0\"\n * @return {Array<String>} an array with all the modes of the chroma\n *\n * @example\n * PcSet.modes([\"C\", \"D\", \"E\"]).map(PcSet.intervals)\n */\nexport function modes(set, normalize) {\n  normalize = normalize !== false;\n  var binary = chroma(set).split(\"\");\n  return compact(\n    binary.map(function(_, i) {\n      var r = rotate(i, binary);\n      return normalize && r[0] === \"0\" ? null : r.join(\"\");\n    })\n  );\n}\n\nvar REGEX = /^[01]{12}$/;\n/**\n * Test if the given string is a pitch class set chroma.\n * @param {String} chroma - the pitch class set chroma\n * @return {Boolean} true if its a valid pcset chroma\n * @example\n * PcSet.isChroma(\"101010101010\") // => true\n * PcSet.isChroma(\"101001\") // => false\n */\nexport function isChroma(set) {\n  return REGEX.test(set);\n}\n\nvar IVLS = \"1P 2m 2M 3m 3M 4P 5d 5P 6m 6M 7m 7M\".split(\" \");\n/**\n * Given a pcset (notes or chroma) return it\"s intervals\n * @param {String|Array} pcset - the pitch class set (notes or chroma)\n * @return {Array} intervals or empty array if not valid pcset\n * @example\n * PcSet.intervals(\"1010100000000\") => [\"1P\", \"2M\", \"3M\"]\n */\nexport function intervals(set) {\n  if (!isChroma(set)) { return []; }\n  return compact(\n    set.split(\"\").map(function(d, i) {\n      return d === \"1\" ? IVLS[i] : null;\n    })\n  );\n}\n\n/**\n * Test if two pitch class sets are identical\n *\n * @param {Array|String} set1 - one of the pitch class sets\n * @param {Array|String} set2 - the other pitch class set\n * @return {Boolean} true if they are equal\n * @example\n * PcSet.isEqual([\"c2\", \"d3\"], [\"c5\", \"d2\"]) // => true\n */\nexport function isEqual(s1, s2) {\n  if (arguments.length === 1) { return function (s) { return isEqual(s1, s); }; }\n  return chroma(s1) === chroma(s2);\n}\n\n/**\n * Create a function that test if a collection of notes is a\n * subset of a given set\n *\n * The function can be partially applied\n *\n * @param {Array|String} set - an array of notes or a chroma set string to test against\n * @param {Array|String} notes - an array of notes or a chroma set\n * @return {boolean} true if notes is a subset of set, false otherwise\n * @example\n * const inCMajor = PcSet.isSubsetOf([\"C\", \"E\", \"G\"])\n * inCMajor([\"e6\", \"c4\"]) // => true\n * inCMajor([\"e6\", \"c4\", \"d3\"]) // => false\n */\nexport function isSubsetOf(set, notes) {\n  if (arguments.length > 1) { return isSubsetOf(set)(notes); }\n  set = pcsetNum(set);\n  return function(notes) {\n    notes = pcsetNum(notes);\n    return notes !== set && (notes & set) === notes;\n  };\n}\n\n/**\n * Create a function that test if a collectio of notes is a\n * superset of a given set (it contains all notes and at least one more)\n *\n * @param {Array|String} set - an array of notes or a chroma set string to test against\n * @param {Array|String} notes - an array of notes or a chroma set\n * @return {boolean} true if notes is a superset of set, false otherwise\n * @example\n * const extendsCMajor = PcSet.isSupersetOf([\"C\", \"E\", \"G\"])\n * extendsCMajor([\"e6\", \"a\", \"c4\", \"g2\"]) // => true\n * extendsCMajor([\"c6\", \"e4\", \"g3\"]) // => false\n */\nexport function isSupersetOf(set, notes) {\n  if (arguments.length > 1) { return isSupersetOf(set)(notes); }\n  set = pcsetNum(set);\n  return function(notes) {\n    notes = pcsetNum(notes);\n    return notes !== set && (notes | set) === notes;\n  };\n}\n\n/**\n * Test if a given pitch class set includes a note\n * @param {Array|String} set - the base set to test against\n * @param {String|Pitch} note - the note to test\n * @return {Boolean} true if the note is included in the pcset\n * @example\n * PcSet.includes([\"C\", \"D\", \"E\"], \"C4\") // => true\n * PcSet.includes([\"C\", \"D\", \"E\"], \"C#4\") // => false\n */\nexport function includes(set, note) {\n  if (arguments.length > 1) { return includes(set)(note); }\n  set = chroma(set);\n  return function(note) {\n    return set[chr(note)] === \"1\";\n  };\n}\n\n/**\n * Filter a list with a pitch class set\n *\n * @param {Array|String} set - the pitch class set notes\n * @param {Array|String} notes - the note list to be filtered\n * @return {Array} the filtered notes\n *\n * @example\n * PcSet.filter([\"C\", \"D\", \"E\"], [\"c2\", \"c#2\", \"d2\", \"c3\", \"c#3\", \"d3\"]) // => [ \"c2\", \"d2\", \"c3\", \"d3\" ])\n * PcSet.filter([\"C2\"], [\"c2\", \"c#2\", \"d2\", \"c3\", \"c#3\", \"d3\"]) // => [ \"c2\", \"c3\" ])\n */\nexport function filter(set, notes) {\n  if (arguments.length === 1) { return function (n) { return filter(set, n); }; }\n  return notes.filter(includes(set));\n}\n","/**\n * [![npm version](https://img.shields.io/npm/v/tonal-dictionary.svg)](https://www.npmjs.com/package/tonal-dictionary)\n *\n * `tonal-dictionary` contains a dictionary of musical scales and chords\n *\n * This is part of [tonal](https://www.npmjs.com/package/tonal) music theory library.\n *\n * @example\n * // es6\n * import * as Dictionary from \"tonal-dictionary\"\n * // es5\n * const Dictionary = require(\"tonal-dictionary\")\n *\n * @example\n * Dictionary.chord(\"Maj7\") // => [\"1P\", \"3M\", \"5P\", \"7M\"]\n *\n * @module Dictionary\n */\nimport sdata from \"./data/scales.json\";\nimport cdata from \"./data/chords.json\";\nimport { chroma } from \"tonal-pcset\";\n\nexport var dictionary = function (raw) {\n  var keys = Object.keys(raw).sort();\n  var data = [];\n  var index = [];\n\n  var add = function (name, ivls, chroma) {\n    data[name] = ivls;\n    index[chroma] = index[chroma] || [];\n    index[chroma].push(name);\n  };\n\n  keys.forEach(function (key) {\n    var ivls = raw[key][0].split(\" \");\n    var alias = raw[key][1];\n    var chr = chroma(ivls);\n\n    add(key, ivls, chr);\n    if (alias) { alias.forEach(function (a) { return add(a, ivls, chr); }); }\n  });\n  var allKeys = Object.keys(data).sort();\n\n  var dict = function (name) { return data[name]; };\n  dict.names = function (p) {\n    if (typeof p === \"string\") { return (index[p] || []).slice(); }\n    else { return (p === true ? allKeys : keys).slice(); }\n  };\n  return dict;\n};\n\nexport var combine = function (a, b) {\n  var dict = function (name) { return a(name) || b(name); };\n  dict.names = function (p) { return a.names(p).concat(b.names(p)); };\n  return dict;\n};\n\n/**\n * A dictionary of scales: a function that given a scale name (without tonic)\n * returns an array of intervals\n *\n * @function\n * @param {String} name\n * @return {Array} intervals\n * @example\n * import { scale } from \"tonal-dictionary\"\n * scale(\"major\") // => [\"1P\", \"2M\", ...]\n * scale.names(); // => [\"major\", ...]\n */\nexport var scale = dictionary(sdata);\n\n/**\n * A dictionary of chords: a function that given a chord type\n * returns an array of intervals\n *\n * @function\n * @param {String} type\n * @return {Array} intervals\n * @example\n * import { chord } from \"tonal-dictionary\"\n * chord(\"Maj7\") // => [\"1P\", \"3M\", ...]\n * chord.names(); // => [\"Maj3\", ...]\n */\nexport var chord = dictionary(cdata);\nexport var pcset = combine(scale, chord);\n","/**\n * [![npm version](https://img.shields.io/npm/v/tonal-scale.svg?style=flat-square)](https://www.npmjs.com/package/tonal-scale)\n *\n * A scale is a collection of pitches in ascending or descending order.\n *\n * This module provides functions to get and manipulate scales.\n *\n * @example\n * // es6\n * import * as Scale from \"tonal-scale\"\n * // es5\n * const Scale = require(\"tonal-scale\");\n *\n * @example\n * Scale.notes(\"Ab bebop\") // => [ \"Ab\", \"Bb\", \"C\", \"Db\", \"Eb\", \"F\", \"Gb\", \"G\" ]\n * Scale.names() => [\"major\", \"minor\", ...]\n * @module Scale\n */\nimport { name as noteName, pc } from \"tonal-note\";\nimport {\n  modes as pcsetModes,\n  chroma,\n  isSubsetOf,\n  isSupersetOf\n} from \"tonal-pcset\";\nimport { transpose } from \"tonal-distance\";\nimport { scale, chord } from \"tonal-dictionary\";\nimport { compact, unique, rotate } from \"tonal-array\";\n\nvar NO_SCALE = Object.freeze({\n  name: null,\n  intervals: [],\n  names: [],\n  chroma: null,\n  setnum: null\n});\n\nvar properties = function (name) {\n  var intervals = scale(name);\n  if (!intervals) { return NO_SCALE; }\n  var s = { intervals: intervals, name: name };\n  s.chroma = chroma(intervals);\n  s.setnum = parseInt(s.chroma, 2);\n  s.names = scale.names(s.chroma);\n  return Object.freeze(s);\n};\n\nvar memoize = function (fn, cache) { return function (str) { return cache[str] || (cache[str] = fn(str)); }; };\n\n/**\n * Get scale properties. It returns an object with:\n * - name: the scale name\n * - names: a list with all possible names (includes the current)\n * - intervals: an array with the scale intervals\n * - chroma:  scale croma (see pcset)\n * - setnum: scale chroma number\n *\n * @function\n * @param {String} name - the scale name (without tonic)\n * @return {Object}\n */\nexport var props = memoize(properties, {});\n\n/**\n * Return the available scale names\n *\n * @function\n * @param {boolean} aliases - true to include aliases\n * @return {Array} the scale names\n *\n * @example\n * Scale.names() // => [\"maj7\", ...]\n */\nexport var names = scale.names;\n\n/**\n * Given a scale name, return its intervals. The name can be the type and\n * optionally the tonic (which is ignored)\n *\n * It retruns an empty array when no scale found\n *\n * @function\n * @param {String} name - the scale name (tonic and type, tonic is optional)\n * @return {Array<String>} the scale intervals if is a known scale or an empty\n * array if no scale found\n * @example\n * Scale.intervals(\"major\") // => [ \"1P\", \"2M\", \"3M\", \"4P\", \"5P\", \"6M\", \"7M\" ]\n */\nexport var intervals = function (name) {\n  var p = tokenize(name);\n  return props(p[1]).intervals;\n};\n\n/**\n * Get the notes (pitch classes) of a scale.\n *\n * Note that it always returns an array, and the values are only pitch classes.\n *\n * @function\n * @param {String} tonic\n * @param {String} nameOrTonic - the scale name or tonic (if 2nd param)\n * @param {String} [name] - the scale name without tonic\n * @return {Array} a pitch classes array\n *\n * @example\n * Scale.notes(\"C\", \"major\") // => [ \"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\" ]\n * Scale.notes(\"C major\") // => [ \"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\" ]\n * Scale.notes(\"C4\", \"major\") // => [ \"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\" ]\n * Scale.notes(\"A4\", \"no-scale\") // => []\n * Scale.notes(\"blah\", \"major\") // => []\n */\nexport function notes(nameOrTonic, name) {\n  var p = tokenize(nameOrTonic);\n  name = name || p[1];\n  return intervals(name).map(transpose(p[0]));\n}\n\n/**\n * Check if the given name is a known scale from the scales dictionary\n *\n * @function\n * @param {String} name - the scale name\n * @return {Boolean}\n */\nexport function exists(name) {\n  var p = tokenize(name);\n  return scale(p[1]) !== undefined;\n}\n\n/**\n * Given a string with a scale name and (optionally) a tonic, split\n * that components.\n *\n * It retuns an array with the form [ name, tonic ] where tonic can be a\n * note name or null and name can be any arbitrary string\n * (this function doesn\"t check if that scale name exists)\n *\n * @function\n * @param {String} name - the scale name\n * @return {Array} an array [tonic, name]\n * @example\n * Scale.tokenize(\"C mixolydean\") // => [\"C\", \"mixolydean\"]\n * Scale.tokenize(\"anything is valid\") // => [\"\", \"anything is valid\"]\n * Scale.tokenize() // => [\"\", \"\"]\n */\nexport function tokenize(str) {\n  if (typeof str !== \"string\") { return [\"\", \"\"]; }\n  var i = str.indexOf(\" \");\n  var tonic = noteName(str.substring(0, i)) || noteName(str) || \"\";\n  var name = tonic !== \"\" ? str.substring(tonic.length + 1) : str;\n  return [tonic, name.length ? name : \"\"];\n}\n\n/**\n * Find mode names of a scale\n *\n * @function\n * @param {String} name - scale name\n */\nexport var modeNames = function (name) {\n  var ivls = intervals(name);\n  var tonics = notes(name);\n\n  return pcsetModes(ivls)\n    .map(function (chroma, i) {\n      var name = scale.names(chroma)[0];\n      if (name) { return [tonics[i] || ivls[i], name]; }\n    })\n    .filter(function (x) { return x; });\n};\n\n/**\n * Get all chords that fits a given scale\n *\n * @function\n * @param {String} name\n */\nexport var chords = function (name) {\n  var inScale = isSubsetOf(intervals(name));\n  return chord.names().filter(function (name) { return inScale(chord(name)); });\n};\n\n/**\n * Given an array of notes, return the scale: a pitch class set starting from\n * the first note of the array\n *\n * @function\n * @param {Array} notes\n * @return {Array}\n */\nexport var toScale = function (notes) {\n  var pcset = compact(notes.map(pc));\n  if (!pcset.length) { return pcset; }\n  var tonic = pcset[0];\n  var scale = unique(pcset);\n  return rotate(scale.indexOf(tonic), scale);\n};\n\n/**\n * Get all scales names that are a superset of the given one\n * (has the same notes and at least one more)\n *\n * @function\n * @param {String} name\n * @return {Array} a list of scale names\n */\nexport var supersets = function (name) {\n  if (!intervals(name).length) { return []; }\n  var isSuperset = isSupersetOf(intervals(name));\n  return scale.names().filter(function (name) { return isSuperset(scale(name)); });\n};\n\n/**\n * Find all scales names that are a subset of the given one\n * (has less notes but all from the given scale)\n *\n * @function\n * @param {String} name\n * @return {Array} a list of scale names\n */\nexport var subsets = function (name) {\n  var isSubset = isSubsetOf(intervals(name));\n  return scale.names().filter(function (name) { return isSubset(scale(name)); });\n};\n","/**\n * [![npm version](https://img.shields.io/npm/v/tonal-chord.svg)](https://www.npmjs.com/package/tonal-chord)\n * [![tonal](https://img.shields.io/badge/tonal-chord-yellow.svg)](https://www.npmjs.com/browse/keyword/tonal)\n *\n * `tonal-chord` is a collection of functions to manipulate musical chords\n *\n * This is part of [tonal](https://www.npmjs.com/package/tonal) music theory library.\n *\n * @example\n * // es6\n * import * as Chord from \"tonal-chord\"\n * // es5\n * const Chord = require(\"tonal-chord\")\n *\n * @example\n * Chord.notes(\"CMaj7\") // => [\"C\", \"E\", \"G\", \"B\"]\n *\n * @module Chord\n */\nimport { tokenize as split } from \"tonal-note\";\nimport { transpose } from \"tonal-distance\";\nimport { chord } from \"tonal-dictionary\";\nimport { chroma, isSubsetOf, isSupersetOf } from \"tonal-pcset\";\n\n/**\n * Return the available chord names\n *\n * @function\n * @param {boolean} aliases - true to include aliases\n * @return {Array} the chord names\n *\n * @example\n * Chord.names() // => [\"maj7\", ...]\n */\nexport var names = chord.names;\n\nvar NO_CHORD = Object.freeze({\n  name: null,\n  names: [],\n  intervals: [],\n  chroma: null,\n  setnum: null\n});\n\nvar properties = function (name) {\n  var intervals = chord(name);\n  if (!intervals) { return NO_CHORD; }\n  var s = { intervals: intervals, name: name };\n  s.chroma = chroma(intervals);\n  s.setnum = parseInt(s.chroma, 2);\n  s.names = chord.names(s.chroma);\n  return s;\n};\n\nvar memo = function (fn, cache) {\n  if ( cache === void 0 ) cache = {};\n\n  return function (str) { return cache[str] || (cache[str] = fn(str)); };\n};\n\n/**\n * Get chord properties. It returns an object with:\n *\n * - name: the chord name\n * - names: a list with all possible names (includes the current)\n * - intervals: an array with the chord intervals\n * - chroma:  chord croma (see pcset)\n * - setnum: chord chroma number\n *\n * @function\n * @param {String} name - the chord name (without tonic)\n * @return {Object} an object with the properties or a object with all properties\n * set to null if not valid chord name\n */\nexport var props = memo(properties);\n\n/**\n * Get chord intervals. It always returns an array\n *\n * @function\n * @param {String} name - the chord name (optionally a tonic and type)\n * @return {Array<String>} a list of intervals or null if the type is not known\n */\nexport var intervals = function (name) { return props(tokenize(name)[1]).intervals; };\n\n/**\n * Get the chord notes of a chord. This function accepts either a chord name\n * (for example: \"Cmaj7\") or a list of notes.\n *\n * It always returns an array, even if the chord is not found.\n *\n * @function\n * @param {String} nameOrTonic - name of the chord or the tonic (if the second parameter is present)\n * @param {String} [name] - (Optional) name if the first parameter is the tonic\n * @return {Array} an array of notes or an empty array\n *\n * @example\n * Chord.notes(\"Cmaj7\") // => [\"C\", \"E\", \"G\", \"B\"]\n * Chord.notes(\"C\", \"maj7\") // => [\"C\", \"E\", \"G\", \"B\"]\n */\nexport function notes(nameOrTonic, name) {\n  if (name) { return props(name).intervals.map(transpose(nameOrTonic)); }\n  var ref = tokenize(nameOrTonic);\n  var tonic = ref[0];\n  var type = ref[1];\n  return props(type).intervals.map(transpose(tonic));\n}\n\n/**\n * Check if a given name correspond to a chord in the dictionary\n *\n * @function\n * @param {String} name\n * @return {Boolean}\n * @example\n * Chord.exists(\"CMaj7\") // => true\n * Chord.exists(\"Maj7\") // => true\n * Chord.exists(\"Ablah\") // => false\n */\nexport var exists = function (name) { return chord(tokenize(name)[1]) !== undefined; };\n\n/**\n * Get all chords names that are a superset of the given one\n * (has the same notes and at least one more)\n *\n * @function\n * @param {String} name\n * @return {Array} a list of chord names\n */\nexport var supersets = function (name) {\n  if (!intervals(name).length) { return []; }\n  var isSuperset = isSupersetOf(intervals(name));\n  return chord.names().filter(function (name) { return isSuperset(chord(name)); });\n};\n\n/**\n * Find all chords names that are a subset of the given one\n * (has less notes but all from the given chord)\n *\n * @function\n * @param {String} name\n * @return {Array} a list of chord names\n */\nexport var subsets = function (name) {\n  var isSubset = isSubsetOf(intervals(name));\n  return chord.names().filter(function (name) { return isSubset(chord(name)); });\n};\n\n// 6, 64, 7, 9, 11 and 13 are consider part of the chord\n// (see https://github.com/danigb/tonal/issues/55)\nvar NUM_TYPES = /^(6|64|7|9|11|13)$/;\n/**\n * Tokenize a chord name. It returns an array with the tonic and chord type\n * If not tonic is found, all the name is considered the chord name.\n *\n * This function does NOT check if the chord type exists or not. It only tries\n * to split the tonic and chord type.\n *\n * @function\n * @param {String} name - the chord name\n * @return {Array} an array with [type, tonic]\n * @example\n * Chord.tokenize(\"Cmaj7\") // => [ \"C\", \"maj7\" ]\n * Chord.tokenize(\"C7\") // => [ \"C\", \"7\" ]\n * Chord.tokenize(\"mMaj7\") // => [ \"\", \"mMaj7\" ]\n * Chord.tokenize(\"Cnonsense\") // => [ \"C\", \"nonsense\" ]\n */\nexport function tokenize(name) {\n  var p = split(name);\n  if (p[0] === \"\") { return [\"\", name]; }\n  // aug is augmented (see https://github.com/danigb/tonal/issues/55)\n  if (p[0] === \"A\" && p[3] === \"ug\") { return [\"\", \"aug\"]; }\n\n  if (NUM_TYPES.test(p[2])) {\n    return [p[0] + p[1], p[2] + p[3]];\n  } else {\n    return [p[0] + p[1] + p[2], p[3]];\n  }\n}\n","/**\n * [![npm version](https://img.shields.io/npm/v/tonal-key.svg?style=flat-square)](https://www.npmjs.com/package/tonal-key)\n *\n * The `Tonal` module is a facade to the rest of the modules. They are namespaced,\n * so for example to use `pc` function from `tonal-note` you have to write:\n * `Tonal.Note.pc`\n *\n * It exports the following modules:\n * - Note\n * - Interval\n * - Distance\n * - Scale\n * - Chord\n * - PcSet\n *\n * Additionally this facade exports some functions without namespace (see \"Methods\" below)\n *\n * @example\n * // es6 modules\n * import * as Tonal from \"tonal\"\n * Tonal.Note.name(\"cx\") // => \"C##\"\n *\n * @example\n * import { Note } from \"tonal\"\n * Note.name(\"bb\") // => \"Bb\"\n *\n * @example\n * // es5 node modules\n * var Tonal = require(\"tonal\");\n * Tonal.Distance.transpose(Tonal.Note.pc(\"C#2\"), \"M3\") // => \"E#\"\n * Tonal.Chord.notes(\"Dmaj7\") // => [\"D\", \"F#\", \"A\", \"C#\"]\n *\n * @module Tonal\n */\nimport * as Array from \"tonal-array\";\nimport * as Note from \"tonal-note\";\nimport * as Interval from \"tonal-interval\";\nimport * as Distance from \"tonal-distance\";\nimport * as Dictionary from \"tonal-dictionary\";\nimport * as Scale from \"tonal-scale\";\nimport * as Chord from \"tonal-chord\";\nimport * as PcSet from \"tonal-pcset\";\n\nexport { Array, Note, Interval, Distance, Scale, Chord, PcSet, Dictionary };\n\n/**\n * Transpose a note by an interval\n * @function\n * @param {String} note\n * @param {String} interval\n * @return {String} the transported note\n * @see Distance.transpose\n */\nexport const transpose = Distance.transpose;\n\n/**\n * Get the interval from two notes\n * @function\n * @param {String} from\n * @param {String} to\n * @return {String} the interval in reverse shorthand notation\n * @see Distance.interval\n */\nexport const interval = Distance.interval;\n\n/**\n * Get note properties\n * @function\n * @param {String} note - the note name\n * @return {Object}\n * @see Note.props\n * @example\n * Tonal.note(\"A4\").chroma // => 9\n */\nexport const note = Note.props;\n\n/**\n * Get midi note number\n * @function\n * @param {String} note\n * @return {Number}\n * @see Note.midi\n * @example\n * Tonal.midi(\"A4\") // => 49\n */\nexport const midi = Note.midi;\n\n/**\n * Get note frequency using equal tempered tuning at 440\n * @function\n * @param {String} note\n * @return {Number}\n * @see Note.freq\n * @example\n * Tonal.freq(\"A4\") // => 440\n */\nexport const freq = Note.freq;\n\n/**\n * Get intervals from a chord type\n * @function\n * @param {String} type - the chord type (no tonic)\n * @return {Array} an array of intervals or undefined if the chord type is not known\n * @see Dictionary.chord\n * @example\n * Tonal.chord(\"m7b5\") // => [\"1P\", \"3m\", \"5d\", \"7m\"]\n */\nexport const chord = Dictionary.chord;\n\n/**\n * Get intervals from scale name\n * @function\n * @param {String} name - the scale name (without tonic)\n * @return {Array} an array of intervals or undefiend if the scale is not kown\n * @example\n * Tonal.scale(\"major\") // => [\"1P\", \"2M\", \"3M\"...]\n */\nexport const scale = Dictionary.scale;\n","import { getMidi } from \"../util\";\nimport { Pulse } from \"../Pulse\";\n\nexport interface NoteEvent {\n    note: string;\n    midi?: number;\n    gain?: number;\n    off?: number;\n    deadline?: number;\n}\n\nexport class Instrument {\n    midiOffset = 0;\n    onTrigger: (events: { on: NoteEvent[], off: NoteEvent[], active: NoteEvent[] }) => any;\n    ready: Promise<any>;\n    gain = 1;\n\n    activeEvents = [];\n    context: any;\n    mix: any;\n    constructor({ context, gain, mix, onTrigger, midiOffset }: any = {}) {\n        this.onTrigger = onTrigger;\n        this.midiOffset = midiOffset || this.midiOffset;\n        this.gain = gain || this.gain;\n        this.init({ context, mix });\n    }\n\n    init({ context, mix }) {\n        if (!context && (!mix || !mix.context)) {\n            console.warn(`you should pass a context or a mix (gainNode) to a new Instrument. \n            You can also Call init with {context,mix} to setup the Instrument later`);\n            return;\n        }\n        this.context = context || mix.context;\n        this.mix = mix || this.context.destination;\n    }\n\n    playNotes(notes: string[], settings: any = {}) {\n        const deadline = (settings.deadline || this.context.currentTime);\n        settings = Object.assign({\n            duration: 2000,\n            gain: 1,\n        }, settings, { deadline });\n        if (settings.interval) {\n            // call recursively with single notes at interval\n            return notes.map((note, index) => {\n                this.playNotes([note], Object.assign({}, settings, {\n                    interval: 0,\n                    deadline: deadline + index * settings.interval\n                }))\n            });\n        }\n        const midi = notes.map(note => getMidi(note, this.midiOffset));\n        const noteOff = settings.deadline + settings.duration / 1000;\n\n        const notesOn = notes.map((note, index) => ({\n            note,\n            midi: midi[index],\n            gain: settings.gain,\n            noteOff,\n            deadline: settings.deadline\n        }));\n\n        if (settings.pulse && this.onTrigger) {\n            settings.pulse.clock.callbackAtTime((deadline) => {\n                this.activeEvents = this.activeEvents.concat(notesOn);\n                this.onTrigger({ on: notesOn, off: [], active: this.activeEvents });\n            }, settings.deadline);\n        }\n        if (settings.duration && settings.pulse) {\n            settings.pulse.clock.callbackAtTime((deadline) => {\n                // find out which notes need to be deactivated\n                const notesOff = notes\n                    .filter(note => !this.activeEvents\n                        .find(event => {\n                            const keep = note === event.note && event.noteOff > deadline;\n                            if (keep) {\n                                console.log('keep', note);\n                            }\n                            return keep;\n                        })).map(note => this.activeEvents.find(e => e.note === note));\n\n                this.activeEvents = this.activeEvents\n                    .filter(e => !notesOff.includes(e));\n\n                if (this.onTrigger) {\n                    this.onTrigger({ on: [], off: notesOff, active: this.activeEvents });\n                }\n            }, noteOff);\n        }\n        return this.playKeys(midi, settings);\n    }\n\n    playKeys(keys: number[], settings?) {\n        // TODO: fire callbacks after keys.map((key,i)=>i*settings.interval)?\n    }\n}","import { Instrument } from './Instrument';\nimport { Note } from 'tonal';\nimport { adsr } from '../util';\n\nexport class Synthesizer extends Instrument {\n    duration = 200;\n    type = 'sine';\n    gain = 0.9;\n    attack = .05;\n    decay = .05;\n    sustain = .4;\n    release = .1;\n\n    constructor(props: any) {\n        super(props);\n        this.duration = props.duration || this.duration;\n        this.type = props.type || this.type;\n        this.gain = props.gain || this.gain;\n    }\n\n    getVoice(type = 'sine', gain = 0, key) {\n        const frequency = Note.freq(key);\n        const oscNode = this.context.createOscillator();\n        oscNode.type = type;\n        const gainNode = this.context.createGain();\n        oscNode.connect(gainNode);\n        gainNode.gain.value = typeof gain === 'number' ? gain : 0.8;\n        gainNode.connect(this.mix);\n        oscNode.frequency.value = frequency;\n        return { oscNode, gainNode, key, frequency };\n    }\n\n    lowestGain(a, b) {\n        return a.gain.gain.value < b.gain.gain.value ? -1 : 0;\n    }\n\n    startKeys(keys: number[], settings: any = {}) {\n\n    }\n\n    playKeys(keys: number[], settings: any = {}) {\n        super.playKeys(keys, settings); // fires callback   \n        //const time = this.context.currentTime + settings.deadline / 1000;\n        const time = settings.deadline || this.context.currentTime;\n        const interval = settings.interval || 0;\n        return keys.map((key, i) => {\n            const delay = i * interval;\n            const [endless, attack, decay, sustain, release, duration, gain] =\n                [\n                    settings.endless,\n                    settings.attack || this.attack,\n                    settings.decay || this.decay,\n                    settings.sustain || this.sustain,\n                    settings.release || this.release,\n                    (settings.duration || this.duration) / 1000,\n                    (settings.gain || 1) * this.gain\n                ]\n            const voice = this.getVoice(this.type, 0, key);\n            adsr({ attack, decay, sustain, release, gain, duration, endless }, time + delay, voice.gainNode.gain);\n            voice.oscNode.start(settings.deadline + delay);\n            return voice;\n        });\n    }\n\n    stopVoice(voice, settings: any = {}) {\n        if (!voice) {\n            return;\n        }\n        const time = settings.deadline || this.context.currentTime;\n        voice.gainNode.gain.setTargetAtTime(0, time, settings.release || this.release);\n        //voice.oscNode.stop()\n    }\n\n    stopVoices(voices, settings) {\n        voices.forEach(voice => {\n            this.stopVoice(voice, settings);\n        });\n    }\n}","import * as Chord from 'tonal-chord';\nimport * as Scale from 'tonal-scale';\n\nexport const chords = [\n    {\n        symbol: 'm',\n        long: 'minor',\n        short: '-',\n        groups: ['Basic', 'Triads']\n    },\n    {\n        symbol: 'M',\n        long: 'major',\n        short: '△',\n        groups: ['Basic', 'Triads']\n    },\n    {\n        symbol: 'o',\n        groups: ['Basic', 'Symmetric', 'Triads'],\n        long: 'Vermindert',\n        /* short: 'o' */\n    },\n    {\n        symbol: 'M#5', // = Mb6\n        groups: ['Advanced', 'Symmetric', 'Triads'],\n        short: '△#5'\n    },\n    {\n        symbol: 'Msus4',\n        groups: ['Advanced', 'Symmetric'],\n        short: 'sus4'\n    },\n    {\n        symbol: 'Msus2',\n        groups: ['Advanced', 'Symmetric'],\n        short: 'sus2'\n    },\n    // 5 4 64 m#5 Mb5  7no5  \n    {\n        symbol: '7',\n        groups: ['Basic', 'Diatonic', 'Modes'],\n        long: 'Dominantsept'\n    },\n    {\n        symbol: '7#11',\n        groups: ['Advanced', 'Diatonic', 'Modes'],\n        long: 'Dominant #11'\n    },\n    {\n        symbol: 'M6',\n        groups: ['Advanced'],\n        long: 'major 6',\n        short: '6'\n    },\n    {\n        symbol: 'o7',\n        groups: ['Advanced', 'Symmetric', 'Diatonic'], // HM 7 chord\n        long: 'Vermindert 7',\n    },\n    {\n        symbol: 'm7',\n        groups: ['Basic', 'Diatonic', 'Modes'],\n        long: 'minor 7',\n        short: '-7'\n    },\n    {\n        symbol: 'oM7',\n        groups: ['Expert'],\n        long: 'diminished major 7',\n        short: 'o△7'\n    },\n    {\n        symbol: 'm7b5',\n        groups: ['Basic', 'Diatonic', 'Modes'],\n        long: 'Halbvermindert',\n        short: '-7b5'\n    },\n    {\n        symbol: '7#5',\n        groups: ['Advanced', 'Symmetric'],\n        long: 'Dominantsept #5'\n    },\n    {\n        symbol: 'Maj7',\n        groups: ['Basic', 'Diatonic', 'Modes'],\n        long: 'Major 7',\n        short: '△7'\n    },\n    {\n        symbol: 'mMaj7',\n        short: '-△7',\n        groups: ['Advanced', 'Diatonic']\n    },\n    {\n        symbol: 'M7#5',\n        groups: ['Advanced', 'Diatonic'],\n        short: '△7#5'\n    },\n    {\n        symbol: '7sus4',\n        groups: ['Advanced'],\n    },\n    {\n        symbol: '9',\n        groups: ['Advanced'],\n    },\n    {\n        symbol: 'M9',\n        groups: ['Advanced'],\n        short: '△9'\n    }\n    /*\n7b13 M7b5 m7#5 9no5  M7b6 7b5 Madd9 mb6b9 mb6M7 madd4 sus24 madd9 Maddb9 +add#9 M7sus4 7#5sus4 M#5add9 M7#5sus4\n11 m9 m6 9#5 7b9 7#9 M69 9b5 m69 mM9 7b6 m9b5 m9#5 7#11 M7b9 9b13 o7M7 M9b5 11b9 M9#5 7add6 M6#11 M7#11 7#5#9 13no5 9sus4 7#5b9 M9sus4 7sus4b9 m7add11 mMaj7b6 M9#5sus4\n13 m11 M13 9#11 13#9 13b5 13b9 m11b5 7b9#9 mM9b6 M9#11 9#5#11 7#9b13 7b9b13 13sus4 m11A 5 7#9#11 7b9#11 M69#11 7#11b13 M7#9#11 M7add13 7#5b9#11 7sus4b9b13\nm13 13#11 M13#11 13b9#11 9#11b13 13#9#11 7b9b13#11 7#9#11b13\n    */\n];\n\nexport const scales = [\n    {\n        symbol: 'major pentatonic',\n        groups: ['Basic', 'Pentatonic'],\n    },\n    {\n        symbol: 'minor pentatonic',\n        groups: ['Basic', 'Pentatonic'],\n    },\n    {\n        symbol: 'minor blues',\n        groups: ['Basic'],\n    },\n    // gregorian modes\n    {\n        symbol: 'major',\n        groups: ['Basic', 'Diatonic', 'Modes'],\n    },\n    {\n        symbol: 'dorian',\n        groups: ['Basic', 'Diatonic', 'Modes'],\n    },\n    {\n        symbol: 'phrygian',\n        groups: ['Basic', 'Diatonic', 'Modes'],\n    },\n    {\n        symbol: 'lydian',\n        groups: ['Basic', 'Diatonic', 'Modes'],\n    },\n    {\n        symbol: 'mixolydian',\n        groups: ['Basic', 'Diatonic', 'Modes'],\n    },\n    {\n        symbol: 'aeolian',\n        groups: ['Basic', 'Diatonic', 'Modes'],\n    },\n    {\n        symbol: 'locrian',\n        groups: ['Basic', 'Diatonic', 'Modes'],\n    },\n    {\n        symbol: 'whole tone',\n        groups: ['Advanced', 'Symmetric']\n    },\n    {\n        symbol: 'diminished',\n        groups: ['Advanced', 'Symmetric']\n    },\n    //HTGT ?\n    {\n        symbol: 'augmented',\n        groups: ['Advanced', 'Symmetric']\n    },\n    {\n        symbol: 'chromatic',\n        groups: ['Expert', 'Symmetric']\n    },\n    // harmonic minor modes\n    {\n        symbol: 'harmonic minor', // HM 1\n        groups: ['Advanced', 'Diatonic']\n    },\n    // HM 2 locrian #6 !\n    {\n        symbol: 'ionian augmented', // HM 3\n        groups: ['Expert', 'Diatonic']\n    },\n    {\n        symbol: 'dorian #4', // HM 4\n        groups: ['Expert', 'Diatonic']\n    },\n    {\n        symbol: 'spanish', // HM 5\n        groups: ['Advanced', 'Diatonic']\n    },\n    // HM 6 lydian #9\n    // HM 7 ???\n\n    // melodic minor modes\n    {\n        symbol: 'melodic minor', // MM 1\n        groups: ['Advanced', 'Diatonic']\n    },\n    {\n        symbol: 'melodic minor second mode', // MM 2\n        groups: ['Expert', 'Diatonic']\n    },\n    {\n        symbol: 'lydian augmented', // MM 3\n        groups: ['Expert', 'Diatonic']\n    },\n    {\n        symbol: 'lydian dominant', // MM 4\n        groups: ['Advanced', 'Diatonic'],\n        long: 'mixolydian #11'\n    },\n    {\n        symbol: 'melodic minor fifth mode', // MM 5\n        groups: ['Expert', 'Diatonic']\n    },\n    {\n        symbol: 'locrian #2', // MM 6\n        groups: ['Expert', 'Diatonic']\n    },\n    {\n        symbol: 'altered', // MM 7\n        groups: ['Advanced', 'Diatonic']\n    },\n    //non european\n    {\n        symbol: 'kumoijoshi',\n        groups: ['Exotic', 'Pentatonic']\n    },\n    {\n        symbol: 'iwato',\n        groups: ['Exotic', 'Pentatonic']\n    },\n    {\n        symbol: 'pelog',\n        groups: ['Exotic', 'Pentatonic']\n    },\n    // hyojo?\n    {\n        symbol: 'egyptian',\n        groups: ['Exotic', 'Pentatonic']\n    },\n    {\n        symbol: 'in-sen',\n        groups: ['Exotic', 'Pentatonic']\n    },\n    {\n        symbol: 'scriabin',\n        groups: ['Exotic', 'Pentatonic']\n    },\n    {\n        symbol: 'ritusen',\n        groups: ['Exotic', 'Pentatonic']\n    },\n    {\n        symbol: 'hirajoshi',\n        groups: ['Exotic', 'Pentatonic']\n    },\n    {\n        symbol: 'malkos raga',\n        groups: ['Exotic', 'Pentatonic']\n    },\n    {\n        symbol: 'vietnamese 1',\n        groups: ['Exotic', 'Pentatonic']\n    },\n    /* {\n        symbol: 'vietnamese 2',\n        groups: ['Exotic', 'Pentatonic'] // = minor pentatonic\n    }, */\n    {\n        symbol: 'lydian pentatonic', // = China (Sikora S. 61)\n        groups: ['Pentatonic']\n    },\n    {\n        symbol: 'mixolydian pentatonic',\n        groups: ['Pentatonic']\n    },\n    {\n        symbol: 'ionian pentatonic',\n        groups: ['Pentatonic']\n    },\n    {\n        symbol: 'locrian pentatonic',\n        groups: ['Pentatonic']\n    },\n    {\n        symbol: 'flat six pentatonic',\n        groups: ['Pentatonic']\n    },\n    {\n        symbol: 'minor six pentatonic',\n        groups: ['Pentatonic']\n    },\n    {\n        symbol: 'minor #7M pentatonic',\n        groups: ['Pentatonic']\n    },\n    {\n        symbol: 'lydian #5P pentatonic',\n        groups: ['Pentatonic']\n    },\n    {\n        symbol: 'whole tone pentatonic',\n        groups: ['Pentatonic', 'Symmetric']\n    },\n    {\n        symbol: 'flat three pentatonic',\n        groups: ['Pentatonic']\n    },\n    {\n        symbol: 'super locrian pentatonic',\n        groups: ['Pentatonic']\n    },\n    {\n        symbol: 'major flat two pentatonic',\n        groups: ['Pentatonic']\n    },\n    {\n        symbol: 'lydian dominant pentatonic',\n        groups: ['Pentatonic']\n    },\n    {\n        symbol: 'neopolitan major pentatonic',\n        groups: ['Pentatonic']\n    }\n\n    /*            \n    mystery #1 piongio    prometheus major blues minor hexatonic six tone symmetric prometheus neopolitan\n     persian  spanish  oriental flamenco balinese   todi raga enigmatic lydian #9 neopolitan locrian #2  lydian minor  locrian major  romanian minor harmonic major hungarian major hungarian minor lydian dominant   neopolitan minor neopolitan major lydian diminished leading whole tone augmented heptatonic double harmonic major double harmonic lydian melodic minor fifth mode melodic minor second mode\n    bebop kafi raga  purvi raga ichikosucho bebop minor minor bebop bebop major bebop locrian bebop dominant spanish heptatonic minor six diminished\n    composite blues\n    */\n];\n\nexport const symbols = { chords, scales };\n\nexport const levels = ['Basic', 'Advanced', 'Expert'];\n\nexport function groupFilter(group) {\n    return (item) => {\n        const level = Math.max(item.groups.filter(group => levels.indexOf(group) !== -1)\n            .map(group => levels.indexOf(group) + 1));\n        const groups = level > 0 ? Array.from(new Set(levels.slice(level).concat(item.groups))) : item.groups;\n        return groups.indexOf(group) !== -1;\n    };\n}\n\nexport function scaleNames(group = 'Basic') {\n    if (!group || group === 'All') {\n        return Scale.names();\n    }\n    return scales.filter(groupFilter(group))\n        .map(scale => scale.symbol);\n}\nexport function chordNames(group = 'Basic') {\n    if (!group || group === 'All') {\n        return Chord.names();\n    }\n    return chords.filter(groupFilter(group))\n        .map(scale => scale.symbol);\n}\n\nexport function groupNames() {\n    return Array.from(new Set(levels.concat(scales.concat(chords)\n        .map(item => item.groups)\n        .reduce((groups, current) => groups.concat(current))))).concat(['All']);\n}\n\nexport function symbolName(type, symbol, long) {\n    const pool = symbols[type + 's'];\n    const match = pool.find(item => item.symbol === symbol);\n    if (!match) {\n        return symbol;\n    }\n    /* return symbol; */\n    return (long ? match.long : match.short) || symbol;\n}\n\nexport function scaleName(symbol, long = false) {\n    return symbolName('scale', symbol, long);\n}\n\nexport function chordName(symbol, long = false) {\n    return symbolName('chord', symbol, long);\n}\n\nexport function randomItem(array) {\n    return array[Math.floor(Math.random() * array.length)];\n}\n\nexport function randomScale(group) {\n    return randomItem(scaleNames(group));\n}\n\nexport function randomChord(group) {\n    return randomItem(chordNames(group));\n}","import { Chord, Distance, Interval, Note, PcSet, Scale } from 'tonal';\nimport { Synthesizer } from './instruments/Synthesizer';\nimport { scaleNames } from './symbols';\n\nexport function randomNumber(n) {\n    return Math.floor(Math.random() * n)\n}\n\nexport function arraySum(array) {\n    return array.reduce((s, i) => s + i, 0);\n}\n\nexport function randomElement(array, weighted?) {\n    if (!weighted) {\n        return array[randomNumber(array.length)];\n    }\n    const r = randomNumber(arraySum(weighted)) + 1;\n    const total = weighted\n        .reduce((abs, w, i) => abs.concat(w + (abs.length ? abs[i - 1] : 0)), []);\n    return array[total.indexOf(total.find((s, i) => s >= r))];\n}\n\nexport function shuffleArray(a) {\n    for (let i = a.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [a[i], a[j]] = [a[j], a[i]];\n    }\n    return a;\n}\n\nexport function getTonalChord(chord) {\n    chord = chord\n        .replace('-', 'm')\n        .replace('^', 'M')\n        .replace('h7', 'm7b5')\n        .replace('h', 'dim');\n    /**\n     * Chords that dont work:\n     * slash cords are ignored\n     * 7b9b5 does not work\n     * \n     */\n    const tokens = Chord.tokenize(chord);\n    const s = tokens[1].split('/');\n    return tokens[0] + (s[0] || 'M');\n}\n\nexport function getMidi(note, offset) {\n    return Note.props(note).midi - offset;\n}\n\n/** Travels path along measures */\nexport function getPath(path, measures, traveled = []) {\n    if (!Array.isArray(measures[path[0]]) || path.length === 1) {\n        return measures[Math.min(path[0], measures.length - 1)];\n    }\n    return this.getPath(path.slice(1), measures[path[0]], traveled.concat(path[0]));\n}\n\nexport function getDuration(divisions, noteLength = 1, measureLength = 1) {\n    return noteLength * divisions.reduce((f, d) => f / d, 1000) * measureLength; // fraction of one\n}\n\nexport function resolveChords(pattern, measures, path, divisions = []) {\n    if (Array.isArray(pattern)) {\n        // division: array of children lengths down the path (to calculate fraction)\n        divisions = [].concat(divisions, [pattern.length]);\n        return pattern.map((p, i) => this.resolveChords(p, measures, path.concat([i]), divisions));\n    }\n    if (pattern === 0) {\n        return 0;\n    }\n    const fraction = getDuration(divisions, pattern);\n    if (fraction === 0) {\n        console.warn('fraction is 0', pattern);\n    }\n    return { chord: this.getPath(path, measures), pattern, /* gain, */ path, divisions, fraction };\n}\n\nexport function hasOff(pattern, division = 3) {\n    return Array.isArray(pattern) && pattern.length === division && pattern[division - 1] !== 0;\n}\n\n// replaces offs on last beat with next chord + erases next one\nexport function offbeatReducer(settings) {\n    // TODO: find out why some offbeats sound sketchy\n    return (measures, bar, index) => {\n        const last = index > 0 ? measures[index - 1] : null;\n        if (last && this.hasOff(last[settings.cycle - 1], settings.division)) {\n            last[settings.cycle - 1][settings.division - 1] = bar[0];\n            bar[0] = 0;\n        }\n        return measures.concat([bar]);\n    };\n}\n\nexport function invertInterval(interval) {\n    const fix = {\n        '1A': '-8d',\n        '-1A': '8d',\n    }\n    if (fix[interval]) {\n        return fix[interval];\n    }\n    if (Interval.semitones(interval) < 0) {\n        return Interval.invert(interval.slice(1));\n    }\n    return '-' + Interval.invert(interval);\n}\n\n/** Transforms interval into one octave (octave+ get octaved down) */\nexport function simplifyInterval(interval) {\n    interval = Interval.simplify(interval) || '1P';\n\n    const fix = {\n        '8P': '1P',\n        '-8P': '1P',\n        '0A': '1P',\n        '-0A': '1P',\n        '8d': '-1A',\n        '-8d': '1A',\n    }\n\n    if (fix[interval]) {\n        return fix[interval];\n    }\n    return interval;\n}\n\ndeclare type intervalDirection = 'up' | 'down';\n\n/** inverts the interval if it does not go to the desired direction */\nexport function forceDirection(interval, direction: intervalDirection) {\n    if (\n        (direction === 'up' && Interval.semitones(interval) < 0) ||\n        (direction === 'down' && Interval.semitones(interval) > 0)\n    ) {\n        return invertInterval(interval);\n    }\n    return interval;\n}\n\n// use Interval.ic?\nexport function minInterval(interval, direction: intervalDirection = 'up', force?) {\n    interval = simplifyInterval(interval);\n    if (!force) {\n        let inversion = invertInterval(interval);\n        if (Math.abs(Interval.semitones(inversion)) < Math.abs(Interval.semitones(interval))) {\n            interval = inversion;\n        }\n    }\n    if (direction && force) {\n        return forceDirection(interval, direction)\n    }\n    return interval;\n}\n\nexport function mapMinInterval(direction: intervalDirection = 'up', force?) {\n    return (interval) => minInterval(interval, direction, force);\n}\n\n// sort function\nexport function sortMinInterval(preferredDirection: intervalDirection = 'up') {\n    return (a, b) => {\n        const diff = Math.abs(Interval.semitones(a)) - Math.abs(Interval.semitones(b));\n        if (diff === 0) {\n            return preferredDirection === 'up' ? -1 : 1;\n        }\n        return diff;\n    }\n}\n\n/** Returns the note with the least distance to \"from\" */\nexport function getNearestNote(from, to, direction?: intervalDirection, force = !!direction) {\n    let interval = minInterval(Distance.interval(Note.pc(from), to), direction, force);\n    return Distance.transpose(from, interval);\n}\n\n/** Returns the note with the least distance to \"from\". TODO: add range */\nexport function getNearestTargets(from, targets, preferredDirection: intervalDirection = 'down', force = false, flip = false) {\n    let intervals = targets\n        .map((target) => Distance.interval(Note.pc(from), target))\n        .map(mapMinInterval(preferredDirection, force))\n        .sort(sortMinInterval(preferredDirection))\n    if (flip) {\n        intervals = intervals.reverse();\n    }\n    return intervals.map(i => Distance.transpose(from, i));\n}\n\nexport function intervalMatrix(from, to) {\n    return to.map(note => from\n        .map(n => {\n            return Distance.interval(n, note)\n        })\n        .map(d => minInterval(d))\n        /* .map(i => i.slice(0, 2) === '--' ? i.slice(1) : i) */\n    )\n}\n\nexport function randomSynth(mix, allowed = ['sine', 'triangle', 'square', 'sawtooth'], settings = {}) {\n    const gains = {\n        sine: 0.9,\n        triangle: 0.8,\n        square: 0.2,\n        sawtooth: 0.3\n    }\n    const wave = randomElement(allowed);\n    return new Synthesizer(Object.assign({ gain: gains[wave], type: wave, mix }, settings));\n}\n\nexport interface ADSRParams {\n    attack?: number,\n    decay?: number,\n    sustain?: number,\n    release?: number,\n    gain?: number,\n    duration?: number,\n    endless?: boolean\n}\n\nexport function adsr({ attack, decay, sustain, release, gain, duration, endless }: ADSRParams, time, param) {\n    // console.log('adsr', attack, decay, sustain, release, gain, duration, time);\n    param.linearRampToValueAtTime(gain, time + attack);\n    param.setTargetAtTime(sustain * gain, time + Math.min(attack + decay, duration), decay);\n    if (!endless) {\n        param.setTargetAtTime(0, time + Math.max(duration - attack - decay, attack + decay, duration), release);\n    }\n}\n\nexport function randomDelay(maxMs) {\n    return Math.random() * maxMs * 2 / 1000;\n}\n\nexport function isInRange(note, range) {\n    return Distance.semitones(note, range[0]) <= 0 && Distance.semitones(note, range[1]) >= 0;\n}\n\nexport function transposeNotes(notes, interval) {\n    return notes.map(note => Distance.transpose(note, interval));\n}\n\nexport function transposeToRange(notes, range, times = 0) {\n    if (times > 10) {\n        return notes;\n    }\n    if (notes.find(note => Distance.semitones(note, range[0]) > 0)) {\n        notes = notes.map(note => Distance.transpose(note, '8P'));\n        return transposeToRange(notes, range, ++times);\n    }\n    if (notes.find(note => Distance.semitones(note, range[1]) < 0)) {\n        notes = notes.map(note => Distance.transpose(note, '-8P'));\n        return transposeToRange(notes, range, ++times);\n    }\n    return notes;\n}\n\n// accepts both strings or numbers where negative means minor, \n// returns unified step string that can be turned into an interval\nexport function getStep(step) {\n    if (typeof step === 'number' && step < 0) {\n        step = 'b' + (step * -1);\n    }\n    return step + ''; // to string\n}\n\nconst steps = {\n    '1P': ['1', '8'],\n    '2m': ['b9', 'b2'],\n    '2M': ['9', '2',],\n    '2A': ['#9', '#2'],\n    '3m': ['b3'],\n    '3M': ['3'],\n    '4P': ['11', '4'],\n    '4A': ['#11', '#4'],\n    '5D': ['b5'],\n    '5P': ['5'],\n    '6m': ['b13', 'b6'],\n    '6M': ['13', '6'],\n    '7m': ['b7'],\n    '7M': ['7', '^7', 'maj7']\n};\n\nexport function getIntervalFromStep(step) {\n    step = getStep(step);\n    const interval = Object.keys(steps)\n        .find(i => steps[i].includes(step));\n    if (!interval) {\n        // console.warn(`step ${step} has no defined inteval`);\n    }\n    return interval;\n}\n\nexport function getChordScales(chord, group = 'Diatonic') {\n    const tokens = Chord.tokenize(getTonalChord(chord));\n    const isSuperset = PcSet.isSupersetOf(Chord.intervals(tokens[1]));\n    return scaleNames(group).filter(name => isSuperset(Scale.intervals(name)));\n}\n\nexport function pickChordScale(chord, group = 'Diatonic') {\n    const scales = getChordScales(chord);\n    if (!scales.length) {\n        console.warn(`cannot pick chord scale: no scales found for chord ${chord} in group ${group}`);\n        return;\n    }\n    return scales[0];\n}\n\nexport function findDegree(degree, intervals) {\n    return intervals\n        .find(i => i.includes(getStep(degree)) ||\n            i === getIntervalFromStep(degree));\n}\n\nexport function hasDegree(degree, intervals) {\n    return !!findDegree(degree, intervals);\n}\n\nexport function hasAllDegrees(degrees, intervals) {\n    return degrees.reduce((res, d) => res && hasDegree(d, intervals), true);\n}\n\nexport function getScaleDegree(degree, scale) {\n    return findDegree(degree, Scale.intervals(scale));\n}\n\nexport function getDegreeInChord(note, chord, group?) {\n    return getDegreeFromInterval(\n        Distance.interval(\n            Chord.tokenize(getTonalChord(chord))[0],\n            Note.pc(note))\n    );\n}\n\nexport function getScalePattern(pattern, scale) {\n    return pattern.map(degree => getScaleDegree(degree, scale));\n}\n\nexport function renderIntervals(intervals, root) {\n    return intervals.map(i => Distance.transpose(root, i));\n}\n\nexport function renderSteps(steps, root) {\n    return renderIntervals(steps.map(step => getIntervalFromStep(step)), root);\n}\n\nexport function permutateIntervals(intervals, pattern) {\n    return pattern.map(d => findDegree(d, intervals));\n}\n\nexport function getDegreeFromInterval(interval) {\n    return steps[interval] ? steps[interval][0] : 0;\n}\n\nexport function getPatternInChord(pattern, chord) {\n    chord = getTonalChord(chord);\n    const intervals = Chord.intervals(chord);\n    const tokens = Chord.tokenize(chord);\n    let permutation;\n    if (hasAllDegrees(pattern, intervals)) {\n        permutation = permutateIntervals(intervals, pattern);\n    } else {\n        // not all degrees of the pattern are in the chord > get scale\n        const scale = pickChordScale(chord);\n        permutation = permutateIntervals(Scale.intervals(scale), pattern);\n    }\n    if (tokens[0]) {\n        return renderIntervals(permutation, tokens[0]);\n    }\n    return permutation;\n}\n\n// TODO: other way around: find fixed interval pattern in a scale\n// TODO: motives aka start pattern from same note in different scale\n// TODO: motives aka start pattern from different note in same scale\n// TODO: motives aka start pattern from different note in different scale\n\nexport function getDigitalPattern(chord) {\n    chord = getTonalChord(chord);\n    const intervals = Chord.intervals(chord);\n    if (intervals.includes('3m')) {\n        return [1, 3, 4, 5];\n    } else if (intervals.includes('3M')) {\n        return [1, 2, 3, 5];\n    } else {\n        return [1, 1, 1, 1];\n    }\n}\n\nexport function renderDigitalPattern(chord) {\n    return getPatternInChord(getDigitalPattern(chord), chord);\n}\n\nexport function getGuideTones(chord) {\n    chord = getTonalChord(chord);\n    return getPatternInChord([3, 7], chord);\n}\n\nexport function getRangePosition(note, range) {\n    const semitones = [Distance.semitones(range[0], note), Distance.semitones(range[0], range[1])];\n    return semitones[0] / semitones[1];\n\n}\n\nexport function isFirstInPath(path, index) {\n    return path.slice(index)\n        .reduce((sum, value) => sum + value, 0) === 0;\n}\n\nexport function isBarStart(path) {\n    return isFirstInPath(path, 1);\n}\n\nexport function isFormStart(path) {\n    return isFirstInPath(path, 0);\n}\n\nexport function isOffbeat(path) {\n    return path[2] !== 0;\n}\n\n\nexport function otherDirection(direction, defaultDirection?) {\n    if (direction === 'up') {\n        return 'down';\n    } else if (direction === 'down') {\n        return 'up'\n    }\n    return defaultDirection;\n}\n\nexport function parseChords(chords) {\n    return chords\n        .replace(/\\n/g, '|')\n        .split('|') // split into measures\n        .map(measure => measure.split(/\\s/)) // split measures by spaces\n        .map(measure => measure.filter(chord => !!chord)) // kill empty chords\n        .map(measure => measure.length === 1 ? measure[0] : measure) // simplify one chord measures\n        .filter(measure => !measure || measure.length) // kill empty measures\n}","import { Instrument } from \"../instruments/Instrument\";\n\nexport class Musician {\n    name = 'Musician';\n    ready: Promise<any>;\n    gain = 1;\n    instrument: Instrument;\n    constructor(instrument) {\n        if (!instrument) {\n            console.warn('musician has no instrument', this);\n        }\n        this.instrument = instrument;\n        this.ready = this.instrument ? this.instrument.ready : Promise.resolve();\n    }\n    play({ pulse, measures, settings }) {\n        console.log('play..', pulse, measures, settings);\n    }\n\n    getGain(value = 1) {\n        return value * this.gain * this.instrument.gain;\n    }\n}","import { randomElement } from \"../util\";\n\nconst off = () => randomElement([0, [0, 0, 2]], [6, 1]);\nconst eightFour = () => randomElement(\n    [[1, 0, 1], 1, [0, 0, 1, 1]],\n    [4, 2, 1]\n);\nconst eightOff = () => randomElement(\n    [[1, 0, 1], [0, 0, 1]],\n    [4, 1]\n);\nconst halfTriplet = () => randomElement(\n    [\n        [2, 0],\n        [[2, 0, 2], [0, 2, 0]],\n        [1, 1, 1, 1]\n    ],\n    [2, 1, 1]\n);\n\n\nexport const swing = {\n    name: 'Swing',\n    tempo: 130,\n    chords: ({ measure, settings }) => {\n        const r = Math.random() > 0.5 ? .6 : 0;\n        const t = `${settings.cycle}/${measure.length}`;\n        if (t === '4/1') {\n            return randomElement([\n                [[1, 0], [0, 0, 7], 0, 0],\n                [1, [0, 0, 2], 0, off()],\n                [[0, 0, 1], 0, 2, 0],\n                [[0, 0, 4], 0, 1, 0],\n                [2, 0, 0, 0],\n                [3, 0, 0, 0],\n                [1, 0, r, off()],\n                [[0, 0, 2], 0, r, 0],\n                [1.5, [0, 0, 2], 0, off()],\n            ]);//, [2, 1, 1]\n        }\n        if (t === '4/2') {\n            return randomElement([\n                [[1, 0], [0, 0, 7], 0, 0],\n                [1, [0, 0, 3], 0, 0],\n                [1, 0, 2, 0],\n                [2, 0, 1, 0],\n                [1, 0, .7, off()],\n                [[1, 0, 0], 0, .7, off()],\n                [[4, 0, 0], [0, 0, 2.8], 0, off()],\n            ]);\n        }\n\n        if (t === '4/3') {\n            return [1, [0, 0, 2], [0, 0, 4], 0];\n        }\n        if ('4/4') {\n            return randomElement([\n                [1, 1, 1, 1],\n                [[1, 0, 2], [0, 0, 2], 0, 1]\n            ]);\n        }\n    },\n    bass: () => randomElement([\n        [1, 1, 1, 1],\n    ]),\n    crash: ({ measures, index }) => {\n        const fill = index !== 0 && index % measures.length === 0;\n        if (fill) {\n            return [4, 0, 0, 0];\n        }\n        return [0, 0, 0, 0];\n    },\n    ride: ({ measures, index }) => {\n        return randomElement([\n            [.6, [.9, 0, 1], .6, [.9, 0, 1]],\n            [.6, [.4, 0, 1], .8, [0, 0, 1],],\n            [.6, .9, [.6, 0, 1], 1],\n            [.6, .9, .6, [.9, 0, 1]],\n        ], [3, 2, 1, 2])\n    },\n    hihat: () => [0, .8, 0, 1],\n    solo: () => randomElement([\n        [eightFour(), eightFour(), eightFour(), eightFour()],\n        [eightFour(), 2, 0, eightFour()],\n        [0, 0, eightFour(), eightFour()],\n        [[1, 0, 4], 0, eightFour(), eightFour()],\n        [3, 0, 0, eightFour()],\n        /* [0, 1, 2, 0], */\n        [...halfTriplet(), ...halfTriplet()],\n        [eightOff(), eightOff(), eightOff(), eightOff()],\n    ])\n    /* solo: () => [1, 1, 0, 1] */\n};","import { Distance } from 'tonal';\nimport { Chord, Note } from 'tonal';\nimport { getTonalChord, offbeatReducer, resolveChords, intervalMatrix, randomDelay, transposeToRange, sortMinInterval } from '../util';\nimport { Musician } from './Musician';\nimport { Instrument } from '../instruments/Instrument';\nimport { swing } from '../grooves/swing';\n\nexport default class Pianist extends Musician {\n    name = 'Pianist';\n    playedNotes = [];\n    playedPatterns = [];\n    playedChords = [];\n    defaults = { intelligentVoicings: true, groove: swing, noTonic: true };\n    min = Math.min;\n    rollFactor = 3; // how much keyroll effect? controls interval between notes\n    props: any;\n    range = ['C3', 'G5'];\n    instrument: Instrument;\n    constructor(instrument, props = {}) {\n        super(instrument);\n        this.props = Object.assign({}, this.defaults, props || {});\n    }\n\n    play({ pulse, measures, settings }) {\n        const groove = settings.groove || this.defaults.groove;\n        const grooveKey = 'chords';\n        // if no groove or groove without chords, or exact, play whats there\n        if (settings.exact || !groove || !groove[grooveKey]) {\n            if (!groove[grooveKey]) {\n                console.warn('Groove has no chords, Pianist will play exact.', groove);\n            }\n            /* walkMeasures(measures, (measure, path) => {\n                console.log('walk measure', measure, path);\n            }); */\n            //TODO: fix timing (exact mode)\n            return pulse.tickArray(measures, (t) => {\n                const measureLength = pulse.getMeasureLength();\n                this.playChord(t.value, { deadline: t.deadline, duration: measureLength * t.fraction, pulse });\n            });\n        }\n        // else, play groovy\n        const pattern = groove[grooveKey];\n        measures = measures\n            // generate random patterns\n            .map(measure => pattern({ measures, pulse, measure, settings }).slice(0, Math.floor(settings.cycle)))\n            // fill in chords\n            .map((pattern, i) => resolveChords(pattern, measures, [i]))\n            // fix chords at last offbeat\n            .reduce(offbeatReducer(settings), []);\n        pulse.tickArray(measures, ({ path, value, deadline }) => {\n            const measureLength = pulse.getMeasureLength();\n            const humanFactor = settings.bpm / (this.rollFactor || 1);\n            let interval = settings.arpeggio ? measureLength / settings.cycle : Math.random() / (humanFactor * 20);\n            if (path[0] % 2 === 0 && !path[1] && !path[2]) {\n                interval = Math.random() / humanFactor;\n            }\n            const duration = settings.arpeggio ? interval : value.fraction * measureLength;\n            const slice = settings.arpeggio ? Math.ceil(value.fraction / 1000 * 4) : null;\n            const gain = this.getGain(value.gain);\n            this.playChord(value.chord, { deadline, gain, duration, interval, slice, pulse });\n        }, settings.deadline);\n    }\n\n    getLastVoicing() {\n        return this.playedNotes.length ? this.playedNotes[this.playedNotes.length - 1] : null;\n    }\n\n    getVoicing(scorenotes, before, tonic?) {\n        if (!before) {\n            return scorenotes;\n        }\n        const near = intervalMatrix(before, scorenotes)\n            .map((intervals, index) => {\n                const smallest = [].concat(intervals).sort(sortMinInterval())[0];\n                if (!Distance.transpose(before[intervals.indexOf(smallest)], smallest)) {\n                    console.warn('ALARM', before[intervals.indexOf(smallest)], smallest, intervals);\n                }\n                return Distance.transpose(before[intervals.indexOf(smallest)], smallest);\n            }).filter(n => !!n)\n            .filter(n => Note.simplify(n, true));\n        return near && near.length ? near : scorenotes;\n    }\n\n\n    // plays the given notes at the given interval\n    playNotes(scorenotes, { tonic, deadline, interval, gain, duration, pulse }) {\n        if (this.props.intelligentVoicings && this.getLastVoicing()) {\n            scorenotes = this.getVoicing(scorenotes, this.getLastVoicing(), tonic);\n        }\n        scorenotes = transposeToRange(scorenotes, this.range);\n        this.playedNotes.push([].concat(scorenotes));\n        this.instrument.playNotes(scorenotes, { deadline, interval, gain, duration, pulse });\n    }\n\n    playChord(chord, settings) {\n        if (chord === 'x') { // repeat\n            chord = this.playedChords[this.playedChords.length - 1];\n        }\n        if (!chord || chord === '0') {\n            this.playedChords.push('')\n            return;\n        }\n        this.playedChords.push(chord);\n        chord = Chord.tokenize(getTonalChord(chord));\n\n        let notes = Chord.intervals(chord[1])\n            .map(i => i.replace('13', '6')) // TODO: better control over octave\n            .map(root => Distance.transpose(chord[0] + '3', root));\n        if (notes.length > 3 && settings.noTonic) {\n            notes = notes.slice(this.props.noTonic ? 1 : 0);\n        }\n        if (settings.slice) {\n            notes = notes.slice(0, settings.slice ? settings.slice : notes.length);\n        }\n        settings.deadline += 0.02 + randomDelay(5);\n        this.playNotes(notes, settings);\n    }\n}\n","import { Musician } from './Musician';\nimport { swing } from '../grooves/swing';\nimport { randomDelay } from '../util';\n\nexport default class Drummer extends Musician {\n    name = 'Drummer';\n    set = {\n        kick: 0,\n        snare: 1,\n        hihat: 2,\n        ride: 3,\n        crash: 4,\n        rimshot: 5\n    }\n    defaults = { groove: swing }\n\n    constructor(instrument) {\n        super(instrument);\n    }\n\n    play({ measures, pulse, settings }) {\n        const groove = settings.groove || this.defaults.groove;\n        Object.keys(groove)\n            .filter(t => Object.keys(this.set).includes(t)) // only use drum set patterns\n            .forEach(key => {\n                const patterns = measures\n                    .map((measure, index) => groove[key]({ measures, index, measure, settings, pulse })\n                        .slice(0, Math.floor(settings.cycle)));\n                pulse.tickArray(patterns, ({ deadline, value }) => {\n                    deadline += randomDelay(5);\n                    this.instrument.playKeys([this.set[key]], { deadline, gain: this.getGain(value) });\n                }, settings.deadline);\n            });\n    }\n}","import { resolveChords, getTonalChord, randomElement, randomDelay } from '../util';\nimport { Musician } from './Musician';\nimport { Chord, Distance } from 'tonal';\nimport { swing } from '../grooves/swing';\n\nexport default class Bassist extends Musician {\n    name = 'Bassist';\n    styles: { [key: string]: any };\n    defaults = { groove: swing }\n    playedChords: string[] = [];\n\n    constructor(instrument) {\n        super(instrument);\n    }\n\n    play({ measures, pulse, settings }) {\n        const groove = settings.groove || this.defaults.groove;\n        const pattern = groove['bass'];\n        if (!pattern) {\n            console.warn('no bass pattern found in groove', groove);\n            return;\n        }\n        measures = measures\n            .map(measure => pattern({ measures, measure, settings, pulse }).slice(0, Math.floor(settings.cycle)))\n            .map((pattern, i) => resolveChords(pattern, measures, [i]));\n        pulse.tickArray(measures, (tick) => {\n            this.playBass(tick, measures, pulse);\n        }, settings.deadline);\n    }\n\n    getStep(step, chord, octave = 2) {\n        const tokens = Chord.tokenize(getTonalChord(chord));\n        const interval = Chord.intervals(tokens[1]).find(i => parseInt(i[0]) === step);\n        return Distance.transpose(tokens[0] + octave, interval);\n    }\n\n    playBass({ value, cycle, path, deadline, interval }, measures, pulse) {\n        let chord = value.chord;\n        if (chord === 'N.C.') {\n            return;\n        }\n        if (chord === 'x') {\n            chord = this.playedChords[this.playedChords.length - 1];\n        }\n        if (!chord || chord === '0') {\n            this.playedChords.push('');\n            return;\n        }\n        this.playedChords.push(chord);\n        let note;\n        const steps = [1, randomElement([3, 5]), 1, randomElement([3, 5])];\n        const octave = 2;\n        if (value.value === 1 && chord.split('/').length > 1) {\n            note = chord.split('/')[1] + octave;\n        } else {\n            note = this.getStep(steps[path[1]], getTonalChord(chord), octave);\n        }\n        const duration = value.fraction * pulse.getMeasureLength();\n\n        deadline += randomDelay(10);\n        this.instrument.playNotes([note], { deadline, interval, gain: this.getGain(), duration, pulse });\n    }\n}","import { Instrument } from './Instrument';\nimport { adsr } from '../util';\n\nexport class Sampler extends Instrument {\n    buffers = {};\n    context: AudioContext;\n    overlap: any;\n    samples: Promise<any[]>;\n    sources: any;\n    gainNode: GainNode;\n    duration = 10000;\n    type = 'sine';\n    gain = 1;\n    attack = 0;\n    decay = 0;\n    sustain = 1;\n    release = .2;\n\n    constructor(options: any = {}) {\n        super(options);\n        this.gain = options.gain || this.gain;\n        this.gainNode = this.context.createGain();\n        this.gainNode.connect(this.context.destination);\n        this.duration = options.duration || this.duration;\n        // this.overlap = options.overlap;\n        if (options.samples) {\n            this.sources = options.samples;\n            this.ready = this.loadSources(options.samples)\n        }\n    }\n\n    // returns buffer from buffer cache or loads buffer data from source\n    getBuffer(src, context = this.context) {\n        if (this.buffers[src] && this.buffers[src].context === context) {\n            // console.log('buffer already present');\n            return Promise.resolve(this.buffers[src].buffer);\n        }\n        return fetch(src)\n            .then(res => res.arrayBuffer())\n            .then(buffer => {\n                return new Promise((resolve, reject) => {\n                    context.decodeAudioData(buffer, (decodedData) => {\n                        this.buffers[src] = { buffer: decodedData, context };\n                        resolve(decodedData);\n                    });\n                })\n            });\n    }\n\n    getSource(buffer, connect?) {\n        const source = this.context.createBufferSource();\n        connect = connect || this.gainNode;\n        source.buffer = buffer;\n        source.connect(connect);\n        return source;\n    }\n\n    getSources(sources, context = this.context) {\n        if (!this.hasLoaded(sources)) {\n            console.error('not all sources loaded!!!');\n            return [];\n        }\n        return sources.map(source => this.getSource(this.buffers[source].buffer));\n    }\n\n    // loads a sound file into the context\n    loadSource(src, context = this.context) {\n        return this.getBuffer(src, context)\n            .then(decodedData => this.getSource(decodedData));\n    }\n\n    // loads multiple sources into the context\n    loadSources(sources, context = this.context) {\n        sources.forEach((source, i) => {\n            if (!source) {\n                console.warn(`note at index ${i} cannot be played!`);\n            }\n        })\n        return Promise.all(sources.filter(source => !!source).map(source => this.loadSource(source, context)));\n    }\n\n    hasLoaded(sources, context = this.context) {\n        return sources.reduce((allLoaded, src) => {\n            return allLoaded && this.buffers[src] && this.buffers[src].context === context\n        }, true);\n    }\n\n    playSounds(sounds, deadline = this.context.currentTime, interval = 0) {\n        sounds.forEach((sound, i) => sound.start(deadline + interval * i))\n    }\n\n    playSource(source, settings) {\n        const gainNode = this.context.createGain();\n        if (!this.buffers[source]) {\n            console.warn('no buffer found for source', source);\n            return;\n        }\n        const sound = this.getSource(this.buffers[source].buffer, gainNode);\n        const [attack, decay, sustain, release, duration, gain] =\n            [\n                settings.attack || this.attack,\n                settings.decay || this.decay,\n                settings.sustain || this.sustain,\n                settings.release || this.release,\n                (settings.duration || this.duration) / 1000,\n                (settings.gain || 1) * this.gain\n            ]\n        const time = settings.deadline || this.context.currentTime;\n        //gainNode.gain.value = typeof settings.gain === 'number' ? settings.gain : this.gain;\n        gainNode.connect(this.mix);\n        adsr({ attack, decay, sustain, release, gain, duration }, time, gainNode.gain);\n        this.playSounds([sound], time) //, settings.interval\n    }\n\n    /* playSources(sources, deadline = 0, interval = 0) {\n        if (this.hasLoaded(sources, this.context)) {\n            this.playSounds(this.getSources(sources, this.context), deadline, interval)\n        } else {\n            console.warn('need to load');\n            this.loadSources(sources, this.context)\n                .then(sounds => this.playSounds(sounds, deadline, interval));\n        }\n    } */\n\n    playKeys(keys: number[], settings) {\n        super.playKeys(keys, settings);\n        keys.forEach((key, index) => {\n            if (settings.delay) {\n                settings.deadline += settings.delay;\n            }\n            this.playSource(this.sources[key], settings);\n        });\n    }\n}","export class Kick {\n    osc: any;\n    context: any;\n    gain: any;\n    constructor(context) {\n        this.context = context;\n    }\n    setup() {\n        this.osc = this.context.createOscillator();\n        this.gain = this.context.createGain();\n        this.osc.connect(this.gain);\n        this.gain.connect(this.context.destination)\n    }\n    trigger(time) {\n        this.setup();\n\n        this.osc.frequency.setValueAtTime(150, time);\n        this.gain.gain.setValueAtTime(1, time);\n\n        this.osc.frequency.exponentialRampToValueAtTime(0.01, time + 0.5);\n        this.gain.gain.exponentialRampToValueAtTime(0.01, time + 0.5);\n\n        this.osc.start(time);\n\n        this.osc.stop(time + 0.5);\n    }\n}","export class Snare {\n    context: any;\n    noise: any;\n    noiseEnvelope: any;\n    osc: any;\n    oscEnvelope: any;\n    constructor(context) {\n        this.context = context;\n    }\n    noiseBuffer() {\n        var bufferSize = this.context.sampleRate;\n        var buffer = this.context.createBuffer(1, bufferSize, this.context.sampleRate);\n        var output = buffer.getChannelData(0);\n\n        for (var i = 0; i < bufferSize; i++) {\n            output[i] = Math.random() * 2 - 1;\n        }\n\n        return buffer;\n    }\n    setup() {\n        this.noise = this.context.createBufferSource();\n        this.noise.buffer = this.noiseBuffer();\n        var noiseFilter = this.context.createBiquadFilter();\n        noiseFilter.type = 'highpass';\n        noiseFilter.frequency.value = 1000;\n        this.noise.connect(noiseFilter);\n\n        this.noiseEnvelope = this.context.createGain();\n        noiseFilter.connect(this.noiseEnvelope);\n\n        this.noiseEnvelope.connect(this.context.destination);\n        this.osc = this.context.createOscillator();\n        this.osc.type = 'triangle';\n\n        this.oscEnvelope = this.context.createGain();\n        this.osc.connect(this.oscEnvelope);\n        this.oscEnvelope.connect(this.context.destination);\n    };\n    trigger(time) {\n        this.setup();\n\n        this.noiseEnvelope.gain.setValueAtTime(1, time);\n        this.noiseEnvelope.gain.exponentialRampToValueAtTime(0.01, time + 0.2);\n        this.noise.start(time)\n\n        this.osc.frequency.setValueAtTime(100, time);\n        this.oscEnvelope.gain.setValueAtTime(0.7, time);\n        this.oscEnvelope.gain.exponentialRampToValueAtTime(0.01, time + 0.1);\n        this.osc.start(time)\n\n        this.osc.stop(time + 0.2);\n        this.noise.stop(time + 0.2);\n    };\n}","import { Instrument } from \"./Instrument\";\nimport { Kick } from \"./Kick\";\nimport { Snare } from \"./Snare\";\n\nexport class PlasticDrums extends Instrument {\n    kick: Kick;\n    snare: Snare;\n    keys: any[];\n\n    constructor(options) {\n        super(options);\n        this.keys = [\n            new Kick(this.context),\n            new Snare(this.context)\n        ];\n    }\n\n    playKeys(keys, { deadline, gain, value }) {\n        const sounds = keys.filter(key => !!this.keys[key]).map(key => this.keys[key]);\n        if (sounds.length < keys.length) {\n            const missing = keys.filter(key => !this.keys[key]);\n            console.warn('PlasticDrums missing keys:', missing);\n        }\n        sounds.forEach(sound => sound.trigger(deadline));\n    }\n}","import { Synthesizer } from './instruments/Synthesizer';\n\nexport class Metronome {\n    sampler: any;\n    ready: Promise<any[]>;\n    synth: Synthesizer;\n\n    constructor(mix) {\n        this.synth = new Synthesizer({ type: 'sine', gain: 1, mix });\n        this.ready = this.synth.ready;\n    }\n    count(pulse, bars = 1) {\n        const count = new Array(bars).fill(\n            [new Array(pulse.props.cycle).fill(1)]\n        );\n        return pulse.tickArray(count, ({ path, deadline }) => {\n            this.synth.playKeys([path[2] === 0 ? 90 : 78], { deadline, duration: 0.01, attack: .01, release: .01, decay: .01, sustain: 1 });\n        });\n    }\n}","\ndeclare type ImprovisationRuleFactory<T> = () => ImprovisationRule<T>;\n\ndeclare type ImprovisationRuleFactories = { [key: string]: ImprovisationRuleFactory<any> };\n\ndeclare type DynamicImprovisationRule<T> = (factories: { [key: string]: ImprovisationRuleFactory<any> }) => T;\n\ndeclare type ImprovisationRule<T> = T | DynamicImprovisationRule<T>;\nexport declare type ImprovisationRules = { [key: string]: ImprovisationRule<any> };\n\ndeclare type ImprovisationReducer = (rules: ImprovisationRules) => ImprovisationRules;\n\nexport class Improvisation {\n    cache = {};\n    constructor(public rules: ImprovisationRules) { }\n\n    get(key: string, fromCache = false) {\n        if (fromCache) {\n            return this.cache[key];\n        }\n        let rule = this.rules[key];\n        if (rule === undefined) {\n            console.error('could not resolve key', key, '!');\n        }\n        if (typeof rule === 'function') {\n            rule = rule(this.getRuleFactories(key));\n        }\n        this.cache[key] = rule;\n        return rule;\n    }\n\n    enhance(rules: ImprovisationRules) {\n        return new Improvisation(Object.assign({},\n            this.rules,\n            rules\n        ));\n    }\n\n    mutate(reducer: ImprovisationReducer) {\n        this.rules = Object.assign({},\n            this.rules,\n            reducer(this.getRuleFactories())\n        );\n        return this;\n    }\n\n    getRuleFactories(originKey?: string): ImprovisationRuleFactories {\n        return Object.keys(this.rules)\n            .map(key => ({ key, factory: () => this.get(key) }))\n            .reduce((factories, { key, factory }) => (\n                Object.assign({},\n                    factories,\n                    { [key]: factory },\n                    (originKey ? { [originKey]: () => this.cache[originKey] } : {})\n                )\n            ), {})\n    }\n}\n\n/**\n * \n * methods: { [method: string]: ImprovisationRules } = {\n        guideTones: {\n            pattern: [3, 7]\n        },\n        flippedGuideTones: {\n            pattern: [3, 7],\n            flip: true,\n        },\n        chordTones: {\n            pattern: [1, 3, 7],\n            variance: .5,\n            variety: .5,\n            drill: .5,\n            flip: ({ drill }) => Math.random() * Math.abs(drill()) > .5,\n        }\n    }\n */","import { swing } from \"../grooves/swing\";\nimport { Note } from 'tonal';\nimport { getPatternInChord, randomElement, getNearestTargets, transposeToRange, getDigitalPattern, shuffleArray, getRangePosition, getDegreeInChord, otherDirection } from \"../util\";\nimport { Improvisation } from \"./Improvisation\";\n\nexport const permutator = new Improvisation({\n    groove: swing,\n    groovePattern: ({ groove }) => groove()['solo'] || ((m) => {\n        return m.measure.map(() => [1]);\n    }),\n    octave: 4,\n    reach: 1,\n    lineBreaks: false,\n    direction: null,\n    force: false,\n    flip: false, // if true, the voice leading will be stretched out\n    playedNotes: [],\n    fixRange: true,\n    startRandom: false,\n    range: ['Bb3', 'Bb5'],\n    /* chanceCurve: () => (distance, length) => (length - distance) * 10, */\n    firstNoteInPattern: ({ pattern, chord }) => getPatternInChord([pattern()[0]], chord()),\n    firstNote: ({ randomNote, firstNoteInPattern, startRandom, octave }) => {\n        return startRandom() ? randomNote() : firstNoteInPattern() + octave();\n    },\n    lastNote: ({ playedNotes }) => playedNotes().length ? playedNotes()[0] : null,\n    material: ({ pattern, chord }) => getPatternInChord(pattern(), chord()),\n    randomNote: ({ material, octave }) => randomElement(material()) + octave(),\n    nextNotes: ({ fixRange, firstNote, chord, reach, lineBreaks, lastNote, range, material, direction, force, flip }) => {\n        let note;\n        if (!lastNote() || lineBreaks()) {\n            note = firstNote();\n        } else {\n            const choices = material();\n            if (!choices.length) {\n                console.warn('no choice..')\n                return;\n            }\n            let targets = getNearestTargets(lastNote(), material(), direction(), force(), flip());\n            targets = targets.slice(0, reach());\n            note = randomElement(targets);\n            note = Note.simplify(note, true);\n        }\n        if (fixRange()) {\n            note = transposeToRange([note], range())[0];\n        }\n        const step = getDegreeInChord(note, chord());\n        /* console.log(`${step} in ${chord()} = ${note}`); */\n        return [note];\n    }\n});\n\n/** MODIFIERS */\n\nconst getStraightBar = (notes, cycle = 4) => {\n    return new Array(cycle).fill(\n        new Array(Math.ceil(notes / cycle)).fill(1)\n    )\n}\n\nconst straightNotes = (n, cycle = 4) => ({\n    groove: null,\n    groovePattern: () => ((m) =>\n        getStraightBar(n, cycle)\n    ),\n});\n\nconst fixedNotesPerChord = (n, cycle = 4) => ({\n    groove: null,\n    groovePattern: () => ((m) => m.measure.map(() =>\n        getStraightBar(n, cycle)\n    )),\n});\n\nconst pendulum = (defaultDirection = 'up', softForce = false, comfort = .4) => ({\n    exclude: 1, // only last note cannot be picked again\n    force: !softForce ? true : ({ lastNote, range }) => {\n        const position = getRangePosition(lastNote(), range());\n        return position < 0 || position > 1; // only force if out of range..    \n    }, // force the current direction\n    fixRange: false, // do not transpose automatically to range (direction will do that)\n    direction: ({ lastNote, range, direction, barNumber, isBarStart }) => {\n        const position = getRangePosition(lastNote(), range());\n        const comfortSwitchBars = 1; // switch direction each x bars when in comfort zone\n        const isComfortZone = (position > comfort && position < 1 - comfort);\n        if (\n            (position <= 0 && direction() === 'down') ||\n            (position >= 1 && direction() === 'up') ||\n            (isComfortZone && isBarStart() && barNumber() % comfortSwitchBars === 0)\n        ) {\n            /* console.log('change direction', otherDirection(direction(), defaultDirection)); */\n            return otherDirection(direction(), defaultDirection);\n        }\n        return direction() || defaultDirection;\n    }\n});\n\nconst beatPattern = ({ pattern, on, off, barStart }:\n    { pattern?, on?, off?, barStart?}) => ({\n        beatPattern: ({ isBarStart, isOffbeat }) => {\n            if (isBarStart()) {\n                return barStart || on || pattern;\n            } else if (!isOffbeat()) {\n                return on || pattern;\n            }\n            return off || pattern;\n        },\n        pattern: ({ beatPattern }) => beatPattern(),\n    });\n\nconst notesPerChord = (n) => ({\n    ...fixedNotesPerChord(1, n)\n});\n\nconst patternPractise = (direction = 'up', notes = 4, lineBreaks = false) => ({\n    ...straightNotes(notes),\n    firstNoteInPattern: ({ pattern, chord }) =>\n        getPatternInChord(\n            direction === 'up' ? [pattern()[0]] : pattern().slice(-1)\n            , chord()\n        ),\n    direction,\n    force: true,\n    fixRange: false,\n    lineBreaks: ({ isBarStart }) => lineBreaks ? isBarStart() : false,\n    exclude: 1,\n    reach: 1,\n});\n\n/** FORMULAS */\n\n\nexport const advancedPermutator = permutator.enhance({\n    drill: .5, // how persistent should the current direction be followed?\n    direction: ({ drill }) => drill() > 0 ? 'up' : 'down',\n    force: ({ drill }) => Math.random() * Math.abs(drill()) > .5,\n    exclude: 1,\n    reach: 1,\n    material: ({ pattern, chord, playedNotes, exclude }) => {\n        const all = getPatternInChord(pattern(), chord());\n        if (!playedNotes().length) {\n            return all;\n        }\n        const excludeNotes = playedNotes()\n            .slice(0, exclude())\n            .map(n => Note.pc(n));\n        return all.filter(n => !excludeNotes.includes(n));\n    }\n});\n\nexport const guideTones = advancedPermutator.enhance({\n    name: 'Guide Lines',\n    ...notesPerChord(1),\n    /* direction: 'down', */\n    ...pendulum('down', true),\n    pattern: [3, 7],\n    exclude: 0, // 0 > can repeat notes\n    // pattern: ({ isBarStart, barNumber }) => isBarStart() ? [1] : barNumber() % 2 === 0 ? [3] : [7]\n});\n\nexport const guideTonesFlipped = guideTones.enhance({\n    name: 'Distant Guide Tones',\n    flip: true\n});\n\n\nexport const chordTones = advancedPermutator.enhance({\n    name: 'Only Chord Tones',\n    pattern: [1, 3, 5, 7],\n    drill: .75, // how persistent should the current direction be followed?\n    direction: ({ drill }) => drill() > 0 ? 'up' : 'down',\n});\n\n/* export const digitalPattern = advancedPermutator.enhance({\n    pattern: ({ chord }) => getDigitalPattern(chord()),\n    ...pendulum(),\n    ...straightNotes(4)\n}); */\n\n\nexport const fullScale = advancedPermutator.enhance({\n    name: 'Heptatonic',\n    /* ...beatPattern({ off: [2, 3, 4, 5, 6, 7], on: [1, 3, 5, 7] }), */\n    ...beatPattern({ on: [1, 3, 5, 7], off: [1, 2, 3, 4, 5, 6, 7] }),\n    /* ...beatPattern({ on: [3, 7], off: [9, 11, 13] }), */\n    /* ...beatPattern({ on: [9], off: [9, 11, 13] }), */\n    /* ...beatPattern({ on: [1, 3, 7], off: [9, 11, 13] }), */\n    ...pendulum(),\n    /* exclude: Math.floor(Math.random() + .5), */\n    /* exclude: 1,\n    reach: 2, */\n    /* reach: Math.round(Math.random() * 1 + 1) */\n});\n\nexport const scalePendulum = advancedPermutator.enhance({\n    name: 'Heptatonic Pendulum',\n    /* ...straightNotes(8), */\n    ...beatPattern({ pattern: [1, 2, 3, 4, 5, 6, 7] }),\n    ...pendulum(),\n    ...straightNotes(8),\n});\n\n\nexport const digitalPattern = advancedPermutator.enhance({\n    name: 'Digital Patterns',\n    pattern: ({ chord }) => getDigitalPattern(chord()),\n    ...pendulum('up', true, .2),\n    exclude: 2,\n    reach: 3,\n});\n\nexport const digitalPendulum = advancedPermutator.enhance({\n    name: 'Digital Pendulum',\n    pattern: ({ chord }) => getDigitalPattern(chord()),\n    ...pendulum('up', false, 1),\n    ...straightNotes(8),\n    /* lineBreaks: ({ isBarStart }) => isBarStart(), */\n    exclude: 1,\n    reach: 1,\n});\nexport const digitalWalker = advancedPermutator.enhance({\n    name: 'Digital Fourths',\n    pattern: ({ chord }) => getDigitalPattern(chord()),\n    ...pendulum('up', true, .4),\n    ...straightNotes(4),\n    lineBreaks: false,\n    /* lineBreaks: ({ isBarStart }) => isBarStart(), */\n    exclude: 2,\n    reach: 2,\n});\n\nexport const digitalPractiseUp = advancedPermutator.enhance({\n    name: 'Digital Practise Up',\n    ...patternPractise('up', 4, true),\n    pattern: ({ chord }) => getDigitalPattern(chord()),\n    /* ...beatPattern({ pattern: ({ chord }) => getDigitalPattern(chord()), barStart: [1] }), */\n});\n\nexport const digitalPractiseDown = advancedPermutator.enhance({\n    name: 'Digital Practise Down',\n    ...patternPractise('down', 4, true),\n    pattern: ({ chord }) => getDigitalPattern(chord()),\n    /* ...beatPattern({ pattern: ({ chord }) => getDigitalPattern(chord()), barStart: [1] }), */\n});\n\nexport const heptatonicPractise = advancedPermutator.enhance({\n    name: 'Heptatonic Practise',\n    ...patternPractise('up', 8, false),\n    ...beatPattern({ barStart: [1], on: [3, 5, 7], off: [1, 2, 3, 4, 5, 6, 7] }),\n});\n\nexport const defaultMethod = guideTones;\n\nexport const improvisationMethods = {\n    guideTones,\n    guideTonesFlipped,\n    chordTones,\n    digitalPattern,\n    digitalPendulum,\n    digitalWalker,\n    fullScale,\n    scalePendulum,\n    digitalPractiseUp,\n    digitalPractiseDown,\n    /* heptatonicPractise, */\n}","import { resolveChords, randomElement, getNearestTargets, transposeToRange, getPatternInChord, getGuideTones, isBarStart, isFormStart, isOffbeat } from '../util';\nimport { Musician } from './Musician';\nimport { swing } from '../grooves/swing';\nimport { Improvisation } from '../improvisation/Improvisation';\nimport { defaultMethod } from '../improvisation/methods';\n\nexport default class Improvisor extends Musician {\n    name = 'Improvisor';\n    defaultMethod = defaultMethod;\n    method: Improvisation;\n\n    constructor(instrument, method?) {\n        super(instrument);\n        method = method || this.defaultMethod;\n        this.method = method/* .enhance({\n            range: ['F3', 'F5']\n        }) */;\n    }\n\n    useMethod(method) {\n        this.method = method;\n    }\n\n    play({ measures, pulse, settings }) {\n        if (settings.method) {\n            this.useMethod(settings.method);\n        }\n        const groove = settings.groove || swing;\n        this.method.mutate(() => ({ groove, playedNotes: [] }));\n        const pattern = this.method.get('groovePattern');\n        measures = measures\n            .map(measure => pattern({ measures, measure, settings, pulse })\n                /*     .slice(0, Math.floor(settings.cycle)) */\n            )\n            .map((pattern, i) => resolveChords(pattern, measures, [i]));\n        pulse.tickArray(measures, (tick) => {\n            this.improvise(tick, measures, pulse);\n        }, settings.deadline);\n    }\n\n    improvise({ value, deadline, interval }, measures, pulse) {\n        let chord = value.chord;\n        if (chord === 'N.C.') {\n            return;\n        }\n        this.method.mutate(() => ({\n            chord,\n            isFormStart: isFormStart(value.path),\n            isBarStart: isBarStart(value.path),\n            isOffbeat: isOffbeat(value.path),\n            // TODO: is ChordStart\n            barNumber: value.path[0]\n        }))\n            .mutate(({ nextNotes, playedNotes }) => {\n                const pick = nextNotes();\n                const duration = value.fraction * pulse.getMeasureLength();\n                this.instrument.playNotes(pick, { deadline, interval, gain: this.getGain(), duration, pulse });\n                return {\n                    playedNotes: [].concat(pick, playedNotes())\n                }\n            });\n\n\n    }\n}","import { randomSynth } from './util';\nimport Band from './Band';\nimport Pianist from './musicians/Pianist';\nimport Bassist from './musicians/Bassist';\nimport Drummer from './musicians/Drummer';\nimport { PlasticDrums } from './instruments/PlasticDrums';\nimport { Metronome } from './Metronome';\nimport { Pulse } from './Pulse';\nimport Permutator from './musicians/Permutator';\nimport Guide from './musicians/Improvisor';\nimport Improvisor from './musicians/Improvisor';\n\nexport class Trio extends Band {\n    pianist: Pianist;\n    bassist: Bassist;\n    drummer: Drummer;\n    soloist: Improvisor;\n    mix: any;\n    instruments: { piano: any; bass: any; drums: any; };\n    metronome: Metronome;\n\n    constructor({ context, piano, bass, drums, onMeasure, solo }: { context, [key: string]: any }) {\n        super({ context, onMeasure });\n        this.mix = this.setupMix(this.context);\n        const instruments = this.setupInstruments({ piano, bass, drums })\n        this.pianist = new Pianist(instruments.piano);\n        this.bassist = new Bassist(instruments.bass);\n        this.drummer = new Drummer(instruments.drums);\n        this.musicians = [this.pianist, this.bassist, this.drummer];\n        if (solo) {\n            // this.soloist = new Permutator(instruments.piano);\n            this.soloist = new Improvisor(instruments.piano);\n            this.musicians.push(this.soloist);\n        }\n        this.metronome = new Metronome(this.mix);\n    }\n\n    setupMix(context) {\n        const mix = context.createGain();\n        mix.gain.value = 0.9;\n        mix.connect(context.destination);\n        return mix;\n    }\n\n    setupInstruments({ piano, bass, drums }) {\n        bass = bass || randomSynth(this.mix);\n        piano = piano || randomSynth(this.mix);\n        drums = drums || new PlasticDrums({ mix: this.mix });\n        return { piano, bass, drums };\n    }\n\n    play(measures, settings) {\n        this.pulse = settings.pulse || new Pulse(settings);\n        return this.count(this.pulse, settings.metronome ? null : 0).then((tick) => {\n            settings.deadline = tick.deadline;\n            // settings.delay = deadline - this.context.currentTime;\n            super.play(measures, settings);\n        })\n    }\n\n    count(pulse, bars = 1) {\n        if (pulse.getMeasureLength() < 1.5) {\n            bars *= 2; //double countin bars when countin would be shorter than 1.5s\n        }\n        return this.metronome.count(pulse, bars);\n    }\n}\n","import { Sheet, Measure, renderSheet, getLatestMeasure } from \"./Song\";\n\n// extension of https://github.com/daumling/ireal-renderer/blob/master/src/ireal-renderer.js\n\nexport class RealParser {\n    /**\n     * The RegExp for a complete chord. The match array contains:\n     * 1 - the base note\n     * 2 - the modifiers (+-ohd0123456789 and su for sus)\n     * 3 - any comments (may be e.g. add, sub, or private stuff)\n     * 4 - the \"over\" part starting with a slash\n     * 5 - the top chord as (chord)\n     * @type RegExp\n     */\n\n    chordRegex = /^([ A-GW][b#]?)((?:sus|[\\+\\-\\^\\dhob#])*)(\\*.+?\\*)*(\\/[A-G][#b]?)?(\\(.*?\\))?/;\n\n    regExps = [\n        /^\\*[a-zA-Z]/,\t\t\t\t\t\t\t// section\n        /^T\\d\\d/,\t\t\t\t\t\t\t\t// time measurement\n        /^N./,\t\t\t\t\t\t\t\t\t// repeat marker\n        /^<.*?>/,\t\t\t\t\t\t\t\t// comments\n        /^ \\(.*?\\)/,\t\t\t\t\t\t\t// blank and (note)\n        this.chordRegex,\t\t\t\t// chords\n        /^LZ/,\t\t\t\t\t\t\t\t\t// 1 cell + right bar\n        /^XyQ/,\t\t\t\t\t\t\t\t\t// 3 empty cells\n        /^Kcl/\t\t\t\t\t\t\t\t\t// repeat last bar\n    ];\n\n    replacements = {\n        \"LZ\": [\" \", \"|\"],\n        \"XyQ\": [\" \", \" \", \" \"],\n        \"Kcl\": [\"|\", \"x\", \" \"]\n    };\n    raw: string;\n    sections: any; //chords json\n    bars: any;\n    tokens: any;\n    sheet: Sheet;\n    measures: any;\n\n    constructor(raw) {\n        this.raw = raw;\n        this.tokens = this.parse(raw);\n        this.sheet = this.getSheet(this.tokens);\n        this.measures = renderSheet(this.sheet);\n        return raw;\n    }\n\n\n    getChord(iRealChord) {\n        return iRealChord.note + iRealChord.modifiers + (iRealChord.over ? '/' + this.getChord(iRealChord.over) : '');\n    }\n\n    getSheet(tokens): Sheet {\n        const parsed = tokens\n            .reduce((current, token, index, array) => {\n                const lastBarEnded = ['{', '|', '[', '||' /* 'Z',  *//* , ']' */]\n                    .includes(token.bars || token.token);\n                let signs = token.annots || [];\n                const repeatStart = (token.bars || token.token) === '{';\n                const repeatEnd = (token.bars || token.token) === '}';\n                if (repeatStart) {\n                    signs.push('{');\n                }\n                if (repeatEnd) {\n                    signs.push('}');\n                }\n                // current.measure ends\n                if (lastBarEnded) {\n                    if (current.measure) {\n                        // simplify measure if no signs\n                        /* if (Object.keys(current.measure).find(k=>k)) {\n                            current.measure = current.measure.chords;\n                        } */\n                        current.measures.push(current.measure);\n                    }\n                    current.measure = { chords: [] };\n                }\n\n                const sectionStart = signs.find(a => a.match(/^\\*[a-zA-Z]/));\n                if (sectionStart) {\n                    signs = signs.filter(s => s !== sectionStart);\n                    current.measure.section = sectionStart.replace('*', '');\n                }\n\n                const hasCodaSign = signs.includes('Q');\n                if (hasCodaSign) {\n                    signs = signs.filter(s => s !== 'Q');\n                    current.measure.coda = true;\n                }\n\n                const houseStart = signs.find(s => !!s.match(/^N./));\n                if (houseStart) {\n                    signs = signs.filter(s => s !== houseStart);\n                    current.measure.house = parseInt(houseStart.replace('N', ''));\n                }\n\n                const time = signs.find(a => a.match(/^T\\d\\d/));\n                if (time) {\n                    signs = signs.filter(s => s !== time);\n                    current.measure.time = time.replace('T', '');\n                }\n\n                if (token.chord) {\n                    current.measure.chords.push(this.getChord(token.chord));\n                } else if (token.token === 'n') {\n                    current.measure.chords.push(0);\n                }\n\n                const last = current.measures[current.measures.length - 1];\n                if (last && last.chords[0] === 'r') {\n                    last.chords = current.measures[current.measures.length - 3].chords;\n                    current.measure.chords = current.measures[current.measures.length - 2].chords;\n                }\n                if (last && current.measure.chords[0] === 'x') {\n                    current.measure.chords = [].concat(last.chords);\n                    current.measure.idle = true;\n                }\n\n                if (signs.length) {\n                    current.measure.signs = (current.measure.signs || [])\n                        .concat(signs);\n                }\n                if (token.comments.length) {\n                    current.measure.comments = (current.measure.comments || [])\n                        .concat(token.comments.map(c => c.trim()));\n                }\n                return current;\n            }, { measure: null, signs: null, measures: [] });\n        if (parsed.measure.chords.length) {\n            parsed.measures.push(parsed.measure);\n        }\n        return parsed.measures;\n    }\n\n\n    parse(raw: string): any {\n        var text = raw;\n        var arr = [], headers = [], comments = [];\n        var i;\n        text = text.trim();\n        // text = text.trimRight();\n        while (text) {\n            var found = false;\n            for (i = 0; i < this.regExps.length; i++) {\n                var match = this.regExps[i].exec(text);\n\n                if (match) {\n                    found = true;\n                    if (match.length <= 2) {\n                        const replacement = match[0];\n                        var repl = this.replacements[replacement];\n                        arr = arr.concat(repl ? repl : [replacement]);\n                        text = text.substr(replacement.length);\n                    }\n                    else { // a chord\n                        arr.push(match);\n                        text = text.substr(match[0].length);\n                    }\n                    break;\n                }\n            }\n            if (!found) {\n                // ignore the comma separator\n                if (text[0] !== ',')\n                    arr.push(text[0]);\n                text = text.substr(1);\n            }\n        }\n        //\t\tconsole.log(arr);\n        // pass 2: extract prefixes, suffixes, annotations and comments\n        var out = [];\n        var obj = this.newToken(out);\n        for (i = 0; i < arr.length; i++) {\n            var token = arr[i];\n            if (token instanceof Array) {\n                obj.chord = this.parseChord(token);\n                token = \" \";\n            }\n            switch (token[0]) {\n                case ',': token = null; break; // separator\n                case 'S':\t// segno\n                case 'T':\t// time measurement\n                case 'Q':\t// coda\n                case 'N':\t// repeat\n                case 'U':\t// END\n                case 's':\t// small\n                case 'l':\t// normal\n                case 'f':\t// fermata\n                case '*': obj.annots.push(token); token = null; break;\n                case 'Y': obj.spacer++; token = null; break;\n                case 'r':\n                case 'x':\n                case 'W':\n                    obj.chord = new iRealChord(token, \"\", null, null);\n                    break;\n                case '<':\n                    token = token.substr(1, token.length - 2);\n                    token = token.replace(/XyQ/g, \"   \");\t// weird; needs to be done\n                    obj.comments.push(token);\n                    token = null; break;\n                default:\n            }\n            if (token) {\n                if (\"]}Z\".indexOf(arr[i + 1]) >= 0)\n                    obj.bars += arr[++i];\n                if (\"{[|\".indexOf(token) >= 0) {\n                    obj.bars += token; token = null;\n                }\n            }\n            if (token && i < arr.length - 1) {\n                obj.token = token;\n                obj = this.newToken(out);\n            }\n        }\n        return out;\n    }\n\n\n\n    parseChord(match) {\n        var note = match[1] || \" \";\n        var modifiers = match[2] || \"\";\n        var comment = match[3] || \"\";\n        if (comment)\n            modifiers += comment.substr(1, comment.length - 2).replace(\"XyQ\", \"   \");\n        var over = match[4] || \"\";\n        if (over[0] === '/')\n            over = over.substr(1);\n        var alternate = match[5] || null;\n        if (alternate) {\n            match = this.chordRegex.exec(alternate.substr(1, alternate.length - 2));\n            if (!match)\n                alternate = null;\n            else\n                alternate = this.parseChord(match);\n        }\n        // empty cell?\n        if (note === \" \" && !alternate && !over)\n            return null;\n        if (over) {\n            var offset = (over[1] === '#' || over[1] === 'b') ? 2 : 1;\n            over = new iRealChord(over.substr(0, offset), over.substr(offset), null, null);\n        }\n        else\n            over = null;\n        return new iRealChord(note, modifiers, over, alternate);\n    }\n\n    newToken(arr) {\n        var obj = new iRealToken;\n        arr.push(obj);\n        return obj;\n    }\n\n}\n\nclass iRealChord {\n    note: any;\n    modifiers: any;\n    over: any;\n    alternate: any;\n    constructor(note, modifiers, over, alternate) {\n        this.note = note;\n        this.modifiers = modifiers;\n        this.over = over;\n        this.alternate = alternate;\n    }\n}\n\nclass iRealToken {\n    chord: any;\n    spacer: number;\n    bars: string;\n    comments: any[];\n    token: any;\n    annots: any[];\n    constructor() {\n        this.annots = [];\n        this.comments = [];\n        this.bars = \"\";\n        this.spacer = 0;\n        this.chord = null;\n    }\n}","import { Instrument } from './Instrument';\nimport { Note } from 'tonal';\n\nexport class MidiOut extends Instrument {\n    gain = 0.9;\n    midi;\n    output = 'Scarlett 6i6 USB';\n\n    constructor(props: any) {\n        super(props);\n        this.gain = props.gain || this.gain;\n        if (!navigator['requestMIDIAccess']) {\n            console.warn('This browser does not support WebMIDI!');\n            return;\n        }\n        navigator['requestMIDIAccess']().then((midi) => this.midiInit(midi), this.midiFail);\n    }\n\n    midiInit(midi) {\n        console.log('midi init', midi);\n        console.log(midi.outputs.size, 'outputs');\n        console.log(midi.inputs.size, 'inputs');\n        this.midi = midi;\n        midi.outputs.forEach(output => {\n            console.log('ouput', output);\n        });\n        midi.inputs.forEach(input => {\n            console.log('input', input);\n            input.onmidimessage = this.getMidiMessage;\n        });\n        this.onTrigger = ({ on, off }) => {\n            on.forEach(({ midi, gain, deadline }) => {\n                this.noteOn(midi, Math.round(gain * 127), deadline);\n            });\n            off.forEach(event => {\n                this.noteOff(event.midi, Math.round(event.gain * 127));\n            });\n        }\n    }\n\n    midiFail() {\n        console.warn('could not get midi access!');\n    }\n\n    getMidiMessage(message) {\n        console.log('midi data', message.data, 'message', message);\n    }\n\n    send(message, deadline) {\n        if (!this.midi) {\n            console.warn('tried to play keys but midi was not ready');\n            return;\n        }\n        console.log('send', message, deadline);\n\n        this.midi.outputs.forEach(output => {\n            if (true || output.name === this.output) {\n                output.send(message);\n            }\n        });\n    }\n\n    noteOn(key, velocity = 127, deadline = 0) {\n        this.send([144, key, 0x7f], deadline); //velocity\n    }\n    noteOff(key, velocity = 127, deadline = 0) {\n        this.send([144, key, 0], deadline);//velocity\n    }\n\n    playKeys(keys: number[], settings: any = {}) {\n        /* if (!this.midi) {\n            console.warn('tried to play keys but midi was not ready');\n            return;\n        }\n        this.midi.outputs.forEach(output => {\n            console.log(keys, 'send to', output);\n            keys.forEach(key => {\n                output.send([144, key, 9]);\n            })\n        });\n    } */\n    }\n}","import { resolveChords, getDigitalPattern, randomDelay, randomElement, getGuideTones, getPatternInChord, renderDigitalPattern } from '../util';\nimport { Musician } from './Musician';\nimport { Chord, Distance } from 'tonal';\nimport { swing } from '../grooves/swing';\n\nexport default class Permutator extends Musician {\n    styles: { [key: string]: any };\n    defaults = { groove: swing }\n    playedChords: string[] = [];\n\n    constructor(instrument) {\n        super(instrument);\n    }\n\n    play({ measures, pulse, settings }) {\n        const groove = settings.groove || this.defaults.groove;\n\n        const pattern = groove['solo'] || ((m) => {\n            return m.measure.map(c => [1, 1, 1, 1]);\n        }); // dont changes anything\n\n        measures = measures\n            .map(measure => pattern({ measures, measure, settings, pulse }).slice(0, Math.floor(settings.cycle)))\n            .map((pattern, i) => resolveChords(pattern, measures, [i]));\n        pulse.tickArray(measures, (tick) => {\n            this.playPermutations(tick, measures, pulse);\n        }, settings.deadline);\n    }\n\n    playPermutations({ value, cycle, path, deadline, interval }, measures, pulse) {\n        let chord = value.chord;\n        if (chord === 'N.C.') {\n            return;\n        }\n        if (chord === 'x') {\n            chord = this.playedChords[this.playedChords.length - 1];\n        }\n        if (!chord || chord === '0') {\n            this.playedChords.push('');\n            return;\n        }\n        this.playedChords.push(chord);\n\n        // digital patterns\n        const notes = renderDigitalPattern(chord);\n        const note = randomElement(notes) + '5';\n\n        // all scale notes with different chances\n        /* const notes = getPatternInChord([1, 2, 3, 4, 5, 6, 7], chord);\n        const note = randomElement(notes, [4, 3, 6, 1, 3, 4, 6]) + '5'; */\n\n        /* console.log('beat (starting from zero)', path[1]); */\n        const duration = value.fraction * pulse.getMeasureLength();\n\n        /* deadline += randomDelay(10); */\n        this.instrument.playNotes([note], { deadline, interval, gain: 1, duration, pulse });\n    }\n}","import Band from './Band';\nimport Pianist from './musicians/Pianist';\nimport Drummer from './musicians/Drummer';\nimport Bassist from './musicians/Bassist';\nimport { Instrument } from './instruments/Instrument';\nimport { Musician } from './musicians/Musician';\nimport { Synthesizer } from './instruments/Synthesizer';\nimport { Sampler } from './instruments/Sampler';\nimport { PlasticDrums } from './instruments/PlasticDrums';\nimport { Trio } from './Trio';\nimport * as util from './util';\nimport { Pulse } from './Pulse';\nimport { RealParser } from './RealParser';\nimport { MidiOut } from './instruments/MidiOut';\nimport Permutator from './musicians/Permutator';\n\nexport {\n    Trio,\n    Band,\n    Pianist,\n    Bassist,\n    Drummer,\n    Permutator,\n    Instrument,\n    Musician,\n    Synthesizer,\n    Sampler,\n    MidiOut,\n    PlasticDrums,\n    Pulse,\n    util,\n    RealParser\n};"]}