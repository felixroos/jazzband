{"version":3,"sources":["../../../.nvm/versions/node/v8.11.1/lib/node_modules/parcel/node_modules/process/browser.js","../node_modules/waaclock/lib/WAAClock.js","../node_modules/waaclock/index.js","Pulse.ts","Band.ts","../node_modules/tonal-note/build/es6.js","../node_modules/tonal-array/build/es6.js","../node_modules/tonal-interval/build/es6.js","../node_modules/tonal-distance/build/es6.js","0","../node_modules/tonal-pcset/build/es6.js","../node_modules/tonal-dictionary/build/es6.js","../node_modules/tonal-scale/build/es6.js","../node_modules/tonal-chord/build/es6.js","../node_modules/tonal/index.js","instruments/Instrument.ts","instruments/Synthesizer.ts","util.ts","musicians/Musician.ts","grooves/swing.ts","musicians/Pianist.ts","musicians/Drummer.ts","musicians/Bassist.ts","instruments/Sampler.ts","instruments/Kick.ts","instruments/Snare.ts","instruments/PlasticDrums.ts","Metronome.ts","Trio.ts","index.ts"],"names":["cachedSetTimeout","cachedClearTimeout","process","module","exports","defaultSetTimout","Error","defaultClearTimeout","runTimeout","fun","setTimeout","e","call","runClearTimeout","marker","clearTimeout","currentQueue","queue","draining","queueIndex","cleanUpNextTick","length","concat","drainQueue","timeout","len","run","Item","array","noop","nextTick","args","Array","arguments","i","push","prototype","apply","title","browser","env","argv","version","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","name","binding","cwd","chdir","dir","umask","tokenize","fromMidi","NAMES","split","names","accTypes","slice","filter","n","acc","indexOf","SHARPS","FLATS","REGEX","str","m","exec","toUpperCase","replace","NO_NOTE","Object","freeze","SEMI","properties","tokens","letter","octStr","p","pc","step","charCodeAt","alt","oct","chroma","midi","freq","midiToFreq","memo","fn","cache","props","note","tuning","Math","pow","L2","log","L440","freqToMidi","v","round","LETTERS","stepToLetter","fillStr","s","join","numToStr","num","op","altToAcc","from","fromProps","baseNote","ref","assign","build","sharps","floor","simplify","sameAcc","useSharps","enharmonic","range","rotate","sort","unique","ascR","b","a","descR","times","arr","compact","height","src","map","shuffle","rnd","t","random","permutations","reduce","perm","pos","newPerm","splice","IVL_TNL","IVL_STR","RegExp","SIZES","TYPES","CLASSES","types","NO_IVL","abs","qToAlt","type","q","test","altToQ","numToStep","simple","semitones","ic","ivl","undefined","d","invert","IN","IQ","fromSemitones","c","o","transpose","trFifths","fifths","transposeBy","addIntervals","add","subtract","interval","FIFTHS","fOcts","f","FIFTH_OCTS","encode","STEPS","unaltered","decode","encoder","encodeNote","noteProps","encodeIvl","iprops","tr","to","isDescending","decodeIvl","ivl1","ivl2","i1","i2","chromatic","lydian","major","mixolydian","dorian","aeolian","phrygian","locrian","melodic minor","melodic minor second mode","lydian augmented","lydian dominant","melodic minor fifth mode","locrian #2","locrian major","altered","major pentatonic","lydian pentatonic","mixolydian pentatonic","locrian pentatonic","minor pentatonic","minor six pentatonic","minor hexatonic","flat three pentatonic","flat six pentatonic","major flat two pentatonic","whole tone pentatonic","ionian pentatonic","lydian #5P pentatonic","lydian dominant pentatonic","minor #7M pentatonic","super locrian pentatonic","in-sen","iwato","hirajoshi","kumoijoshi","pelog","vietnamese 1","vietnamese 2","prometheus","prometheus neopolitan","ritusen","scriabin","piongio","major blues","minor blues","composite blues","augmented","augmented heptatonic","dorian #4","lydian diminished","whole tone","leading whole tone","harmonic minor","lydian minor","neopolitan","neopolitan minor","neopolitan major","neopolitan major pentatonic","romanian minor","double harmonic lydian","diminished","harmonic major","double harmonic major","egyptian","hungarian minor","hungarian major","oriental","spanish","spanish heptatonic","flamenco","balinese","todi raga","malkos raga","kafi raga","purvi raga","persian","bebop","bebop dominant","bebop minor","bebop major","bebop locrian","minor bebop","mystery #1","enigmatic","minor six diminished","ionian augmented","lydian #9","ichikosucho","six tone symmetric","4","64","5","M","M#5","M#5add9","M13","M13#11","M6","M6#11","M69","M69#11","M7#11","M7#5","M7#5sus4","M7#9#11","M7add13","M7b5","M7b6","M7b9","M7sus4","M9","M9#11","M9#5","M9#5sus4","M9b5","M9sus4","Madd9","Maj7","Mb5","Mb6","Msus2","Msus4","Maddb9","7","9","11","13","11b9","13#11","13#9","13#9#11","13b5","13b9","13b9#11","13no5","13sus4","69#11","7#11","7#11b13","7#5","7#5#9","7#5b9","7#5b9#11","7#5sus4","7#9","7#9#11","7#9#11b13","7#9b13","7add6","7b13","7b5","7b6","7b9","7b9#11","7b9#9","7b9b13","7b9b13#11","7no5","7sus4","7sus4b9","7sus4b9b13","9#11","9#11b13","9#5","9#5#11","9b13","9b5","9no5","9sus4","m#5","m11","m11A 5","m11b5","m13","m6","m69","m7","m7#5","m7add11","m7b5","m9","m9#5","m9b5","mMaj7","mMaj7b6","mM9","mM9b6","mb6M7","mb6b9","o7","o7M7","oM7","sus24","+add#9","madd4","madd9","chromas","modes","isChroma","intervals","isEqual","isSubsetOf","isSupersetOf","includes","chr","pcsetNum","set","parseInt","clen","isArray","forEach","all","toString","normalize","binary","_","r","IVLS","s1","s2","notes","dictionary","raw","keys","data","index","ivls","key","alias","allKeys","dict","combine","scale","sdata","chord","cdata","pcset","exists","NO_SCALE","setnum","memoize","nameOrTonic","tonic","substring","modeNames","tonics","x","chords","inScale","toScale","supersets","isSuperset","subsets","isSubset","NO_CHORD","NUM_TYPES","Note","Interval","Distance","Dictionary","Scale","Chord","PcSet"],"mappings":"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","file":"index.map","sourceRoot":"../src","sourcesContent":["// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","var isBrowser = (typeof window !== 'undefined')\n\nvar CLOCK_DEFAULTS = {\n  toleranceLate: 0.10,\n  toleranceEarly: 0.001\n}\n\n// ==================== Event ==================== //\nvar Event = function(clock, deadline, func) {\n  this.clock = clock\n  this.func = func\n  this._cleared = false // Flag used to clear an event inside callback\n\n  this.toleranceLate = clock.toleranceLate\n  this.toleranceEarly = clock.toleranceEarly\n  this._latestTime = null\n  this._earliestTime = null\n  this.deadline = null\n  this.repeatTime = null\n\n  this.schedule(deadline)\n}\n\n// Unschedules the event\nEvent.prototype.clear = function() {\n  this.clock._removeEvent(this)\n  this._cleared = true\n  return this\n}\n\n// Sets the event to repeat every `time` seconds.\nEvent.prototype.repeat = function(time) {\n  if (time === 0)\n    throw new Error('delay cannot be 0')\n  this.repeatTime = time\n  if (!this.clock._hasEvent(this))\n    this.schedule(this.deadline + this.repeatTime)\n  return this\n}\n\n// Sets the time tolerance of the event.\n// The event will be executed in the interval `[deadline - early, deadline + late]`\n// If the clock fails to execute the event in time, the event will be dropped.\nEvent.prototype.tolerance = function(values) {\n  if (typeof values.late === 'number')\n    this.toleranceLate = values.late\n  if (typeof values.early === 'number')\n    this.toleranceEarly = values.early\n  this._refreshEarlyLateDates()\n  if (this.clock._hasEvent(this)) {\n    this.clock._removeEvent(this)\n    this.clock._insertEvent(this)\n  }\n  return this\n}\n\n// Returns true if the event is repeated, false otherwise\nEvent.prototype.isRepeated = function() { return this.repeatTime !== null }\n\n// Schedules the event to be ran before `deadline`.\n// If the time is within the event tolerance, we handle the event immediately.\n// If the event was already scheduled at a different time, it is rescheduled.\nEvent.prototype.schedule = function(deadline) {\n  this._cleared = false\n  this.deadline = deadline\n  this._refreshEarlyLateDates()\n\n  if (this.clock.context.currentTime >= this._earliestTime) {\n    this._execute()\n  \n  } else if (this.clock._hasEvent(this)) {\n    this.clock._removeEvent(this)\n    this.clock._insertEvent(this)\n  \n  } else this.clock._insertEvent(this)\n}\n\nEvent.prototype.timeStretch = function(tRef, ratio) {\n  if (this.isRepeated())\n    this.repeatTime = this.repeatTime * ratio\n\n  var deadline = tRef + ratio * (this.deadline - tRef)\n  // If the deadline is too close or past, and the event has a repeat,\n  // we calculate the next repeat possible in the stretched space.\n  if (this.isRepeated()) {\n    while (this.clock.context.currentTime >= deadline - this.toleranceEarly)\n      deadline += this.repeatTime\n  }\n  this.schedule(deadline)\n}\n\n// Executes the event\nEvent.prototype._execute = function() {\n  if (this.clock._started === false) return\n  this.clock._removeEvent(this)\n\n  if (this.clock.context.currentTime < this._latestTime)\n    this.func(this)\n  else {\n    if (this.onexpired) this.onexpired(this)\n    console.warn('event expired')\n  }\n  // In the case `schedule` is called inside `func`, we need to avoid\n  // overrwriting with yet another `schedule`.\n  if (!this.clock._hasEvent(this) && this.isRepeated() && !this._cleared)\n    this.schedule(this.deadline + this.repeatTime) \n}\n\n// Updates cached times\nEvent.prototype._refreshEarlyLateDates = function() {\n  this._latestTime = this.deadline + this.toleranceLate\n  this._earliestTime = this.deadline - this.toleranceEarly\n}\n\n// ==================== WAAClock ==================== //\nvar WAAClock = module.exports = function(context, opts) {\n  var self = this\n  opts = opts || {}\n  this.tickMethod = opts.tickMethod || 'ScriptProcessorNode'\n  this.toleranceEarly = opts.toleranceEarly || CLOCK_DEFAULTS.toleranceEarly\n  this.toleranceLate = opts.toleranceLate || CLOCK_DEFAULTS.toleranceLate\n  this.context = context\n  this._events = []\n  this._started = false\n}\n\n// ---------- Public API ---------- //\n// Schedules `func` to run after `delay` seconds.\nWAAClock.prototype.setTimeout = function(func, delay) {\n  return this._createEvent(func, this._absTime(delay))\n}\n\n// Schedules `func` to run before `deadline`.\nWAAClock.prototype.callbackAtTime = function(func, deadline) {\n  return this._createEvent(func, deadline)\n}\n\n// Stretches `deadline` and `repeat` of all scheduled `events` by `ratio`, keeping\n// their relative distance to `tRef`. In fact this is equivalent to changing the tempo.\nWAAClock.prototype.timeStretch = function(tRef, events, ratio) {\n  events.forEach(function(event) { event.timeStretch(tRef, ratio) })\n  return events\n}\n\n// Removes all scheduled events and starts the clock \nWAAClock.prototype.start = function() {\n  if (this._started === false) {\n    var self = this\n    this._started = true\n    this._events = []\n\n    if (this.tickMethod === 'ScriptProcessorNode') {\n      var bufferSize = 256\n      // We have to keep a reference to the node to avoid garbage collection\n      this._clockNode = this.context.createScriptProcessor(bufferSize, 1, 1)\n      this._clockNode.connect(this.context.destination)\n      this._clockNode.onaudioprocess = function () {\n        process.nextTick(function() { self._tick() })\n      }\n    } else if (this.tickMethod === 'manual') null // _tick is called manually\n\n    else throw new Error('invalid tickMethod ' + this.tickMethod)\n  }\n}\n\n// Stops the clock\nWAAClock.prototype.stop = function() {\n  if (this._started === true) {\n    this._started = false\n    this._clockNode.disconnect()\n  }  \n}\n\n// ---------- Private ---------- //\n\n// This function is ran periodically, and at each tick it executes\n// events for which `currentTime` is included in their tolerance interval.\nWAAClock.prototype._tick = function() {\n  var event = this._events.shift()\n\n  while(event && event._earliestTime <= this.context.currentTime) {\n    event._execute()\n    event = this._events.shift()\n  }\n\n  // Put back the last event\n  if(event) this._events.unshift(event)\n}\n\n// Creates an event and insert it to the list\nWAAClock.prototype._createEvent = function(func, deadline) {\n  return new Event(this, deadline, func)\n}\n\n// Inserts an event to the list\nWAAClock.prototype._insertEvent = function(event) {\n  this._events.splice(this._indexByTime(event._earliestTime), 0, event)\n}\n\n// Removes an event from the list\nWAAClock.prototype._removeEvent = function(event) {\n  var ind = this._events.indexOf(event)\n  if (ind !== -1) this._events.splice(ind, 1)\n}\n\n// Returns true if `event` is in queue, false otherwise\nWAAClock.prototype._hasEvent = function(event) {\n return this._events.indexOf(event) !== -1\n}\n\n// Returns the index of the first event whose deadline is >= to `deadline`\nWAAClock.prototype._indexByTime = function(deadline) {\n  // performs a binary search\n  var low = 0\n    , high = this._events.length\n    , mid\n  while (low < high) {\n    mid = Math.floor((low + high) / 2)\n    if (this._events[mid]._earliestTime < deadline)\n      low = mid + 1\n    else high = mid\n  }\n  return low\n}\n\n// Converts from relative time to absolute time\nWAAClock.prototype._absTime = function(relTime) {\n  return relTime + this.context.currentTime\n}\n\n// Converts from absolute time to relative time \nWAAClock.prototype._relTime = function(absTime) {\n  return absTime - this.context.currentTime\n}","var WAAClock = require('./lib/WAAClock')\n\nmodule.exports = WAAClock\nif (typeof window !== 'undefined') window.WAAClock = WAAClock\n","import WAAClock from 'waaclock';\n\nexport class Pulse {\n    defaults = {\n        bpm: 120,\n        cycle: 4,\n        delay: 0\n    }\n    props: any;\n    context: any;\n    clock: any;\n    events = [];\n    callbackAtTime: false;\n    constructor(\n        props = {}\n    ) {\n        this.props = Object.assign({}, this.defaults, props);\n        this.context = this.props.context || new AudioContext();\n        this.clock = this.props.clock || new WAAClock(this.context, { toleranceEarly: 0.1, toleranceLate: 0.1 });\n    }\n\n    getMeasureLength(bpm = this.props.bpm, beatsPerMeasure = this.props.cycle) {\n        return 60 / bpm * beatsPerMeasure;\n    }\n\n    arrayPulse(children, length = 1, path = [], start = 0, callback, deadline?) {\n        //TODO: return promise on next one (for chaining)\n        if (!Array.isArray(children)) {\n            if (children === 0) {\n                return 0;\n            }\n            const item = {\n                value: children,\n                length,\n                path,\n                start,\n                pulse: this,\n                cycle: this.props.cycle,\n                timeout: null\n            };\n\n            start += this.props.delay; // TODO: be able to add delay from arrayPulse fn directly\n            if (this.callbackAtTime) {\n                start += deadline ? deadline : this.context.currentTime;\n                item.timeout = this.clock.callbackAtTime((event) =>\n                    callback(Object.assign(item, { event, deadline: event.deadline })), start);\n            } else {\n                start += (deadline || this.context.currentTime) - this.context.currentTime;\n                item.timeout = this.clock.setTimeout((event) =>\n                    callback(Object.assign(item, { event, deadline: event.deadline })), start);\n            }\n            this.events.push(item.timeout);\n            return item;\n        }\n        const childLength = length / children.length;\n        return {\n            length,\n            children: children.map((el, i) =>\n                this.arrayPulse(\n                    el,\n                    childLength,\n                    path.concat([i]),\n                    start + i * childLength,\n                    callback,\n                    deadline\n                )\n            )\n        };\n    }\n\n    tickArray(array, callback, deadline?, length?) {\n        array.push(1);\n        const l = length || this.getMeasureLength() * array.length;\n        this.start();\n        return new Promise((resolve, reject) => {\n            this.arrayPulse(array, l, [], 0, (tick, start) => {\n                if (tick.path[0] === array.length - 1) {\n                    resolve(tick);\n                } else {\n                    callback(tick, start);\n                }\n            }, deadline);\n        });\n    }\n\n\n    start() {\n        // console.log('start with', this.events.length, 'events');\n        const criticalEvents = 6000;\n        if (this.events.length > criticalEvents) {\n            console.warn('more than ', criticalEvents, 'events received. Consider using less \"times\" to keep the timing precies');\n        }\n        this.clock.start();\n    }\n\n    stop() {\n        this.clock.stop();\n    }\n\n    changeTempo(newTempo, timeout = 0.2) {\n        const factor = this.props.bpm / newTempo;\n        this.props.bpm = newTempo;\n        const events = this.events.filter(e => {\n            return e.deadline - this.context.currentTime > timeout;\n        });\n        // TODO: stretch durations?!\n        this.clock.timeStretch(this.context.currentTime, events, factor)\n    }\n}","import { Pulse } from './Pulse';\nimport { Musician } from './musicians/Musician';\n\nexport default class Band {\n    props: any;\n    pulse: Pulse;\n    musicians: Musician[];\n    defaults = {\n        cycle: 4,\n        division: 3, // rhythm division (3=ternary,2=binary)\n        transpose: 0,\n        style: 'Medium Swing'\n    }\n    context: AudioContext;\n    constructor({ context, musicians }: any = {}) {\n        this.context = context || new AudioContext();\n        this.musicians = musicians || [];\n    }\n\n    ready(): Promise<any[]> {\n        return Promise.all([this.resume()].concat(this.musicians.map(m => m.ready)));\n    }\n\n    resume() { // https://goo.gl/7K7WLu\n        return this.context.resume().then(() => this.context);\n    }\n\n    comp(measures, settings) {\n        if (this.pulse) {\n            this.pulse.stop();\n        }\n        settings = Object.assign(this.defaults, settings, { context: this.context });\n        measures = measures.map(m => !Array.isArray(m) ? [m] : m);\n        this.play(measures, settings);\n    }\n\n    play(measures, settings) {\n        this.ready().then(() => {\n            this.pulse = settings.pulse || new Pulse(settings);\n            this.musicians.forEach(musician => musician.play({ pulse: this.pulse, measures, settings }));\n            this.pulse.start();\n        });\n    }\n}\n","/**\n * [![npm version](https://img.shields.io/npm/v/tonal-note.svg)](https://www.npmjs.com/package/tonal-note)\n * [![tonal](https://img.shields.io/badge/tonal-note-yellow.svg)](https://www.npmjs.com/browse/keyword/tonal)\n *\n * `tonal-note` is a collection of functions to manipulate musical notes in scientific notation\n *\n * This is part of [tonal](https://www.npmjs.com/package/tonal) music theory library.\n *\n * ## Usage\n *\n * ```js\n * import * as Note from \"tonal-note\"\n * // or const Note = require(\"tonal-note\")\n * Note.name(\"bb2\") // => \"Bb2\"\n * Note.chroma(\"bb2\") // => 10\n * Note.midi(\"a4\") // => 69\n * Note.freq(\"a4\") // => 440\n * Note.oct(\"G3\") // => 3\n *\n * // part of tonal\n * const Tonal = require(\"tonal\")\n * // or import Note from \"tonal\"\n * Tonal.Note.midi(\"d4\") // => 62\n * ```\n *\n * ## Install\n *\n * [![npm install tonal-note](https://nodei.co/npm/tonal-note.png?mini=true)](https://npmjs.org/package/tonal-note/)\n *\n * ## API Documentation\n *\n * @module Note\n */\n\nvar NAMES = \"C C# Db D D# Eb E F F# Gb G G# Ab A A# Bb B\".split(\" \");\n\n/**\n * Get a list of note names (pitch classes) within a octave\n *\n * @param {string} accTypes - (Optional, by default \" b#\"). A string with the\n * accidentals types: \" \" means no accidental, \"#\" means sharps, \"b\" mean flats,\n * can be conbined (see examples)\n * @return {Array}\n * @example\n * Note.names(\" b\") // => [ \"C\", \"Db\", \"D\", \"Eb\", \"E\", \"F\", \"Gb\", \"G\", \"Ab\", \"A\", \"Bb\", \"B\" ]\n * Note.names(\" #\") // => [ \"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\" ]\n */\nexport var names = function (accTypes) { return typeof accTypes !== \"string\"\n    ? NAMES.slice()\n    : NAMES.filter(function (n) {\n        var acc = n[1] || \" \";\n        return accTypes.indexOf(acc) !== -1;\n      }); };\n\nvar SHARPS = names(\" #\");\nvar FLATS = names(\" b\");\nvar REGEX = /^([a-gA-G]?)(#{1,}|b{1,}|x{1,}|)(-?\\d*)\\s*(.*)$/;\n\n/**\n * Split a string into tokens related to note parts.\n * It returns an array of strings `[letter, accidental, octave, modifier]`\n *\n * It always returns an array\n *\n * @param {String} str\n * @return {Array} an array of note tokens\n * @example\n * Note.tokenize(\"C#2\") // => [\"C\", \"#\", \"2\", \"\"]\n * Note.tokenize(\"Db3 major\") // => [\"D\", \"b\", \"3\", \"major\"]\n * Note.tokenize(\"major\") // => [\"\", \"\", \"\", \"major\"]\n * Note.tokenize(\"##\") // => [\"\", \"##\", \"\", \"\"]\n * Note.tokenize() // => [\"\", \"\", \"\", \"\"]\n */\nexport function tokenize(str) {\n  if (typeof str !== \"string\") { str = \"\"; }\n  var m = REGEX.exec(str);\n  if (!m) { return null; }\n  return [m[1].toUpperCase(), m[2].replace(/x/g, \"##\"), m[3], m[4]];\n}\n\nvar NO_NOTE = Object.freeze({\n  pc: null,\n  name: null,\n  step: null,\n  alt: null,\n  oct: null,\n  octStr: null,\n  chroma: null,\n  midi: null,\n  freq: null\n});\n\nvar SEMI = [0, 2, 4, 5, 7, 9, 11];\nvar properties = function (str) {\n  var tokens = tokenize(str);\n  if (tokens[0] === \"\" || tokens[3] !== \"\") { return NO_NOTE; }\n  var letter = tokens[0];\n  var acc = tokens[1];\n  var octStr = tokens[2];\n  var p = { letter: letter, acc: acc, octStr: octStr };\n  p.pc = p.letter + p.acc;\n  p.name = p.pc + octStr;\n  p.step = (p.letter.charCodeAt(0) + 3) % 7;\n  p.alt = p.acc[0] === \"b\" ? -p.acc.length : p.acc.length;\n  p.oct = octStr.length ? +octStr : null;\n  p.chroma = (SEMI[p.step] + p.alt + 120) % 12;\n  p.midi = p.oct !== null ? SEMI[p.step] + p.alt + 12 * (p.oct + 1) : null;\n  p.freq = midiToFreq(p.midi);\n  return Object.freeze(p);\n};\n\nvar memo = function (fn, cache) {\n  if ( cache === void 0 ) cache = {};\n\n  return function (str) { return cache[str] || (cache[str] = fn(str)); };\n};\n\n/**\n * Get note properties. It returns an object with the following information:\n *\n * - name {String}: the note name. The letter is always in uppercase\n * - letter {String}: the note letter, always in uppercase\n * - acc {String}: the note accidentals\n * - octave {Number}: the octave or null if not present\n * - pc {String}: the pitch class (letter + accidentals)\n * - step {Number}: number equivalent of the note letter. 0 means C ... 6 means B.\n * - alt {Number}: number equivalent of accidentals (negative are flats, positive sharps)\n * - chroma {Number}: number equivalent of the pitch class, where 0 is C, 1 is C# or Db, 2 is D...\n * - midi {Number}: the note midi number\n * - freq {Number}: the frequency using an equal temperament at 440Hz\n *\n * This function *always* returns an object with all this properties, but if it\"s\n * not a valid note all properties will be null.\n *\n * The returned object can\"t be mutated.\n *\n * @param {String} note - the note name in scientific notation\n * @return {Object} an object with the properties (or an object will all properties\n * set to null if not valid note)\n * @example\n * Note.props(\"fx-3\").name // => \"F##-3\"\n * Note.props(\"invalid\").name // => null\n * Note.props(\"C#3\").oct // => 3\n * Note.props().oct // => null\n */\nexport var props = memo(properties);\n\n/**\n * Given a note name, return the note name or null if not valid note.\n * The note name will ALWAYS have the letter in upercase and accidentals\n * using # or b\n *\n * Can be used to test if a string is a valid note name.\n *\n * @function\n * @param {Pitch|string}\n * @return {string}\n *\n * @example\n * Note.name(\"cb2\") // => \"Cb2\"\n * [\"c\", \"db3\", \"2\", \"g+\", \"gx4\"].map(Note.name) // => [\"C\", \"Db3\", null, null, \"G##4\"]\n */\nexport var name = function (str) { return props(str).name; };\n\n/**\n * Get pitch class of a note. The note can be a string or a pitch array.\n *\n * @function\n * @param {string|Pitch}\n * @return {string} the pitch class\n * @example\n * Note.pc(\"Db3\") // => \"Db\"\n * [\"db3\", \"bb6\", \"fx2\"].map(Note.pc) // => [ \"Db\", \"Bb\", \"F##\"]\n */\nexport var pc = function (str) { return props(str).pc; };\n\n/**\n * Get the note midi number\n * (an alias of tonal-midi `toMidi` function)\n *\n * @function\n * @param {string|Number} note - the note to get the midi number from\n * @return {Integer} the midi number or null if not valid pitch\n * @example\n * Note.midi(\"C4\") // => 60\n * Note.midi(60) // => 60\n * @see midi.toMidi\n */\nexport var midi = function (note) { return props(note).midi || +note || null; };\n\n/**\n * Get the frequency from midi number\n *\n * @param {Number} midi - the note midi number\n * @param {Number} tuning - (Optional) 440 by default\n * @return {Number} the frequency or null if not valid note midi\n */\nexport var midiToFreq = function (midi, tuning) {\n    if ( tuning === void 0 ) tuning = 440;\n\n    return typeof midi === \"number\" ? Math.pow(2, (midi - 69) / 12) * tuning : null;\n};\n\n/**\n * Get the frequency of a note\n *\n * @function\n * @param {string|Number} note - the note name or midi note number\n * @return {Number} the frequency\n * @example\n * Note.freq(\"A4\") // => 440\n * Note.freq(69) // => 440\n */\nexport var freq = function (note) { return props(note).freq || midiToFreq(note); };\n\nvar L2 = Math.log(2);\nvar L440 = Math.log(440);\n/**\n * Get the midi number from a frequency in hertz. The midi number can\n * contain decimals (with two digits precission)\n *\n * @param {Number} frequency\n * @return {Number}\n * @example\n * Note.freqToMidi(220)); //=> 57;\n * Note.freqToMidi(261.62)); //=> 60;\n * Note.freqToMidi(261)); //=> 59.96;\n */\nexport var freqToMidi = function (freq) {\n  var v = 12 * (Math.log(freq) - L440) / L2 + 69;\n  return Math.round(v * 100) / 100;\n};\n\n/**\n * Return the chroma of a note. The chroma is the numeric equivalent to the\n * pitch class, where 0 is C, 1 is C# or Db, 2 is D... 11 is B\n *\n * @param {string} note - the note name\n * @return {Integer} the chroma number\n * @example\n * Note.chroma(\"Cb\") // => 11\n * [\"C\", \"D\", \"E\", \"F\"].map(Note.chroma) // => [0, 2, 4, 5]\n */\nexport var chroma = function (str) { return props(str).chroma; };\n\n/**\n * Get the octave of the given pitch\n *\n * @function\n * @param {string} note - the note\n * @return {Integer} the octave or null if doesn\"t have an octave or not a valid note\n * @example\n * Note.oct(\"C#4\") // => 4\n * Note.oct(\"C\") // => null\n * Note.oct(\"blah\") // => undefined\n */\nexport var oct = function (str) { return props(str).oct; };\n\nvar LETTERS = \"CDEFGAB\";\n/**\n * Given a step number return it\"s letter (0 = C, 1 = D, 2 = E)\n * @param {number} step\n * @return {string} the letter\n * @example\n * Note.stepToLetter(3) // => \"F\"\n */\nexport var stepToLetter = function (step) { return LETTERS[step]; };\n\nvar fillStr = function (s, n) { return Array(n + 1).join(s); };\nvar numToStr = function (num, op) { return (typeof num !== \"number\" ? \"\" : op(num)); };\n\n/**\n * Given an alteration number, return the accidentals\n * @param {Number} alt\n * @return {String}\n * @example\n * Note.altToAcc(-3) // => \"bbb\"\n */\nexport var altToAcc = function (alt) { return numToStr(alt, function (alt) { return (alt < 0 ? fillStr(\"b\", -alt) : fillStr(\"#\", alt)); }); };\n\n/**\n * Creates a note name in scientific notation from note properties,\n * and optionally another note name.\n * It receives an object with:\n * - step: the note step (0 = C, 1 = D, ... 6 = B)\n * - alt: (optional) the alteration. Negative numbers are flats, positive sharps\n * - oct: (optional) the octave\n *\n * Optionally it receives another note as a \"base\", meaning that any prop not explicitly\n * received on the first parameter will be taken from that base note. That way it can be used\n * as an immutable \"set\" operator for a that base note\n *\n * @function\n * @param {Object} props - the note properties\n * @param {String} [baseNote] - note to build the result from. If given, it returns\n * the result of applying the given props to this note.\n * @return {String} the note name in scientific notation or null if not valid properties\n * @example\n * Note.from({ step: 5 }) // => \"A\"\n * Note.from({ step: 1, acc: -1 }) // => \"Db\"\n * Note.from({ step: 2, acc: 2, oct: 2 }) // => \"E##2\"\n * Note.from({ step: 7 }) // => null\n * Note.from({alt: 1, oct: 3}, \"C4\") // => \"C#3\"\n */\nexport var from = function (fromProps, baseNote) {\n  if ( fromProps === void 0 ) fromProps = {};\n  if ( baseNote === void 0 ) baseNote = null;\n\n  var ref = baseNote\n    ? Object.assign({}, props(baseNote), fromProps)\n    : fromProps;\n  var step = ref.step;\n  var alt = ref.alt;\n  var oct = ref.oct;\n  var letter = stepToLetter(step);\n  if (!letter) { return null; }\n  var pc = letter + altToAcc(alt);\n  return oct || oct === 0 ? pc + oct : pc;\n};\n\n/**\n * Deprecated. This is kept for backwards compatibility only.\n * Use Note.from instead\n */\nexport var build = from;\n\n/**\n * Given a midi number, returns a note name. The altered notes will have\n * flats unless explicitly set with the optional `useSharps` parameter.\n *\n * @function\n * @param {number} midi - the midi note number\n * @param {boolean} useSharps - (Optional) set to true to use sharps instead of flats\n * @return {string} the note name\n * @example\n * Note.fromMidi(61) // => \"Db4\"\n * Note.fromMidi(61, true) // => \"C#4\"\n * // it rounds to nearest note\n * Note.fromMidi(61.7) // => \"D4\"\n */\nexport function fromMidi(num, sharps) {\n  num = Math.round(num);\n  var pcs = sharps === true ? SHARPS : FLATS;\n  var pc = pcs[num % 12];\n  var o = Math.floor(num / 12) - 1;\n  return pc + o;\n}\n\n/**\n * Simplify the note: find an enhramonic note with less accidentals.\n *\n * @param {String} note - the note to be simplified\n * @param {boolean} useSameAccType - (optional, true by default) set to true\n * to ensure the returned note has the same accidental types that the given note\n * @return {String} the simplfiied note or null if not valid note\n * @example\n * Note.simplify(\"C##\") // => \"D\"\n * Note.simplify(\"C###\") // => \"D#\"\n * Note.simplify(\"C###\", false) // => \"Eb\"\n * Note.simplify(\"B#4\") // => \"C5\"\n */\nexport var simplify = function (note, sameAcc) {\n  var ref = props(note);\n  var alt = ref.alt;\n  var chroma = ref.chroma;\n  var midi = ref.midi;\n  if (chroma === null) { return null; }\n  var useSharps = sameAcc === false ? alt < 0 : alt > 0;\n  return midi === null\n    ? pc(fromMidi(chroma, useSharps))\n    : fromMidi(midi, useSharps);\n};\n\n/**\n * Get the simplified and enhramonic note of the given one.\n *\n * @param {String} note\n * @return {String} the enhramonic note\n * @example\n * Note.enharmonic(\"Db\") // => \"C#\"\n * Note.enhramonic(\"C\") // => \"C\"\n */\nexport var enharmonic = function (note) { return simplify(note, false); };\n","/**\n * [![npm version](https://img.shields.io/npm/v/tonal-array.svg?style=flat-square)](https://www.npmjs.com/package/tonal-array)\n *\n * Tonal array utilities. Create ranges, sort notes, ...\n *\n * @example\n * import * as Array;\n * Array.sort([\"f\", \"a\", \"c\"]) // => [\"C\", \"F\", \"A\"]\n *\n * @example\n * const Array = require(\"tonal-array)\n * Array.range(1, 4) // => [1, 2, 3, 4]\n *\n * @module Array\n */\nimport { midi, name } from \"tonal-note\";\n\n// ascending range\nfunction ascR(b, n) {\n  for (var a = []; n--; a[n] = n + b){ ; }\n  return a;\n}\n// descending range\nfunction descR(b, n) {\n  for (var a = []; n--; a[n] = b - n){ ; }\n  return a;\n}\n\n/**\n * Create a numeric range\n *\n * @param {Number} from\n * @param {Number} to\n * @return {Array}\n *\n * @example\n * Array.range(-2, 2) // => [-2, -1, 0, 1, 2]\n * Array.range(2, -2) // => [2, 1, 0, -1, -2]\n */\nexport function range(a, b) {\n  return a === null || b === null\n    ? []\n    : a < b ? ascR(a, b - a + 1) : descR(a, a - b + 1);\n}\n/**\n *\n * Rotates a list a number of times. It\"s completly agnostic about the\n * contents of the list.\n *\n * @param {Integer} times - the number of rotations\n * @param {Array} array\n * @return {Array} the rotated array\n * @example\n * Array.rotate(1, [1, 2, 3]) // => [2, 3, 1]\n */\nexport function rotate(times, arr) {\n  var len = arr.length;\n  var n = (times % len + len) % len;\n  return arr.slice(n, len).concat(arr.slice(0, n));\n}\n\n/**\n * Return a copy of the array with the null values removed\n * @function\n * @param {Array} array\n * @return {Array}\n *\n * @example\n * Array.compact([\"a\", \"b\", null, \"c\"]) // => [\"a\", \"b\", \"c\"]\n */\nexport var compact = function (arr) { return arr.filter(function (n) { return n === 0 || n; }); };\n\n// a function that get note heights (with negative number for pitch classes)\nvar height = function (n) {\n  var m = midi(n);\n  return m !== null ? m : midi(n + \"-100\");\n};\n\n/**\n * Sort an array of notes in ascending order\n *\n * @param {String|Array} notes\n * @return {Array} sorted array of notes\n */\nexport function sort(src) {\n  return compact(src.map(name)).sort(function (a, b) { return height(a) > height(b); });\n}\n\n/**\n * Get sorted notes with duplicates removed\n *\n * @function\n * @param {Array} notes\n */\nexport function unique(arr) {\n  return sort(arr).filter(function (n, i, a) { return i === 0 || n !== a[i - 1]; });\n}\n\n/**\n * Randomizes the order of the specified array in-place, using the Fisher–Yates shuffle.\n *\n * @private\n * @function\n * @param {Array|String} arr - the array\n * @return {Array} the shuffled array\n *\n * @example\n * Array.shuffle([\"C\", \"D\", \"E\", \"F\"])\n */\nexport var shuffle = function (arr, rnd) {\n  if ( rnd === void 0 ) rnd = Math.random;\n\n  var i, t;\n  var m = arr.length;\n  while (m) {\n    i = (rnd() * m--) | 0;\n    t = arr[m];\n    arr[m] = arr[i];\n    arr[i] = t;\n  }\n  return arr;\n};\n\n/**\n * Get all permutations of an array\n * http://stackoverflow.com/questions/9960908/permutations-in-javascript\n *\n * @param {Array} array - the array\n * @return {Array<Array>} an array with all the permutations\n */\nexport var permutations = function (arr) {\n  if (arr.length === 0) { return [[]]; }\n  return permutations(arr.slice(1)).reduce(function(acc, perm) {\n    return acc.concat(\n      arr.map(function(e, pos) {\n        var newPerm = perm.slice();\n        newPerm.splice(pos, 0, arr[0]);\n        return newPerm;\n      })\n    );\n  }, []);\n};\n","/**\n * [![npm version](https://img.shields.io/npm/v/tonal-interval.svg)](https://www.npmjs.com/package/tonal-interval)\n * [![tonal](https://img.shields.io/badge/tonal-interval-yellow.svg)](https://www.npmjs.com/browse/keyword/tonal)\n *\n * `tonal-interval` is a collection of functions to create and manipulate music intervals.\n *\n * The intervals are strings in shorthand notation. Two variations are supported:\n *\n * - standard shorthand notation: type and number, for example: \"M3\", \"d-4\"\n * - inverse shorthand notation: number and then type, for example: \"3M\", \"-4d\"\n *\n * The problem with the standard shorthand notation is that some strings can be\n * parsed as notes or intervals, for example: \"A4\" can be note A in 4th octave\n * or an augmented four. To remove ambiguity, the prefered notation in tonal is the\n * inverse shortand notation.\n *\n * This is part of [tonal](https://www.npmjs.com/package/tonal) music theory library.\n *\n * ## Usage\n *\n * ```js\n * // es6\n * import * as Interval from \"tonal-interval\"\n * // es5\n * const Interval = require(\"tonal-interval\")\n * // part of tonal\n * import { Interval } from \"tonal\"\n *\n * Interval.semitones(\"4P\") // => 5\n * Interval.invert(\"3m\") // => \"6M\"\n * Interval.simplify(\"9m\") // => \"2m\"\n * ```\n *\n * ## Install\n *\n * [![npm install tonal-interval](https://nodei.co/npm/tonal-interval.png?mini=true)](https://npmjs.org/package/tonal-interval/)\n *\n * ## API Documentation\n *\n * @module Interval\n */\n// shorthand tonal notation (with quality after number)\nvar IVL_TNL = \"([-+]?\\\\d+)(d{1,4}|m|M|P|A{1,4})\";\n// standard shorthand notation (with quality before number)\nvar IVL_STR = \"(AA|A|P|M|m|d|dd)([-+]?\\\\d+)\";\nvar REGEX = new RegExp(\"^\" + IVL_TNL + \"|\" + IVL_STR + \"$\");\nvar SIZES = [0, 2, 4, 5, 7, 9, 11];\nvar TYPES = \"PMMPPMM\";\nvar CLASSES = [0, 1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1];\nvar NAMES = \"1P 2m 2M 3m 3M 4P 5P 6m 6M 7m 7M 8P\".split(\" \");\n\n/**\n * List basic (perfect, major, minor) interval names within a octave\n * @param {String} qualities - (Optional, default \"PMm\") the valid types\n * @return {Array} the interval names\n * @example\n * Interval.names() // => [ \"1P\", \"2m\", \"2M\", \"3m\", \"3M\", \"4P\", \"5P\", \"6m\", \"6M\", \"7m\", \"7M\", \"8P\" ]\n * Interval.names(\"P\") // => [ \"1P\", \"4P\", \"5P\", \"8P\" ]\n * Interval.names(\"PM\") // => [ \"1P\", \"2M\", \"3M\", \"4P\", \"5P\", \"6M\", \"7M\", \"8P\" ]\n * Interval.names(\"Pm\") // => [ \"1P\", \"2m\", \"3m\", \"4P\", \"5P\", \"6m\", \"7m\", \"8P\" ]\n * Interval.names(\"d\") // => []\n */\nexport var names = function (types) { return typeof types !== \"string\"\n    ? NAMES.slice()\n    : NAMES.filter(function (n) { return types.indexOf(n[1]) !== -1; }); };\n\nexport var tokenize = function (str) {\n  var m = REGEX.exec(str);\n  return m === null ? null : m[1] ? [m[1], m[2]] : [m[4], m[3]];\n};\n\nvar NO_IVL = Object.freeze({\n  name: null,\n  num: null,\n  q: null,\n  step: null,\n  alt: null,\n  dir: null,\n  type: null,\n  simple: null,\n  semitones: null,\n  chroma: null\n});\n\nvar fillStr = function (s, n) { return Array(Math.abs(n) + 1).join(s); };\n\nvar qToAlt = function (type, q) {\n  if (q === \"M\" && type === \"M\") { return 0; }\n  if (q === \"P\" && type === \"P\") { return 0; }\n  if (q === \"m\" && type === \"M\") { return -1; }\n  if (/^A+$/.test(q)) { return q.length; }\n  if (/^d+$/.test(q)) { return type === \"P\" ? -q.length : -q.length - 1; }\n  return null;\n};\n\nvar altToQ = function (type, alt) {\n  if (alt === 0) { return type === \"M\" ? \"M\" : \"P\"; }\n  else if (alt === -1 && type === \"M\") { return \"m\"; }\n  else if (alt > 0) { return fillStr(\"A\", alt); }\n  else if (alt < 0) { return fillStr(\"d\", type === \"P\" ? alt : alt + 1); }\n  else { return null; }\n};\n\nvar numToStep = function (num) { return (Math.abs(num) - 1) % 7; };\n\nvar properties = function (str) {\n  var t = tokenize(str);\n  if (t === null) { return NO_IVL; }\n  var p = { num: +t[0], q: t[1] };\n  p.step = numToStep(p.num);\n  p.type = TYPES[p.step];\n  if (p.type === \"M\" && p.q === \"P\") { return NO_IVL; }\n\n  p.name = \"\" + p.num + p.q;\n  p.dir = p.num < 0 ? -1 : 1;\n  p.simple = p.num === 8 || p.num === -8 ? p.num : p.dir * (p.step + 1);\n  p.alt = qToAlt(p.type, p.q);\n  p.oct = Math.floor((Math.abs(p.num) - 1) / 7);\n  p.semitones = p.dir * (SIZES[p.step] + p.alt + 12 * p.oct);\n  p.chroma = ((p.dir * (SIZES[p.step] + p.alt)) % 12 + 12) % 12;\n  return Object.freeze(p);\n};\n\nvar cache = {};\n/**\n * Get interval properties. It returns an object with:\n *\n * - name: name\n * - num: number\n * - q: quality\n * - step: step\n * - alt: alteration\n * - dir: direction (1 ascending, -1 descending)\n * - type: \"P\" or \"M\" for perfectable or majorable\n * - simple: the simplified number\n * - semitones: the size in semitones\n * - chroma: the interval chroma\n * - ic: the interval class\n *\n * @function\n * @param {String} interval - the interval\n * @return {Object} the interval in the form [number, alt]\n */\nexport function props(str) {\n  if (typeof str !== \"string\") { return NO_IVL; }\n  return cache[str] || (cache[str] = properties(str));\n}\n\n/**\n * Get the number of the interval\n *\n * @function\n * @param {String} interval - the interval\n * @return {Integer}\n * @example\n * Interval.num(\"m2\") // => 2\n * Interval.num(\"P9\") // => 9\n * Interval.num(\"P-4\") // => -4\n */\nexport var num = function (str) { return props(str).num; };\n\n/**\n * Get interval name. Can be used to test if it\"s an interval. It accepts intervals\n * as pitch or string in shorthand notation or tonal notation. It returns always\n * intervals in tonal notation.\n *\n * @function\n * @param {String} interval - the interval string or array\n * @return {String} the interval name or null if not valid interval\n * @example\n * Interval.name(\"m-3\") // => \"-3m\"\n * Interval.name(\"3\") // => null\n */\nexport var name = function (str) { return props(str).name; };\n\n/**\n * Get size in semitones of an interval\n *\n * @function\n * @param {String} ivl\n * @return {Integer} the number of semitones or null if not an interval\n * @example\n * import { semitones } from \"tonal-interval\"\n * semitones(\"P4\") // => 5\n * // or using tonal\n * Tonal.Interval.semitones(\"P5\") // => 7\n */\nexport var semitones = function (str) { return props(str).semitones; };\n\n/**\n * Get the chroma of the interval. The chroma is a number between 0 and 7\n * that represents the position within an octave (pitch set)\n *\n * @function\n * @param {String} str\n * @return {Number}\n */\nexport var chroma = function (str) { return props(str).chroma; };\n\n/**\n * Get the [interval class](https://en.wikipedia.org/wiki/Interval_class)\n * number of a given interval.\n *\n * In musical set theory, an interval class is the shortest distance in\n * pitch class space between two unordered pitch classes\n *\n * @function\n * @param {String|Integer} interval - the interval or the number of semitones\n * @return {Integer} A value between 0 and 6\n *\n * @example\n * Interval.ic(\"P8\") // => 0\n * Interval.ic(\"m6\") // => 4\n * Interval.ic(10) // => 2\n * [\"P1\", \"M2\", \"M3\", \"P4\", \"P5\", \"M6\", \"M7\"].map(ic) // => [0, 2, 4, 5, 5, 3, 1]\n */\nexport var ic = function (ivl) {\n  if (typeof ivl === \"string\") { ivl = props(ivl).chroma; }\n  return typeof ivl === \"number\" ? CLASSES[ivl % 12] : null;\n};\n\n/**\n * Given a interval property object, get the interval name\n *\n * The properties must contain a `num` *or* `step`, and `alt`:\n *\n * - num: the interval number\n * - step: the interval step (overrides the num property)\n * - alt: the interval alteration\n * - oct: (Optional) the number of octaves\n * - dir: (Optional) the direction\n *\n * @function\n * @param {Object} props - the interval property object\n *\n * @return {String} the interval name\n * @example\n * Interval.build({ step: 1, alt: -1, oct: 0, dir: 1 }) // => \"1d\"\n * Interval.build({ num: 9, alt: -1 }) // => \"9m\"\n */\nexport var build = function (ref) {\n  if ( ref === void 0 ) ref = {};\n  var num = ref.num;\n  var step = ref.step;\n  var alt = ref.alt;\n  var oct = ref.oct; if ( oct === void 0 ) oct = 1;\n  var dir = ref.dir;\n\n  if (step !== undefined) { num = step + 1 + 7 * oct; }\n  if (num === undefined) { return null; }\n\n  var d = dir < 0 ? \"-\" : \"\";\n  var type = TYPES[numToStep(num)];\n  return d + num + altToQ(type, alt);\n};\n\n/**\n * Get the simplified version of an interval.\n *\n * @function\n * @param {String} interval - the interval to simplify\n * @return {String} the simplified interval\n *\n * @example\n * Interval.simplify(\"9M\") // => \"2M\"\n * [\"8P\", \"9M\", \"10M\", \"11P\", \"12P\", \"13M\", \"14M\", \"15P\"].map(Interval.simplify)\n * // => [ \"8P\", \"2M\", \"3M\", \"4P\", \"5P\", \"6M\", \"7M\", \"8P\" ]\n * Interval.simplify(\"2M\") // => \"2M\"\n * Interval.simplify(\"-2M\") // => \"7m\"\n */\nexport var simplify = function (str) {\n  var p = props(str);\n  if (p === NO_IVL) { return null; }\n  return p.simple + p.q;\n};\n\n/**\n * Get the inversion (https://en.wikipedia.org/wiki/Inversion_(music)#Intervals)\n * of an interval.\n *\n * @function\n * @param {String} interval - the interval to invert in interval shorthand\n * notation or interval array notation\n * @return {String} the inverted interval\n *\n * @example\n * Interval.invert(\"3m\") // => \"6M\"\n * Interval.invert(\"2M\") // => \"7m\"\n */\nexport var invert = function (str) {\n  var p = props(str);\n  if (p === NO_IVL) { return null; }\n  var step = (7 - p.step) % 7;\n  var alt = p.type === \"P\" ? -p.alt : -(p.alt + 1);\n  return build({ step: step, alt: alt, oct: p.oct, dir: p.dir });\n};\n\n// interval numbers\nvar IN = [1, 2, 2, 3, 3, 4, 5, 5, 6, 6, 7, 7];\n// interval qualities\nvar IQ = \"P m M m M P d P m M m M\".split(\" \");\n\n/**\n * Get interval name from semitones number. Since there are several interval\n * names for the same number, the name it\"s arbitraty, but deterministic.\n *\n * @function\n * @param {Integer} num - the number of semitones (can be negative)\n * @return {String} the interval name\n * @example\n * import { fromSemitones } from \"tonal-interval\"\n * fromSemitones(7) // => \"5P\"\n * // or using tonal\n * Tonal.Distance.fromSemitones(-7) // => \"-5P\"\n */\nexport var fromSemitones = function (num) {\n  var d = num < 0 ? -1 : 1;\n  var n = Math.abs(num);\n  var c = n % 12;\n  var o = Math.floor(n / 12);\n  return d * (IN[c] + 7 * o) + IQ[c];\n};\n","/**\n * [![npm version](https://img.shields.io/npm/v/tonal-distance.svg)](https://www.npmjs.com/package/tonal-distance)\n * [![tonal](https://img.shields.io/badge/tonal-distance-yellow.svg)](https://github.com/danigb/tonal/tree/master/packages/tonal/distance)\n *\n * Transpose notes by intervals and find distances between notes\n *\n * @example\n * // es6\n * import * as Distance from \"tonal-distance\"\n * Distance.interval(\"C3\", \"C4\") // => \"1P\"\n *\n * @example\n * // es6 import selected functions\n * import { interval, semitones, transpose } from \"tonal-distance\"\n *\n * semitones(\"C\" ,\"D\") // => 2\n * interval(\"C4\", \"G4\") // => \"5P\"\n * transpose(\"C4\", \"P5\") // => \"G4\"\n *\n * @example\n * // included in tonal facade\n * const Tonal = require(\"tonal\");\n * Tonal.Distance.transpose(\"C4\", \"P5\")\n * Tonal.Distance.transposeBy(\"P5\", \"C4\")\n *\n * @module Distance\n */\nimport { props as noteProps, build as fromNote } from \"tonal-note\";\nimport { props as iprops, build as ibuild } from \"tonal-interval\";\n\n// Map from letter step to number of fifths starting from \"C\":\n// { C: 0, D: 2, E: 4, F: -1, G: 1, A: 3, B: 5 }\nvar FIFTHS = [0, 2, 4, -1, 1, 3, 5];\n\n// Given a number of fifths, return the octaves they span\nvar fOcts = function (f) { return Math.floor(f * 7 / 12); };\n\n// Get the number of octaves it span each step\nvar FIFTH_OCTS = FIFTHS.map(fOcts);\n\nvar encode = function (ref) {\n  var step = ref.step;\n  var alt = ref.alt;\n  var oct = ref.oct;\n  var dir = ref.dir; if ( dir === void 0 ) dir = 1;\n\n  var f = FIFTHS[step] + 7 * alt;\n  if (oct === null) { return [dir * f]; }\n  var o = oct - FIFTH_OCTS[step] - 4 * alt;\n  return [dir * f, dir * o];\n};\n\n// We need to get the steps from fifths\n// Fifths for CDEFGAB are [ 0, 2, 4, -1, 1, 3, 5 ]\n// We add 1 to fifths to avoid negative numbers, so:\n// for [\"F\", \"C\", \"G\", \"D\", \"A\", \"E\", \"B\"] we have:\nvar STEPS = [3, 0, 4, 1, 5, 2, 6];\n\n// Return the number of fifths as if it were unaltered\nfunction unaltered(f) {\n  var i = (f + 1) % 7;\n  return i < 0 ? 7 + i : i;\n}\n\nvar decode = function (f, o, dir) {\n  var step = STEPS[unaltered(f)];\n  var alt = Math.floor((f + 1) / 7);\n  if (o === undefined) { return { step: step, alt: alt, dir: dir }; }\n  var oct = o + 4 * alt + FIFTH_OCTS[step];\n  return { step: step, alt: alt, oct: oct, dir: dir };\n};\n\nvar memo = function (fn, cache) {\n  if ( cache === void 0 ) cache = {};\n\n  return function (str) { return cache[str] || (cache[str] = fn(str)); };\n};\n\nvar encoder = function (props) { return memo(function (str) {\n    var p = props(str);\n    return p.name === null ? null : encode(p);\n  }); };\n\nvar encodeNote = encoder(noteProps);\nvar encodeIvl = encoder(iprops);\n\n/**\n * Transpose a note by an interval. The note can be a pitch class.\n *\n * This function can be partially applied.\n *\n * @param {String} note\n * @param {String} interval\n * @return {String} the transposed note\n * @example\n * import { tranpose } from \"tonal-distance\"\n * transpose(\"d3\", \"3M\") // => \"F#3\"\n * // it works with pitch classes\n * transpose(\"D\", \"3M\") // => \"F#\"\n * // can be partially applied\n * [\"C\", \"D\", \"E\", \"F\", \"G\"].map(transpose(\"M3)) // => [\"E\", \"F#\", \"G#\", \"A\", \"B\"]\n */\nexport function transpose(note, interval) {\n  if (arguments.length === 1) { return function (i) { return transpose(note, i); }; }\n  var n = encodeNote(note);\n  var i = encodeIvl(interval);\n  if (n === null || i === null) { return null; }\n  var tr = n.length === 1 ? [n[0] + i[0]] : [n[0] + i[0], n[1] + i[1]];\n  return fromNote(decode(tr[0], tr[1]));\n}\n\n/**\n * Transpose a pitch class by a number of perfect fifths.\n *\n * It can be partially applied.\n *\n * @function\n * @param {String} pitchClass - the pitch class\n * @param {Integer} fifhts - the number of fifths\n * @return {String} the transposed pitch class\n *\n * @example\n * import { trFifths } from \"tonal-transpose\"\n * [0, 1, 2, 3, 4].map(trFifths(\"C\")) // => [\"C\", \"G\", \"D\", \"A\", \"E\"]\n * // or using tonal\n * Distance.trFifths(\"G4\", 1) // => \"D\"\n */\n\nexport function trFifths(note, fifths) {\n  if (arguments.length === 1) { return function (f) { return trFifths(note, f); }; }\n  var n = encodeNote(note);\n  if (n === null) { return null; }\n  return fromNote(decode(n[0] + fifths));\n}\n\n/**\n * Get the distance in fifths between pitch classes\n *\n * Can be partially applied.\n *\n * @param {String} to - note or pitch class\n * @param {String} from - note or pitch class\n */\nexport function fifths(from, to) {\n  if (arguments.length === 1) { return function (to) { return fifths(from, to); }; }\n  var f = encodeNote(from);\n  var t = encodeNote(to);\n  if (t === null || f === null) { return null; }\n  return t[0] - f[0];\n}\n\n/**\n * The same as transpose with the arguments inverted.\n *\n * Can be partially applied.\n *\n * @param {String} note\n * @param {String} interval\n * @return {String} the transposed note\n * @example\n * import { tranposeBy } from \"tonal-distance\"\n * transposeBy(\"3m\", \"5P\") // => \"7m\"\n */\nexport function transposeBy(interval, note) {\n  if (arguments.length === 1) { return function (n) { return transpose(n, interval); }; }\n  return transpose(note, interval);\n}\n\nvar isDescending = function (e) { return e[0] * 7 + e[1] * 12 < 0; };\nvar decodeIvl = function (i) { return isDescending(i) ? decode(-i[0], -i[1], -1) : decode(i[0], i[1], 1); };\n\nexport function addIntervals(ivl1, ivl2, dir) {\n  var i1 = encodeIvl(ivl1);\n  var i2 = encodeIvl(ivl2);\n  if (i1 === null || i2 === null) { return null; }\n  var i = [i1[0] + dir * i2[0], i1[1] + dir * i2[1]];\n  return ibuild(decodeIvl(i));\n}\n\n/**\n * Add two intervals\n *\n * Can be partially applied.\n *\n * @param {String} interval1\n * @param {String} interval2\n * @return {String} the resulting interval\n * @example\n * import { add } from \"tonal-distance\"\n * add(\"3m\", \"5P\") // => \"7m\"\n */\nexport function add(ivl1, ivl2) {\n  if (arguments.length === 1) { return function (i2) { return add(ivl1, i2); }; }\n  return addIntervals(ivl1, ivl2, 1);\n}\n\n/**\n * Subtract two intervals\n *\n * Can be partially applied\n *\n * @param {String} minuend\n * @param {String} subtrahend\n * @return {String} interval diference\n */\nexport function subtract(ivl1, ivl2) {\n  if (arguments.length === 1) { return function (i2) { return add(ivl1, i2); }; }\n  return addIntervals(ivl1, ivl2, -1);\n}\n\n/**\n * Find the interval between two pitches. It works with pitch classes\n * (both must be pitch classes and the interval is always ascending)\n *\n * Can be partially applied\n *\n * @param {String} from - distance from\n * @param {String} to - distance to\n * @return {String} the interval distance\n *\n * @example\n * import { interval } from \"tonal-distance\"\n * interval(\"C2\", \"C3\") // => \"P8\"\n * interval(\"G\", \"B\") // => \"M3\"\n *\n * @example\n * import * as Distance from \"tonal-distance\"\n * Distance.interval(\"M2\", \"P5\") // => \"P4\"\n */\nexport function interval(from, to) {\n  if (arguments.length === 1) { return function (t) { return interval(from, t); }; }\n  var f = encodeNote(from);\n  var t = encodeNote(to);\n  if (f === null || t === null || f.length !== t.length) { return null; }\n  var d =\n    f.length === 1\n      ? [t[0] - f[0], -Math.floor((t[0] - f[0]) * 7 / 12)]\n      : [t[0] - f[0], t[1] - f[1]];\n  return ibuild(decodeIvl(d));\n}\n\n/**\n * Get the distance between two notes in semitones\n *\n * @param {String|Pitch} from - first note\n * @param {String|Pitch} to - last note\n * @return {Integer} the distance in semitones or null if not valid notes\n * @example\n * import { semitones } from \"tonal-distance\"\n * semitones(\"C3\", \"A2\") // => -3\n * // or use tonal\n * Tonal.Distance.semitones(\"C3\", \"G3\") // => 7\n */\nexport function semitones(from, to) {\n  if (arguments.length === 1) { return function (t) { return semitones(from, t); }; }\n  var f = noteProps(from);\n  var t = noteProps(to);\n  return f.midi !== null && t.midi !== null\n    ? t.midi - f.midi\n    : f.chroma !== null && t.chroma !== null\n      ? (t.chroma - f.chroma + 12) % 12\n      : null;\n}\n",null,"/**\n * [![npm version](https://img.shields.io/npm/v/tonal-pcset.svg?style=flat-square)](https://www.npmjs.com/package/tonal-pcset)\n * [![tonal](https://img.shields.io/badge/tonal-pcset-yellow.svg?style=flat-square)](https://www.npmjs.com/browse/keyword/tonal)\n *\n * `tonal-pcset` is a collection of functions to work with pitch class sets, oriented\n * to make comparations (isEqual, isSubset, isSuperset)\n *\n * This is part of [tonal](https://www.npmjs.com/package/tonal) music theory library.\n *\n * You can install via npm: `npm i --save tonal-pcset`\n *\n * ```js\n * // es6\n * import PcSet from \"tonal-pcset\"\n * var PcSet = require(\"tonal-pcset\")\n *\n * PcSet.isEqual(\"c2 d5 e6\", \"c6 e3 d1\") // => true\n * ```\n *\n * ## API documentation\n *\n * @module PcSet\n */\nimport { chroma as notechr } from \"tonal-note\";\nimport { chroma as ivlchr } from \"tonal-interval\";\nimport { rotate, range, compact } from \"tonal-array\";\n\nvar chr = function (str) { return notechr(str) || ivlchr(str) || 0; };\nvar pcsetNum = function (set) { return parseInt(chroma(set), 2); };\nvar clen = function (chroma) { return chroma.replace(/0/g, \"\").length; };\n\n/**\n * Get chroma of a pitch class set. A chroma identifies each set uniquely.\n * It\"s a 12-digit binary each presenting one semitone of the octave.\n *\n * Note that this function accepts a chroma as parameter and return it\n * without modification.\n *\n * @param {Array|String} set - the pitch class set\n * @return {String} a binary representation of the pitch class set\n * @example\n * PcSet.chroma([\"C\", \"D\", \"E\"]) // => \"1010100000000\"\n */\nexport function chroma(set) {\n  if (isChroma(set)) { return set; }\n  if (!Array.isArray(set)) { return \"\"; }\n  var b = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n  set.map(chr).forEach(function (i) {\n    b[i] = 1;\n  });\n  return b.join(\"\");\n}\n\nvar all = null;\n/**\n * Get a list of all possible chromas (all possible scales)\n * More information: http://allthescales.org/\n * @return {Array} an array of possible chromas from '10000000000' to '11111111111'\n *\n */\nexport function chromas(n) {\n  all = all || range(2048, 4095).map(function (n) { return n.toString(2); });\n  return typeof n === \"number\"\n    ? all.filter(function (chroma) { return clen(chroma) === n; })\n    : all.slice();\n}\n\n/**\n * Given a a list of notes or a pcset chroma, produce the rotations\n * of the chroma discarding the ones that starts with \"0\"\n *\n * This is used, for example, to get all the modes of a scale.\n *\n * @param {Array|String} set - the list of notes or pitchChr of the set\n * @param {Boolean} normalize - (Optional, true by default) remove all\n * the rotations that starts with \"0\"\n * @return {Array<String>} an array with all the modes of the chroma\n *\n * @example\n * PcSet.modes([\"C\", \"D\", \"E\"]).map(PcSet.intervals)\n */\nexport function modes(set, normalize) {\n  normalize = normalize !== false;\n  var binary = chroma(set).split(\"\");\n  return compact(\n    binary.map(function(_, i) {\n      var r = rotate(i, binary);\n      return normalize && r[0] === \"0\" ? null : r.join(\"\");\n    })\n  );\n}\n\nvar REGEX = /^[01]{12}$/;\n/**\n * Test if the given string is a pitch class set chroma.\n * @param {String} chroma - the pitch class set chroma\n * @return {Boolean} true if its a valid pcset chroma\n * @example\n * PcSet.isChroma(\"101010101010\") // => true\n * PcSet.isChroma(\"101001\") // => false\n */\nexport function isChroma(set) {\n  return REGEX.test(set);\n}\n\nvar IVLS = \"1P 2m 2M 3m 3M 4P 5d 5P 6m 6M 7m 7M\".split(\" \");\n/**\n * Given a pcset (notes or chroma) return it\"s intervals\n * @param {String|Array} pcset - the pitch class set (notes or chroma)\n * @return {Array} intervals or empty array if not valid pcset\n * @example\n * PcSet.intervals(\"1010100000000\") => [\"1P\", \"2M\", \"3M\"]\n */\nexport function intervals(set) {\n  if (!isChroma(set)) { return []; }\n  return compact(\n    set.split(\"\").map(function(d, i) {\n      return d === \"1\" ? IVLS[i] : null;\n    })\n  );\n}\n\n/**\n * Test if two pitch class sets are identical\n *\n * @param {Array|String} set1 - one of the pitch class sets\n * @param {Array|String} set2 - the other pitch class set\n * @return {Boolean} true if they are equal\n * @example\n * PcSet.isEqual([\"c2\", \"d3\"], [\"c5\", \"d2\"]) // => true\n */\nexport function isEqual(s1, s2) {\n  if (arguments.length === 1) { return function (s) { return isEqual(s1, s); }; }\n  return chroma(s1) === chroma(s2);\n}\n\n/**\n * Create a function that test if a collection of notes is a\n * subset of a given set\n *\n * The function can be partially applied\n *\n * @param {Array|String} set - an array of notes or a chroma set string to test against\n * @param {Array|String} notes - an array of notes or a chroma set\n * @return {boolean} true if notes is a subset of set, false otherwise\n * @example\n * const inCMajor = PcSet.isSubsetOf([\"C\", \"E\", \"G\"])\n * inCMajor([\"e6\", \"c4\"]) // => true\n * inCMajor([\"e6\", \"c4\", \"d3\"]) // => false\n */\nexport function isSubsetOf(set, notes) {\n  if (arguments.length > 1) { return isSubsetOf(set)(notes); }\n  set = pcsetNum(set);\n  return function(notes) {\n    notes = pcsetNum(notes);\n    return notes !== set && (notes & set) === notes;\n  };\n}\n\n/**\n * Create a function that test if a collectio of notes is a\n * superset of a given set (it contains all notes and at least one more)\n *\n * @param {Array|String} set - an array of notes or a chroma set string to test against\n * @param {Array|String} notes - an array of notes or a chroma set\n * @return {boolean} true if notes is a superset of set, false otherwise\n * @example\n * const extendsCMajor = PcSet.isSupersetOf([\"C\", \"E\", \"G\"])\n * extendsCMajor([\"e6\", \"a\", \"c4\", \"g2\"]) // => true\n * extendsCMajor([\"c6\", \"e4\", \"g3\"]) // => false\n */\nexport function isSupersetOf(set, notes) {\n  if (arguments.length > 1) { return isSupersetOf(set)(notes); }\n  set = pcsetNum(set);\n  return function(notes) {\n    notes = pcsetNum(notes);\n    return notes !== set && (notes | set) === notes;\n  };\n}\n\n/**\n * Test if a given pitch class set includes a note\n * @param {Array|String} set - the base set to test against\n * @param {String|Pitch} note - the note to test\n * @return {Boolean} true if the note is included in the pcset\n * @example\n * PcSet.includes([\"C\", \"D\", \"E\"], \"C4\") // => true\n * PcSet.includes([\"C\", \"D\", \"E\"], \"C#4\") // => false\n */\nexport function includes(set, note) {\n  if (arguments.length > 1) { return includes(set)(note); }\n  set = chroma(set);\n  return function(note) {\n    return set[chr(note)] === \"1\";\n  };\n}\n\n/**\n * Filter a list with a pitch class set\n *\n * @param {Array|String} set - the pitch class set notes\n * @param {Array|String} notes - the note list to be filtered\n * @return {Array} the filtered notes\n *\n * @example\n * PcSet.filter([\"C\", \"D\", \"E\"], [\"c2\", \"c#2\", \"d2\", \"c3\", \"c#3\", \"d3\"]) // => [ \"c2\", \"d2\", \"c3\", \"d3\" ])\n * PcSet.filter([\"C2\"], [\"c2\", \"c#2\", \"d2\", \"c3\", \"c#3\", \"d3\"]) // => [ \"c2\", \"c3\" ])\n */\nexport function filter(set, notes) {\n  if (arguments.length === 1) { return function (n) { return filter(set, n); }; }\n  return notes.filter(includes(set));\n}\n","/**\n * [![npm version](https://img.shields.io/npm/v/tonal-dictionary.svg)](https://www.npmjs.com/package/tonal-dictionary)\n *\n * `tonal-dictionary` contains a dictionary of musical scales and chords\n *\n * This is part of [tonal](https://www.npmjs.com/package/tonal) music theory library.\n *\n * @example\n * // es6\n * import * as Dictionary from \"tonal-dictionary\"\n * // es5\n * const Dictionary = require(\"tonal-dictionary\")\n *\n * @example\n * Dictionary.chord(\"Maj7\") // => [\"1P\", \"3M\", \"5P\", \"7M\"]\n *\n * @module Dictionary\n */\nimport sdata from \"./data/scales.json\";\nimport cdata from \"./data/chords.json\";\nimport { chroma } from \"tonal-pcset\";\n\nexport var dictionary = function (raw) {\n  var keys = Object.keys(raw).sort();\n  var data = [];\n  var index = [];\n\n  var add = function (name, ivls, chroma) {\n    data[name] = ivls;\n    index[chroma] = index[chroma] || [];\n    index[chroma].push(name);\n  };\n\n  keys.forEach(function (key) {\n    var ivls = raw[key][0].split(\" \");\n    var alias = raw[key][1];\n    var chr = chroma(ivls);\n\n    add(key, ivls, chr);\n    if (alias) { alias.forEach(function (a) { return add(a, ivls, chr); }); }\n  });\n  var allKeys = Object.keys(data).sort();\n\n  var dict = function (name) { return data[name]; };\n  dict.names = function (p) {\n    if (typeof p === \"string\") { return (index[p] || []).slice(); }\n    else { return (p === true ? allKeys : keys).slice(); }\n  };\n  return dict;\n};\n\nexport var combine = function (a, b) {\n  var dict = function (name) { return a(name) || b(name); };\n  dict.names = function (p) { return a.names(p).concat(b.names(p)); };\n  return dict;\n};\n\n/**\n * A dictionary of scales: a function that given a scale name (without tonic)\n * returns an array of intervals\n *\n * @function\n * @param {String} name\n * @return {Array} intervals\n * @example\n * import { scale } from \"tonal-dictionary\"\n * scale(\"major\") // => [\"1P\", \"2M\", ...]\n * scale.names(); // => [\"major\", ...]\n */\nexport var scale = dictionary(sdata);\n\n/**\n * A dictionary of chords: a function that given a chord type\n * returns an array of intervals\n *\n * @function\n * @param {String} type\n * @return {Array} intervals\n * @example\n * import { chord } from \"tonal-dictionary\"\n * chord(\"Maj7\") // => [\"1P\", \"3M\", ...]\n * chord.names(); // => [\"Maj3\", ...]\n */\nexport var chord = dictionary(cdata);\nexport var pcset = combine(scale, chord);\n","/**\n * [![npm version](https://img.shields.io/npm/v/tonal-scale.svg?style=flat-square)](https://www.npmjs.com/package/tonal-scale)\n *\n * A scale is a collection of pitches in ascending or descending order.\n *\n * This module provides functions to get and manipulate scales.\n *\n * @example\n * // es6\n * import * as Scale from \"tonal-scale\"\n * // es5\n * const Scale = require(\"tonal-scale\");\n *\n * @example\n * Scale.notes(\"Ab bebop\") // => [ \"Ab\", \"Bb\", \"C\", \"Db\", \"Eb\", \"F\", \"Gb\", \"G\" ]\n * Scale.names() => [\"major\", \"minor\", ...]\n * @module Scale\n */\nimport { name as noteName, pc } from \"tonal-note\";\nimport {\n  modes as pcsetModes,\n  chroma,\n  isSubsetOf,\n  isSupersetOf\n} from \"tonal-pcset\";\nimport { transpose } from \"tonal-distance\";\nimport { scale, chord } from \"tonal-dictionary\";\nimport { compact, unique, rotate } from \"tonal-array\";\n\nvar NO_SCALE = Object.freeze({\n  name: null,\n  intervals: [],\n  names: [],\n  chroma: null,\n  setnum: null\n});\n\nvar properties = function (name) {\n  var intervals = scale(name);\n  if (!intervals) { return NO_SCALE; }\n  var s = { intervals: intervals, name: name };\n  s.chroma = chroma(intervals);\n  s.setnum = parseInt(s.chroma, 2);\n  s.names = scale.names(s.chroma);\n  return Object.freeze(s);\n};\n\nvar memoize = function (fn, cache) { return function (str) { return cache[str] || (cache[str] = fn(str)); }; };\n\n/**\n * Get scale properties. It returns an object with:\n * - name: the scale name\n * - names: a list with all possible names (includes the current)\n * - intervals: an array with the scale intervals\n * - chroma:  scale croma (see pcset)\n * - setnum: scale chroma number\n *\n * @function\n * @param {String} name - the scale name (without tonic)\n * @return {Object}\n */\nexport var props = memoize(properties, {});\n\n/**\n * Return the available scale names\n *\n * @function\n * @param {boolean} aliases - true to include aliases\n * @return {Array} the scale names\n *\n * @example\n * Scale.names() // => [\"maj7\", ...]\n */\nexport var names = scale.names;\n\n/**\n * Given a scale name, return its intervals. The name can be the type and\n * optionally the tonic (which is ignored)\n *\n * It retruns an empty array when no scale found\n *\n * @function\n * @param {String} name - the scale name (tonic and type, tonic is optional)\n * @return {Array<String>} the scale intervals if is a known scale or an empty\n * array if no scale found\n * @example\n * Scale.intervals(\"major\") // => [ \"1P\", \"2M\", \"3M\", \"4P\", \"5P\", \"6M\", \"7M\" ]\n */\nexport var intervals = function (name) {\n  var p = tokenize(name);\n  return props(p[1]).intervals;\n};\n\n/**\n * Get the notes (pitch classes) of a scale.\n *\n * Note that it always returns an array, and the values are only pitch classes.\n *\n * @function\n * @param {String} tonic\n * @param {String} nameOrTonic - the scale name or tonic (if 2nd param)\n * @param {String} [name] - the scale name without tonic\n * @return {Array} a pitch classes array\n *\n * @example\n * Scale.notes(\"C\", \"major\") // => [ \"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\" ]\n * Scale.notes(\"C major\") // => [ \"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\" ]\n * Scale.notes(\"C4\", \"major\") // => [ \"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\" ]\n * Scale.notes(\"A4\", \"no-scale\") // => []\n * Scale.notes(\"blah\", \"major\") // => []\n */\nexport function notes(nameOrTonic, name) {\n  var p = tokenize(nameOrTonic);\n  name = name || p[1];\n  return intervals(name).map(transpose(p[0]));\n}\n\n/**\n * Check if the given name is a known scale from the scales dictionary\n *\n * @function\n * @param {String} name - the scale name\n * @return {Boolean}\n */\nexport function exists(name) {\n  var p = tokenize(name);\n  return scale(p[1]) !== undefined;\n}\n\n/**\n * Given a string with a scale name and (optionally) a tonic, split\n * that components.\n *\n * It retuns an array with the form [ name, tonic ] where tonic can be a\n * note name or null and name can be any arbitrary string\n * (this function doesn\"t check if that scale name exists)\n *\n * @function\n * @param {String} name - the scale name\n * @return {Array} an array [tonic, name]\n * @example\n * Scale.tokenize(\"C mixolydean\") // => [\"C\", \"mixolydean\"]\n * Scale.tokenize(\"anything is valid\") // => [\"\", \"anything is valid\"]\n * Scale.tokenize() // => [\"\", \"\"]\n */\nexport function tokenize(str) {\n  if (typeof str !== \"string\") { return [\"\", \"\"]; }\n  var i = str.indexOf(\" \");\n  var tonic = noteName(str.substring(0, i)) || noteName(str) || \"\";\n  var name = tonic !== \"\" ? str.substring(tonic.length + 1) : str;\n  return [tonic, name.length ? name : \"\"];\n}\n\n/**\n * Find mode names of a scale\n *\n * @function\n * @param {String} name - scale name\n */\nexport var modeNames = function (name) {\n  var ivls = intervals(name);\n  var tonics = notes(name);\n\n  return pcsetModes(ivls)\n    .map(function (chroma, i) {\n      var name = scale.names(chroma)[0];\n      if (name) { return [tonics[i] || ivls[i], name]; }\n    })\n    .filter(function (x) { return x; });\n};\n\n/**\n * Get all chords that fits a given scale\n *\n * @function\n * @param {String} name\n */\nexport var chords = function (name) {\n  var inScale = isSubsetOf(intervals(name));\n  return chord.names().filter(function (name) { return inScale(chord(name)); });\n};\n\n/**\n * Given an array of notes, return the scale: a pitch class set starting from\n * the first note of the array\n *\n * @function\n * @param {Array} notes\n * @return {Array}\n */\nexport var toScale = function (notes) {\n  var pcset = compact(notes.map(pc));\n  if (!pcset.length) { return pcset; }\n  var tonic = pcset[0];\n  var scale = unique(pcset);\n  return rotate(scale.indexOf(tonic), scale);\n};\n\n/**\n * Get all scales names that are a superset of the given one\n * (has the same notes and at least one more)\n *\n * @function\n * @param {String} name\n * @return {Array} a list of scale names\n */\nexport var supersets = function (name) {\n  if (!intervals(name).length) { return []; }\n  var isSuperset = isSupersetOf(intervals(name));\n  return scale.names().filter(function (name) { return isSuperset(scale(name)); });\n};\n\n/**\n * Find all scales names that are a subset of the given one\n * (has less notes but all from the given scale)\n *\n * @function\n * @param {String} name\n * @return {Array} a list of scale names\n */\nexport var subsets = function (name) {\n  var isSubset = isSubsetOf(intervals(name));\n  return scale.names().filter(function (name) { return isSubset(scale(name)); });\n};\n","/**\n * [![npm version](https://img.shields.io/npm/v/tonal-chord.svg)](https://www.npmjs.com/package/tonal-chord)\n * [![tonal](https://img.shields.io/badge/tonal-chord-yellow.svg)](https://www.npmjs.com/browse/keyword/tonal)\n *\n * `tonal-chord` is a collection of functions to manipulate musical chords\n *\n * This is part of [tonal](https://www.npmjs.com/package/tonal) music theory library.\n *\n * @example\n * // es6\n * import * as Chord from \"tonal-chord\"\n * // es5\n * const Chord = require(\"tonal-chord\")\n *\n * @example\n * Chord.notes(\"CMaj7\") // => [\"C\", \"E\", \"G\", \"B\"]\n *\n * @module Chord\n */\nimport { tokenize as split } from \"tonal-note\";\nimport { transpose } from \"tonal-distance\";\nimport { chord } from \"tonal-dictionary\";\nimport { chroma, isSubsetOf, isSupersetOf } from \"tonal-pcset\";\n\n/**\n * Return the available chord names\n *\n * @function\n * @param {boolean} aliases - true to include aliases\n * @return {Array} the chord names\n *\n * @example\n * Chord.names() // => [\"maj7\", ...]\n */\nexport var names = chord.names;\n\nvar NO_CHORD = Object.freeze({\n  name: null,\n  names: [],\n  intervals: [],\n  chroma: null,\n  setnum: null\n});\n\nvar properties = function (name) {\n  var intervals = chord(name);\n  if (!intervals) { return NO_CHORD; }\n  var s = { intervals: intervals, name: name };\n  s.chroma = chroma(intervals);\n  s.setnum = parseInt(s.chroma, 2);\n  s.names = chord.names(s.chroma);\n  return s;\n};\n\nvar memo = function (fn, cache) {\n  if ( cache === void 0 ) cache = {};\n\n  return function (str) { return cache[str] || (cache[str] = fn(str)); };\n};\n\n/**\n * Get chord properties. It returns an object with:\n *\n * - name: the chord name\n * - names: a list with all possible names (includes the current)\n * - intervals: an array with the chord intervals\n * - chroma:  chord croma (see pcset)\n * - setnum: chord chroma number\n *\n * @function\n * @param {String} name - the chord name (without tonic)\n * @return {Object} an object with the properties or a object with all properties\n * set to null if not valid chord name\n */\nexport var props = memo(properties);\n\n/**\n * Get chord intervals. It always returns an array\n *\n * @function\n * @param {String} name - the chord name (optionally a tonic and type)\n * @return {Array<String>} a list of intervals or null if the type is not known\n */\nexport var intervals = function (name) { return props(tokenize(name)[1]).intervals; };\n\n/**\n * Get the chord notes of a chord. This function accepts either a chord name\n * (for example: \"Cmaj7\") or a list of notes.\n *\n * It always returns an array, even if the chord is not found.\n *\n * @function\n * @param {String} nameOrTonic - name of the chord or the tonic (if the second parameter is present)\n * @param {String} [name] - (Optional) name if the first parameter is the tonic\n * @return {Array} an array of notes or an empty array\n *\n * @example\n * Chord.notes(\"Cmaj7\") // => [\"C\", \"E\", \"G\", \"B\"]\n * Chord.notes(\"C\", \"maj7\") // => [\"C\", \"E\", \"G\", \"B\"]\n */\nexport function notes(nameOrTonic, name) {\n  var p = tokenize(nameOrTonic);\n  name = name || p[1];\n  return props(name).intervals.map(transpose(p[0]));\n}\n\n/**\n * Check if a given name correspond to a chord in the dictionary\n *\n * @function\n * @param {String} name\n * @return {Boolean}\n * @example\n * Chord.exists(\"CMaj7\") // => true\n * Chord.exists(\"Maj7\") // => true\n * Chord.exists(\"Ablah\") // => false\n */\nexport var exists = function (name) { return chord(tokenize(name)[1]) !== undefined; };\n\n/**\n * Get all chords names that are a superset of the given one\n * (has the same notes and at least one more)\n *\n * @function\n * @param {String} name\n * @return {Array} a list of chord names\n */\nexport var supersets = function (name) {\n  if (!intervals(name).length) { return []; }\n  var isSuperset = isSupersetOf(intervals(name));\n  return chord.names().filter(function (name) { return isSuperset(chord(name)); });\n};\n\n/**\n * Find all chords names that are a subset of the given one\n * (has less notes but all from the given chord)\n *\n * @function\n * @param {String} name\n * @return {Array} a list of chord names\n */\nexport var subsets = function (name) {\n  var isSubset = isSubsetOf(intervals(name));\n  return chord.names().filter(function (name) { return isSubset(chord(name)); });\n};\n\n// 6, 64, 7, 9, 11 and 13 are consider part of the chord\n// (see https://github.com/danigb/tonal/issues/55)\nvar NUM_TYPES = /^(6|64|7|9|11|13)$/;\n/**\n * Tokenize a chord name. It returns an array with the tonic and chord type\n * If not tonic is found, all the name is considered the chord name.\n *\n * This function does NOT check if the chord type exists or not. It only tries\n * to split the tonic and chord type.\n *\n * @function\n * @param {String} name - the chord name\n * @return {Array} an array with [type, tonic]\n * @example\n * Chord.tokenize(\"Cmaj7\") // => [ \"C\", \"maj7\" ]\n * Chord.tokenize(\"C7\") // => [ \"C\", \"7\" ]\n * Chord.tokenize(\"mMaj7\") // => [ \"\", \"mMaj7\" ]\n * Chord.tokenize(\"Cnonsense\") // => [ \"C\", \"nonsense\" ]\n */\nexport function tokenize(name) {\n  var p = split(name);\n  if (p[0] === \"\") { return [\"\", name]; }\n  // aug is augmented (see https://github.com/danigb/tonal/issues/55)\n  if (p[0] === \"A\" && p[3] === \"ug\") { return [\"\", \"aug\"]; }\n\n  if (NUM_TYPES.test(p[2])) {\n    return [p[0] + p[1], p[2] + p[3]];\n  } else {\n    return [p[0] + p[1] + p[2], p[3]];\n  }\n}\n","/**\n * [![npm version](https://img.shields.io/npm/v/tonal-key.svg?style=flat-square)](https://www.npmjs.com/package/tonal-key)\n *\n * The `Tonal` module is a facade to the rest of the modules. They are namespaced,\n * so for example to use `pc` function from `tonal-note` you have to write:\n * `Tonal.Note.pc`\n *\n * It exports the following modules:\n * - Note\n * - Interval\n * - Distance\n * - Scale\n * - Chord\n * - PcSet\n *\n * Additionally this facade exports some functions without namespace (see \"Methods\" below)\n *\n * @example\n * // es6 modules\n * import * as Tonal from \"tonal\"\n * Tonal.Note.name(\"cx\") // => \"C##\"\n *\n * @example\n * import { Note } from \"tonal\"\n * Note.name(\"bb\") // => \"Bb\"\n *\n * @example\n * // es5 node modules\n * var Tonal = require(\"tonal\");\n * Tonal.Distance.transpose(Tonal.Note.pc(\"C#2\"), \"M3\") // => \"E#\"\n * Tonal.Chord.notes(\"Dmaj7\") // => [\"D\", \"F#\", \"A\", \"C#\"]\n *\n * @module Tonal\n */\nimport * as Array from \"tonal-array\";\nimport * as Note from \"tonal-note\";\nimport * as Interval from \"tonal-interval\";\nimport * as Distance from \"tonal-distance\";\nimport * as Dictionary from \"tonal-dictionary\";\nimport * as Scale from \"tonal-scale\";\nimport * as Chord from \"tonal-chord\";\nimport * as PcSet from \"tonal-pcset\";\n\nexport { Array, Note, Interval, Distance, Scale, Chord, PcSet, Dictionary };\n\n/**\n * Transpose a note by an interval\n * @function\n * @param {String} note\n * @param {String} interval\n * @return {String} the transported note\n * @see Distance.transpose\n */\nexport const transpose = Distance.transpose;\n\n/**\n * Get the interval from two notes\n * @function\n * @param {String} from\n * @param {String} to\n * @return {String} the interval in reverse shorthand notation\n * @see Distance.interval\n */\nexport const interval = Distance.interval;\n\n/**\n * Get note properties\n * @function\n * @param {String} note - the note name\n * @return {Object}\n * @see Note.props\n * @example\n * Tonal.note(\"A4\").chroma // => 9\n */\nexport const note = Note.props;\n\n/**\n * Get midi note number\n * @function\n * @param {String} note\n * @return {Number}\n * @see Note.midi\n * @example\n * Tonal.midi(\"A4\") // => 49\n */\nexport const midi = Note.midi;\n\n/**\n * Get note frequency using equal tempered tuning at 440\n * @function\n * @param {String} note\n * @return {Number}\n * @see Note.freq\n * @example\n * Tonal.freq(\"A4\") // => 440\n */\nexport const freq = Note.freq;\n\n/**\n * Get intervals from a chord type\n * @function\n * @param {String} type - the chord type (no tonic)\n * @return {Array} an array of intervals or undefined if the chord type is not known\n * @see Dictionary.chord\n * @example\n * Tonal.chord(\"m7b5\") // => [\"1P\", \"3m\", \"5d\", \"7m\"]\n */\nexport const chord = Dictionary.chord;\n\n/**\n * Get intervals from scale name\n * @function\n * @param {String} name - the scale name (without tonic)\n * @return {Array} an array of intervals or undefiend if the scale is not kown\n * @example\n * Tonal.scale(\"major\") // => [\"1P\", \"2M\", \"3M\"...]\n */\nexport const scale = Dictionary.scale;\n","import { getMidi } from \"../util\";\n\nexport class Instrument {\n    midiOffset = 0;\n    onPlay: (keys: number[]) => any;\n    onStop: (keys: number[]) => any;\n    ready: Promise<any>;\n    gain = 1;\n\n    context: any;\n    mix: any;\n    constructor({ context, gain, mix, onPlay, onStop, midiOffset }: any = {}) {\n        this.onPlay = onPlay;\n        this.midiOffset = midiOffset || this.midiOffset;\n        this.onStop = onStop;\n        this.gain = gain || this.gain;\n        this.init({ context, mix });\n    }\n\n    init({ context, mix }) {\n        if (!context && (!mix || !mix.context)) {\n            console.warn(`you should pass a context or a mix (gainNode) to a new Instrument. \n            You can also Call init with {context,mix} to setup the Instrument later`);\n            return;\n        }\n        this.context = context || mix.context;\n        this.mix = mix || this.context.destination;\n    }\n\n    playNotes(notes: string[], settings) {\n        this.playKeys(notes.map(note => getMidi(note, this.midiOffset)), settings);\n    }\n\n    playKeys(keys: number[], settings?) {\n        if (this.onPlay) {\n            return this.onPlay(keys);\n        }\n        // TODO: fire callbacks after keys.map((key,i)=>i*settings.interval)?\n    }\n}","import { Instrument } from './Instrument';\nimport { Note } from 'tonal';\nimport { adsr } from '../util';\n\nexport class Synthesizer extends Instrument {\n    duration = 200;\n    type = 'sine';\n    gain = 0.9;\n    attack = .05;\n    decay = .05;\n    sustain = .4;\n    release = .1;\n\n    constructor(props: any) {\n        super(props);\n        this.duration = props.duration || this.duration;\n        this.type = props.type || this.type;\n        this.gain = props.gain || this.gain;\n    }\n\n    init(context) {\n        super.init(context);\n    }\n\n    getVoice(type = 'sine', gain = 0, frequency = 440) {\n        const oscNode = this.context.createOscillator();\n        oscNode.type = type;\n        const gainNode = this.context.createGain();\n        oscNode.connect(gainNode);\n        gainNode.gain.value = typeof gain === 'number' ? gain : 0.8;\n        gainNode.connect(this.mix);\n        oscNode.frequency.value = frequency;\n        return { oscNode, gainNode };\n    }\n\n    lowestGain(a, b) {\n        return a.gain.gain.value < b.gain.gain.value ? -1 : 0;\n    }\n\n    playKeys(keys: number[], settings: any = {}) {\n        super.playKeys(keys, settings); // fires callback   \n        //const time = this.context.currentTime + settings.deadline / 1000;\n        const time = settings.deadline || this.context.currentTime;\n        const interval = settings.interval || 0;\n        keys.map((key, i) => {\n            const delay = i * interval;\n            const [attack, decay, sustain, release, duration, gain] =\n                [\n                    settings.attack || this.attack,\n                    settings.decay || this.decay,\n                    settings.sustain || this.sustain,\n                    settings.release || this.release,\n                    (settings.duration || this.duration) / 1000,\n                    (settings.gain || 1) * this.gain\n                ]\n            const voice = this.getVoice(this.type, 0, Note.freq(key));\n            adsr({ attack, decay, sustain, release, gain, duration, }, time + delay, voice.gainNode.gain);\n            voice.oscNode.start(settings.deadline + delay);\n        })\n    }\n}","import { Chord, Distance, Interval, Note } from 'tonal';\nimport { Synthesizer } from './instruments/Synthesizer';\n\nexport function randomNumber(n) {\n    return Math.floor(Math.random() * n)\n}\n\nexport function arraySum(array) {\n    return array.reduce((s, i) => s + i, 0);\n}\n\nexport function randomElement(array, weighted?) {\n    if (!weighted) {\n        return array[randomNumber(array.length)];\n    }\n    const r = randomNumber(arraySum(weighted)) + 1;\n    const total = weighted\n        .reduce((abs, w, i) => abs.concat(w + (abs.length ? abs[i - 1] : 0)), []);\n    return array[total.indexOf(total.find((s, i) => s >= r))];\n}\n\nexport function getTonalChord(chord) {\n    chord = chord\n        .replace('-', 'm')\n        .replace('^', 'M')\n        .replace('h7', 'm7b5')\n        .replace('h', 'dim');\n    /**\n     * Chords that dont work:\n     * slash cords are ignored\n     * 7b9b5 does not work\n     * \n     */\n    const tokens = Chord.tokenize(chord);\n    const s = tokens[1].split('/');\n    return tokens[0] + (s[0] || 'M');\n}\n\nexport function getMidi(note, offset) {\n    return Note.props(note).midi - offset;\n}\n\n/** Travels path along measures */\nexport function getPath(path, measures, traveled = []) {\n    if (!Array.isArray(measures[path[0]]) || path.length === 1) {\n        return measures[Math.min(path[0], measures.length - 1)];\n    }\n    return this.getPath(path.slice(1), measures[path[0]], traveled.concat(path[0]));\n}\n\nexport function resolveChords(pattern, measures, path, divisions = []) {\n    if (Array.isArray(pattern)) {\n        // division: array of children lengths down the path (to calculate fraction)\n        divisions = [].concat(divisions, [pattern.length]);\n        return pattern.map((p, i) => this.resolveChords(p, measures, path.concat([i]), divisions));\n    }\n    if (pattern === 0) {\n        return 0;\n    }\n    //const split = (pattern + '').split('.');\n    //const gain = parseFloat('0.' + split[1]); //digit(s) after .\n    //const fraction = (parseInt(split[0]) || 1) * divisions.reduce((f, d) => f / d, 1000); // fraction of one\n    const fraction = pattern * divisions.reduce((f, d) => f / d, 1000); // fraction of one\n    if (fraction === 0) {\n        console.warn('fraction is 0', pattern);\n    }\n    return { chord: this.getPath(path, measures), pattern, /* gain, */ path, divisions, fraction };\n}\n\nexport function hasOff(pattern, division = 3) {\n    return Array.isArray(pattern) && pattern.length === division && pattern[division - 1] !== 0;\n}\n\n// replaces offs on last beat with next chord + erases next one\nexport function offbeatReducer(settings) {\n    // TODO: find out why some offbeats sound sketchy\n    return (measures, bar, index) => {\n        const last = index > 0 ? measures[index - 1] : null;\n        if (last && this.hasOff(last[settings.cycle - 1], settings.division)) {\n            last[settings.cycle - 1][settings.division - 1] = bar[0];\n            bar[0] = 0;\n        }\n        return measures.concat([bar]);\n    };\n}\n\nexport function invertInterval(interval) {\n    if (Interval.semitones(interval) < 0) {\n        return Interval.invert(interval.slice(1));\n    }\n    return '-' + Interval.invert(interval);\n}\n\n// use Interval.ic?\nexport function smallestInterval(interval) {\n    interval = Interval.simplify(interval);\n    if (interval === '0A') {\n        interval = '1P'; // TODO: issue for tonal-interval (0A does not support invert and is not simple)\n    }\n    let inversion = this.invertInterval(interval);\n    if (Math.abs(Interval.semitones(inversion)) < Math.abs(Interval.semitones(interval))) {\n        return inversion;\n    }\n    return interval || '';\n}\n\nexport function minInterval(a, b, preferRightMovement) {\n    const semitones = [Math.abs(Interval.semitones(a)), Math.abs(Interval.semitones(b))];\n    if (semitones[0] === semitones[1]) {\n        if (preferRightMovement) {\n            return semitones[0] < 0 ? -1 : 1;\n        }\n        return semitones[0] > 0 ? -1 : 1;\n    }\n    return semitones[0] < semitones[1] ? -1 : 1;\n}\n\nexport function intervalMatrix(from, to) {\n    return to.map(note => from\n        .map(n => {\n            return Distance.interval(n, note)\n        })\n        .map(d => this.smallestInterval(d))\n        .map(i => i.slice(0, 2) === '--' ? i.slice(1) : i)\n    )\n}\n\nexport function randomSynth(mix, allowed = ['sine', 'triangle', 'square', 'sawtooth']) {\n    const gains = {\n        sine: 0.9,\n        triangle: 0.8,\n        square: 0.2,\n        sawtooth: 0.3\n    }\n    const wave = randomElement(allowed);\n    return new Synthesizer({ gain: gains[wave], type: wave, mix });\n}\n\nexport function adsr({ attack, decay, sustain, release, gain, duration }, time, param) {\n    // console.log('adsr', attack, decay, sustain, release, gain, duration, time);\n    param.linearRampToValueAtTime(gain, time + attack);\n    param.setTargetAtTime(sustain * gain, time + Math.min(attack + decay, duration), decay);\n    param.setTargetAtTime(0, time + Math.max(duration - attack - decay, attack + decay, duration), release);\n}\n","import { Instrument } from \"../instruments/Instrument\";\n\nexport class Musician {\n    ready: Promise<any>;\n    instrument: Instrument;\n    constructor(instrument) {\n        if (!instrument) {\n            console.warn('musician has no instrument', this);\n        }\n        this.instrument = instrument;\n        this.ready = this.instrument ? this.instrument.ready : Promise.resolve();\n    }\n    play({ pulse, measures, settings }) {\n        console.log('play..', pulse, measures, settings);\n    }\n}","import { randomElement } from \"../util\";\n\nexport const swing = {\n    chords: ({ measure, settings }) => {\n        const off = () => randomElement([0, [0, 0, 2]], [6, 1]);\n        const r = Math.random() > 0.5 ? .6 : 0;\n        const t = `${settings.cycle}/${measure.length}`;\n        if (t === '4/1') {\n            return randomElement([\n                [[1, 0], [0, 0, 7], 0, 0],\n                [1, [0, 0, 2], 0, off()],\n                [[0, 0, 1], 0, 2, 0],\n                [[0, 0, 4], 0, 1, 0],\n                [2, 0, 0, 0],\n                [3, 0, 0, 0],\n                [1, 0, r, off()],\n                [[0, 0, 2], 0, r, 0],\n                [1.5, [0, 0, 2], 0, off()],\n            ]);//, [2, 1, 1]\n        }\n        if (t === '4/2') {\n            return randomElement([\n                [[1, 0], [0, 0, 7], 0, 0],\n                [1, [0, 0, 2], 0, 0],\n                [1, 0, 2, 0],\n                [2, 0, 1, 0],\n                [1, 0, .7, off()],\n                [[1, 0, 0], 0, .7, off()],\n                [[4, 0, 0], [0, 0, 2.8], 0, off()],\n            ],/*  [1, 2] */);\n        }\n\n        if (t === '4/3') {\n            return [1, [0, 0, 2], [0, 0, 4], 0];\n        }\n        if ('4/4') {\n            return randomElement([\n                [1, 1, 1, 1],\n                [[1, 0, 2], [0, 0, 2], 0, 1]\n            ]);\n        }\n    },\n    bass: () => randomElement([\n        [1, 1, 1, 1],\n    ]),\n    crash: ({ measures, index }) => {\n        const fill = index !== 0 && index % measures.length === 0;\n        if (fill) {\n            return [4, 0, 0, 0];\n        }\n        return [0, 0, 0, 0];\n    },\n    ride: ({ measures, index }) => {\n        return randomElement([\n            [.6, [.9, 0, 1], .6, [.9, 0, 1]],\n            [.6, [.4, 0, 1], .8, [0, 0, 1],],\n            [.6, .9, [.6, 0, 1], 1],\n            [.6, .9, .6, [.9, 0, 1]],\n        ], [3, 2, 1, 2])\n    },\n    hihat: () => [0, .8, 0, 1]\n};","import { Distance } from 'tonal';\nimport { Chord } from 'tonal';\nimport { getTonalChord, offbeatReducer, resolveChords, intervalMatrix, minInterval } from '../util';\nimport { Musician } from './Musician';\nimport { Instrument } from '../instruments/Instrument';\nimport { swing } from '../grooves/swing';\n\nexport default class Pianist extends Musician {\n    playedNotes = [];\n    playedPatterns = [];\n    playedChords = [];\n    defaults = { intelligentVoicings: true, groove: swing, noTonic: true };\n    min = Math.min;\n    rollFactor = 3; // how much keyroll effect? controls interval between notes\n    props: any;\n    instrument: Instrument;\n    constructor(instrument, props = {}) {\n        super(instrument);\n        this.props = Object.assign({}, this.defaults, props || {});\n    }\n\n    play({ pulse, measures, settings }) {\n        const groove = settings.groove || this.defaults.groove;\n        const pattern = groove['chords'];\n        if (!pattern) {\n            console.warn('style has no chords..');\n            return;\n        }\n        const measureLength = pulse.getMeasureLength();\n        if (settings.exact) {\n            return pulse.tickArray(measures, (t) => {\n                this.playChord(t.value, { deadline: t.deadline + settings.delay });\n            });\n        }\n        measures = measures\n            // generate random patterns\n            .map(measure => pattern({ measures, pulse, measure, settings }).slice(0, Math.floor(settings.cycle)))\n            // fill in chords\n            .map((pattern, i) => resolveChords(pattern, measures, [i]))\n            // fix chords at last offbeat\n            .reduce(offbeatReducer(settings), []);\n        pulse.tickArray(measures, ({ path, value, deadline }) => {\n            const humanFactor = settings.bpm / (this.rollFactor || 1);\n            let interval = settings.arpeggio ? measureLength / settings.cycle : Math.random() / (humanFactor * 20);\n            if (path[0] % 2 === 0 && !path[1] && !path[2]) {\n                interval = Math.random() / humanFactor;\n            }\n            const duration = settings.arpeggio ? interval : value.fraction * measureLength;\n            const slice = settings.arpeggio ? Math.ceil(value.fraction / 1000 * 4) : null;\n            const gain = value.gain || this.instrument.gain;\n            this.playChord(value.chord, { deadline, gain, duration, interval, slice });\n        }, settings.deadline);\n    }\n\n    getLastVoicing() {\n        return this.playedNotes.length ? this.playedNotes[this.playedNotes.length - 1] : null;\n    }\n\n    getVoicing(scorenotes, before, tonic?) {\n        if (!before) {\n            return scorenotes;\n        }\n        const near = intervalMatrix(before, scorenotes)\n            .map((intervals, index) => {\n                const smallest = [].concat(intervals)\n                    .sort((a, b) => minInterval(a, b, false))[0];\n                if (!Distance.transpose(before[intervals.indexOf(smallest)], smallest)) {\n                    console.warn('ALARM', before[intervals.indexOf(smallest)], smallest, intervals);\n                }\n                return Distance.transpose(before[intervals.indexOf(smallest)], smallest);\n            }).filter(n => !!n);\n        return near && near.length ? near : scorenotes;\n    }\n\n    // plays the given notes at the given interval\n    playNotes(scorenotes, { tonic, deadline, interval, gain, duration }) {\n        if (this.props.intelligentVoicings && this.getLastVoicing()) {\n            scorenotes = this.getVoicing(scorenotes, this.getLastVoicing(), tonic);\n        }\n        this.playedNotes.push([].concat(scorenotes));\n        this.instrument.playNotes(scorenotes, { deadline, interval, gain, duration });\n    }\n\n    playChord(chord, settings) {\n        if (chord === 'N.C.') {\n            console.log('N.C.');\n            return;\n        }\n        if (!chord || chord === 'x') { // repeat\n            chord = this.playedChords[this.playedChords.length - 1];\n        }\n        this.playedChords.push(chord);\n        chord = Chord.tokenize(getTonalChord(chord));\n\n        let notes = Chord.intervals(chord[1])\n            .map(i => i.replace('13', '6')) // TODO: better control over octave\n            .map(root => Distance.transpose(chord[0] + '3', root));\n        if (notes.length > 3 && settings.noTonic) {\n            notes = notes.slice(this.props.noTonic ? 1 : 0);\n        }\n        if (settings.slice) {\n            notes = notes.slice(0, settings.slice ? settings.slice : notes.length);\n        }\n        this.playNotes(notes, settings);\n    }\n}\n","import { Musician } from './Musician';\nimport { swing } from '../grooves/swing';\n\nexport default class Drummer extends Musician {\n    set = {\n        kick: 0,\n        snare: 1,\n        hihat: 2,\n        ride: 3,\n        crash: 4\n    }\n    defaults = { groove: swing }\n\n    constructor(instrument) {\n        super(instrument);\n    }\n\n    play({ measures, pulse, settings }) {\n        const groove = settings.groove || this.defaults.groove;\n\n        Object.keys(groove)\n            .filter(t => Object.keys(this.set).includes(t)) // only use drum set patterns\n            .forEach(key => {\n                const patterns = measures\n                    .map((measure, index) => groove[key]({ measures, index, measure, settings, pulse })\n                        .slice(0, Math.floor(settings.cycle)));\n                pulse.tickArray(patterns, ({ deadline, value }) => {\n                    this.instrument.playKeys([this.set[key]], { deadline, gain: value });\n                }, settings.deadline);\n            });\n    }\n}","import { resolveChords, getTonalChord, randomElement } from '../util';\nimport { Musician } from './Musician';\nimport { Chord, Distance } from 'tonal';\nimport { swing } from '../grooves/swing';\n\nexport default class Bassist extends Musician {\n    styles: { [key: string]: any };\n    defaults = { groove: swing }\n    playedChords: string[] = [];\n\n    constructor(instrument) {\n        super(instrument);\n    }\n\n    play({ measures, pulse, settings }) {\n        const groove = settings.groove || this.defaults.groove;\n        const pattern = groove['bass'];\n        measures = measures\n            .map(measure => pattern({ measures, measure, settings, pulse }).slice(0, Math.floor(settings.cycle)))\n            .map((pattern, i) => resolveChords(pattern, measures, [i]));\n        pulse.tickArray(measures, (tick) => {\n            this.playBass(tick, measures, pulse);\n        }, settings.deadline);\n    }\n\n    getStep(step, chord, octave = 1) {\n        const tokens = Chord.tokenize(getTonalChord(chord));\n        const interval = Chord.intervals(tokens[1]).find(i => parseInt(i[0]) === step);\n        return Distance.transpose(tokens[0] + octave, interval);\n    }\n\n    playBass({ value, cycle, path, deadline, interval }, measures, pulse) {\n        let chord = value.chord;\n        if (chord === 'N.C.') {\n            return;\n        }\n        if (!chord || chord === 'x') { // repeat // TODO: support 'r' \n            chord = this.playedChords[this.playedChords.length - 1];\n        }\n        this.playedChords.push(chord);\n        let note;\n        const steps = [1, randomElement([3, 5]), 1, randomElement([3, 5])];\n        const octave = 1;\n        if (value.value === 1 && chord.split('/').length > 1) {\n            note = chord.split('/')[1] + octave;\n        } else {\n            note = this.getStep(steps[path[1]], getTonalChord(chord), octave);\n        }\n        const duration = value.fraction * pulse.getMeasureLength();\n        this.instrument.playNotes([note], { deadline, interval, gain: 0.7, duration });\n    }\n}","import { Instrument } from './Instrument';\nimport { adsr } from '../util';\n\nexport class Sampler extends Instrument {\n    buffers = {};\n    context: AudioContext;\n    overlap: any;\n    samples: Promise<any[]>;\n    sources: any;\n    gainNode: GainNode;\n    duration = 10000;\n    type = 'sine';\n    gain = 1;\n    attack = 0;\n    decay = 0;\n    sustain = 1;\n    release = .2;\n\n    constructor(options: any = {}) {\n        super(options);\n        this.gain = options.gain || this.gain;\n        this.gainNode = this.context.createGain();\n        this.gainNode.connect(this.context.destination);\n        this.duration = options.duration || this.duration;\n        // this.overlap = options.overlap;\n        if (options.samples) {\n            this.sources = options.samples;\n            this.ready = this.loadSources(options.samples)\n        }\n    }\n\n    // returns buffer from buffer cache or loads buffer data from source\n    getBuffer(src, context = this.context) {\n        if (this.buffers[src] && this.buffers[src].context === context) {\n            // console.log('buffer already present');\n            return Promise.resolve(this.buffers[src].buffer);\n        }\n        return fetch(src)\n            .then(res => res.arrayBuffer())\n            .then(buffer => {\n                return new Promise((resolve, reject) => {\n                    context.decodeAudioData(buffer, (decodedData) => {\n                        this.buffers[src] = { buffer: decodedData, context };\n                        resolve(decodedData);\n                    });\n                })\n            });\n    }\n\n    getSource(buffer, connect?) {\n        const source = this.context.createBufferSource();\n        connect = connect || this.gainNode;\n        source.buffer = buffer;\n        source.connect(connect);\n        return source;\n    }\n\n    getSources(sources, context = this.context) {\n        if (!this.hasLoaded(sources)) {\n            console.error('not all sources loaded!!!');\n            return [];\n        }\n        return sources.map(source => this.getSource(this.buffers[source].buffer));\n    }\n\n    // loads a sound file into the context\n    loadSource(src, context = this.context) {\n        return this.getBuffer(src, context)\n            .then(decodedData => this.getSource(decodedData));\n    }\n\n    // loads multiple sources into the context\n    loadSources(sources, context = this.context) {\n        sources.forEach((source, i) => {\n            if (!source) {\n                console.warn(`note at index ${i} cannot be played!`);\n            }\n        })\n        return Promise.all(sources.filter(source => !!source).map(source => this.loadSource(source, context)));\n    }\n\n    hasLoaded(sources, context = this.context) {\n        return sources.reduce((allLoaded, src) => {\n            return allLoaded && this.buffers[src] && this.buffers[src].context === context\n        }, true);\n    }\n\n    playSounds(sounds, deadline = 0, interval = 0) {\n        sounds.forEach((sound, i) => sound.start(deadline + interval * i))\n    }\n\n    playSource(source, settings) {\n        const gainNode = this.context.createGain();\n        const sound = this.getSource(this.buffers[source].buffer, gainNode);\n        const [attack, decay, sustain, release, duration, gain] =\n            [\n                settings.attack || this.attack,\n                settings.decay || this.decay,\n                settings.sustain || this.sustain,\n                settings.release || this.release,\n                (settings.duration || this.duration) / 1000,\n                (settings.gain || 1) * this.gain\n            ]\n        const time = settings.deadline || this.context.currentTime;\n        //gainNode.gain.value = typeof settings.gain === 'number' ? settings.gain : this.gain;\n        gainNode.connect(this.mix);\n        adsr({ attack, decay, sustain, release, gain, duration, }, time, gainNode.gain);\n        this.playSounds([sound], settings.deadline || 0, 0)\n    }\n\n    /* playSources(sources, deadline = 0, interval = 0) {\n        if (this.hasLoaded(sources, this.context)) {\n            this.playSounds(this.getSources(sources, this.context), deadline, interval)\n        } else {\n            console.warn('need to load');\n            this.loadSources(sources, this.context)\n                .then(sounds => this.playSounds(sounds, deadline, interval));\n        }\n    } */\n\n    playKeys(keys: number[], settings) {\n        super.playKeys(keys, settings);\n        keys.map(key => {\n            this.playSource(this.sources[key], settings);\n        });\n    }\n}","export class Kick {\n    osc: any;\n    context: any;\n    gain: any;\n    constructor(context) {\n        this.context = context;\n    }\n    setup() {\n        this.osc = this.context.createOscillator();\n        this.gain = this.context.createGain();\n        this.osc.connect(this.gain);\n        this.gain.connect(this.context.destination)\n    }\n    trigger(time) {\n        this.setup();\n\n        this.osc.frequency.setValueAtTime(150, time);\n        this.gain.gain.setValueAtTime(1, time);\n\n        this.osc.frequency.exponentialRampToValueAtTime(0.01, time + 0.5);\n        this.gain.gain.exponentialRampToValueAtTime(0.01, time + 0.5);\n\n        this.osc.start(time);\n\n        this.osc.stop(time + 0.5);\n    }\n}","export class Snare {\n    context: any;\n    noise: any;\n    noiseEnvelope: any;\n    osc: any;\n    oscEnvelope: any;\n    constructor(context) {\n        this.context = context;\n    }\n    noiseBuffer() {\n        var bufferSize = this.context.sampleRate;\n        var buffer = this.context.createBuffer(1, bufferSize, this.context.sampleRate);\n        var output = buffer.getChannelData(0);\n\n        for (var i = 0; i < bufferSize; i++) {\n            output[i] = Math.random() * 2 - 1;\n        }\n\n        return buffer;\n    }\n    setup() {\n        this.noise = this.context.createBufferSource();\n        this.noise.buffer = this.noiseBuffer();\n        var noiseFilter = this.context.createBiquadFilter();\n        noiseFilter.type = 'highpass';\n        noiseFilter.frequency.value = 1000;\n        this.noise.connect(noiseFilter);\n\n        this.noiseEnvelope = this.context.createGain();\n        noiseFilter.connect(this.noiseEnvelope);\n\n        this.noiseEnvelope.connect(this.context.destination);\n        this.osc = this.context.createOscillator();\n        this.osc.type = 'triangle';\n\n        this.oscEnvelope = this.context.createGain();\n        this.osc.connect(this.oscEnvelope);\n        this.oscEnvelope.connect(this.context.destination);\n    };\n    trigger(time) {\n        this.setup();\n\n        this.noiseEnvelope.gain.setValueAtTime(1, time);\n        this.noiseEnvelope.gain.exponentialRampToValueAtTime(0.01, time + 0.2);\n        this.noise.start(time)\n\n        this.osc.frequency.setValueAtTime(100, time);\n        this.oscEnvelope.gain.setValueAtTime(0.7, time);\n        this.oscEnvelope.gain.exponentialRampToValueAtTime(0.01, time + 0.1);\n        this.osc.start(time)\n\n        this.osc.stop(time + 0.2);\n        this.noise.stop(time + 0.2);\n    };\n}","import { Instrument } from \"./Instrument\";\nimport { Kick } from \"./Kick\";\nimport { Snare } from \"./Snare\";\n\nexport class PlasticDrums extends Instrument {\n    kick: Kick;\n    snare: Snare;\n    keys: any[];\n\n    constructor(options) {\n        super(options);\n        this.keys = [\n            new Kick(this.context),\n            new Snare(this.context)\n        ];\n    }\n\n    playKeys(keys, { deadline, gain, value }) {\n        const sounds = keys.filter(key => !!this.keys[key]).map(key => this.keys[key]);\n        if (sounds.length < keys.length) {\n            const missing = keys.filter(key => !this.keys[key]);\n            console.warn('PlasticDrums missing keys:', missing);\n        }\n        sounds.forEach(sound => sound.trigger(deadline));\n    }\n}","import { Synthesizer } from './instruments/Synthesizer';\n\nexport class Metronome {\n    sampler: any;\n    ready: Promise<any[]>;\n    synth: Synthesizer;\n\n    constructor(mix) {\n        this.synth = new Synthesizer({ type: 'sine', gain: 1, mix });\n        this.ready = this.synth.ready;\n    }\n    count(pulse, bars = 1) {\n        const count = new Array(bars).fill(\n            [new Array(pulse.props.cycle).fill(1)]\n        );\n        return pulse.tickArray(count, ({ path, deadline }) => {\n            this.synth.playKeys([path[2] === 0 ? 90 : 78], { deadline, duration: 0.01, attack: .01, release: .01, decay: .01, sustain: 1 });\n        });\n    }\n}","import { randomSynth } from './util';\nimport Band from './Band';\nimport Pianist from './musicians/Pianist';\nimport Bassist from './musicians/Bassist';\nimport Drummer from './musicians/Drummer';\nimport { PlasticDrums } from './instruments/PlasticDrums';\nimport { Metronome } from './Metronome';\nimport { Pulse } from './Pulse';\n\nexport class Trio extends Band {\n    pianist: Pianist;\n    bassist: Bassist;\n    drummer: Drummer;\n    mix: any;\n    instruments: { piano: any; bass: any; drums: any; };\n    metronome: Metronome;\n    constructor({ context, piano, bass, drums }) {\n        super({ context });\n        this.mix = this.setupMix(this.context);\n        const instruments = this.setupInstruments({ piano, bass, drums })\n        this.pianist = new Pianist(instruments.piano);\n        this.bassist = new Bassist(instruments.bass);\n        this.drummer = new Drummer(instruments.drums);\n        this.musicians = [this.pianist, this.bassist, this.drummer];\n        this.metronome = new Metronome(this.mix);\n    }\n\n    setupMix(context) {\n        const mix = context.createGain();\n        mix.gain.value = 0.9;\n        mix.connect(context.destination);\n        return mix;\n    }\n\n    setupInstruments({ piano, bass, drums }) {\n        bass = bass || randomSynth(this.mix);\n        piano = piano || randomSynth(this.mix);\n        drums = drums || new PlasticDrums({ mix: this.mix });\n        return { piano, bass, drums };\n    }\n\n    play(measures, settings) {\n        this.pulse = settings.pulse || new Pulse(settings);\n        return this.count(this.pulse, settings.metronome ? null : 0).then((tick) => {\n            settings.deadline = tick.deadline;\n            // settings.delay = deadline - this.context.currentTime;\n            super.play(measures, settings);\n        })\n    }\n\n    count(pulse, bars = 1) {\n        if (pulse.getMeasureLength() < 1.5) {\n            bars *= 2; //double countin bars when countin would be shorter than 1.5s\n        }\n        return this.metronome.count(pulse, bars);\n    }\n}\n","import Band from './Band';\nimport Pianist from './musicians/Pianist';\nimport Drummer from './musicians/Drummer';\nimport Bassist from './musicians/Bassist';\nimport { Instrument } from './instruments/Instrument';\nimport { Musician } from './musicians/Musician';\nimport { Synthesizer } from './instruments/Synthesizer';\nimport { Sampler } from './instruments/Sampler';\nimport { PlasticDrums } from './instruments/PlasticDrums';\nimport { Trio } from './Trio';\nimport * as util from './util';\nimport { Pulse } from './Pulse';\n\nexport { Trio, Band, Pianist, Bassist, Drummer, Instrument, Musician, Synthesizer, Sampler, PlasticDrums, Pulse, util };"]}